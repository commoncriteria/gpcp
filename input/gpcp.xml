<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../transforms/pp2html.xsl"?>

<PP xmlns="https://niap-ccevs.org/cc/v1"
    xmlns:sec="https://niap-ccevs.org/cc/v1/section" name="Protection Profile for General-Purpose Computing Platforms"
    xmlns:h="http://www.w3.org/1999/xhtml" boilerplate='yes'>

  <!-- <inline-comment color='green'> Hello World QQQQ </inline-comment> -->
  <!-- <inline-comment color='blue' linebreak='yes'> Hello World QQQQ </inline-comment> -->
  <PPReference>
    <ReferenceTable>
      <PPTitle>Protection Profile for General-Purpose Computing Platforms</PPTitle>
      <PPVersion>1.0</PPVersion>
      <PPAuthor>National Information Assurance Partnership</PPAuthor>
      <PPPubDate>2021-02-17</PPPubDate>
      <Keywords>General-Purpose Computing Platforms</Keywords>
    </ReferenceTable>
  </PPReference>

  <RevisionHistory>
    <entry>
      <version>Round 1</version>
      <date>2020-11-09</date>
      <subject>Started</subject>
    </entry>
  </RevisionHistory>
  <RevisionHistory>
    <entry>
      <version>1.0</version>
      <date>2021-05-06</date>
      <subject>Drafty</subject>
    </entry>
  </RevisionHistory>

    <pp-preferences>
<!--        <pp-pref name="display-audit-with-sfrs">0</pp-pref> -->
    	<audit-events-in-sfrs/>
    </pp-preferences>

<!-- DSC Exportable Functions 
	x Asymmetric-Key Generation [FCS_CKM.1/AK]
	x Symmetric-Key Generation [FCS_CKM.1/SK]
	x Private-Key Cryptography FCS_CKM.2
	x Public-Key Cryptography FCS_CKM.2
	x Symmetric-Key Cryptography FCS_COP.1/SKC
	x KEK Creation FCS_CKM.1/KEK
	x Random-Bit Generation FCS_RBG_EXT.1, [FCS_ENT_EXT.1]
	x RNG Seeding FCS_RBG_EXT.1, [FCS_RBG_EXT.2]
	x Key Wrapping FCS_COP.1/KeyEnc
	x Cryptographic Hashing FCS_COP.1/Hash
	x Cryptographic Keyed Hash FCS_COP.1/HMAC
	x Password Hashing (PBKDF) [FCS_COP.1/PBKDF]
	x Signature Generation FCS_COP.1/SigGen
	x Signature Verification FCS_COP.1/SigVer
	Factory Reset FDP_FRS_EXT.1, [FDP_FRS_EXT.2]
	x Destroy Persistent Secrets FCS_CKM.4
	Set Root Encryption Key (mutable H/W) FCS_STG_EXT.1
	Store Persistent Secrets FCS_STG_EXT.1-3
	Wrap Transient Secrets FCS_STG_EXT.1-3
	Get Time Stamp FPT_STM.1
	Cryptographic Self-Tests FPT_TST.1
-->


<!-- 1.0 Introduction   -->
<!--    1.1 Overview   -->
<section title="Introduction" id="int">
    <section title="Overview" id="ppoverview">
		The scope of this Protection Profile (PP) is to describe the security functionality of 
		General-Purpose Computing Platforms in terms of the Common Ctiteria and
		to define functional and assurance requirements for such products.<h:p/>
	  
		A platform is a collection of hardware devices and firmware that provide the functional capabilities and 
		services needed by tenant software. Such components typically include embedded controllers, trusted platform 
		modules, management controllers, host processors, network interface controllers, graphics processing units, 
		flash memory, storage controllers, storage devices, boot firmware, runtime firmware, human interface devices, 
		and a power supply.<h:p/>
		
		This Protection Profile for General-Purpose Comouting Platforms derives requirements from 
		the <h:i>NIAP Protection Profile for BIOS Update for PC Client Devices Version 1.0</h:i> and several NIST
		Publications, including Special Publications 800-147 (BIOS Protection Guidelines), 800-147B (BIOS Protection
		Guidelines for Servers), and 800-193 (Platform Firmware Resiliency Guidelines). 
	</section>
	
<!--   1.2 Terms   -->
<!--     1.2.1 Common Criteria Terms (auto-generated) -->
<!--     1.2.2 Technical Terms -->
	  
    <tech-terms>
      <term abbr='AES' full="Advanced Encryption Standard"/>
      <term abbr='API' full="Application Programming Interface"/>
      <term full="Administrator">
		An administrator is responsible for management activities, including setting policies that are 
		applied by the enterprise on the platform. An administrator can act remotely through a management server,
		from which the platform receives configuration policies and updates. An administrator can enforce
		settings on the system that cannot be overridden by non-administrator users.
      </term>
      <term full="Application" abbr="app">
		Software that runs on a platform and performs tasks on behalf of the user
		or owner of the platform. 
      </term>
      <term full="Application Programming Interface" abbr="API">
		A specification of routines, data structures, object classes, and variables
		that allows an application to make use of services provided by another software
		component, such as a library. APIs are often provided for a set of libraries included
		with the platform.
      </term>
      <term abbr='CESG' full="Communications-Electronics Security Group"/>
      <term abbr='CMC' full="Certificate Management over CMS"/>
      <term abbr='CMS' full="Cryptographic Message Syntax"/>
      <term abbr='CN' full="Common Names"/>
      <term full="Credential">
		Data that establishes the identity of a user, e.g. a cryptographic key or
		password.
      </term>
      <term abbr='CRL' full="Certificate Revocation List"/>
      <term abbr='CSA' full="Computer Security Act"/>
      <term full="Critical Security Parameters" abbr="CSP">
		Information that is either user or system defined and
		is used to operate a cryptographic module in processing encryption functions including
		cryptographic keys and authentication data, such as passwords, the disclosure or modification
		of which can compromise the security of a cryptographic module or the security of the
		information protected by the module.
      </term>
      <term full="Data At Rest" abbr="DAR" />
      <term full="DAR Protection">
		Countermeasures that prevent attackers, even those with physical access,
		from extracting data from non-volatile storage.
		Common techniques include data encryption and wiping.
      </term>
      <term full="Data Execution Prevention" abbr="DEP">
		An anti-exploitation feature of modern operating systems executing on
		modern computer hardware, which enforces a non-execute permission on pages of memory.
		DEP prevents pages of memory from containing both data and instructions, which makes
		it more difficult for an attacker to introduce and execute code.
      </term>
      <term abbr='DES' full="Data Encryption Standard"/>
      <term full="Developer">
		An entity that writes OS software. For the purposes of this document,
		vendors and developers are the same.
      </term>
      <term full="General Purpose Operating System">
		A class of OS designed to support a wide-variety of workloads consisting of many concurrent applications or
		services. Typical characteristics for OSes in this class include support for third-party applications,
		support for multiple users, and security separation between users and their respective resources.
		General-Purpose Operating Systems also lack the real-time constraint that defines Real Time Operating
		Systems (RTOS). RTOSes typically power routers, switches, and embedded devices.
      </term>
      <term abbr='DHE' full="Diffie-Hellman Ephemeral"/>
      <term abbr='DNS' full="Domain Name System"/>
      <term abbr='DRBG' full="Deterministic Random Bit Generator"/>
      <term abbr='DSS' full="Digital Signature Standard"/>
      <term abbr='DT' full="Date/Time Vector"/>
      <term abbr='DTLS' full="Datagram Transport Layer Security"/>
      <term abbr='EAP' full="Extensible Authentication Protocol"/>
      <term abbr='ECDHE' full="Elliptic Curve Diffie-Hellman Ephemeral"/>
      <term abbr='ECDSA' full="Elliptic Curve Digital Signature Algorithm"/>
      <term abbr='EST' full="Enrollment over Secure Transport"/>
      <term abbr='FIPS' full="Federal Information Processing Standards"/>
	  <term abbr='GPCP' full="General-Purpose Computing Platform">
		A physical computing platform designed to support general-purpose operating systems, virtualiation 
		systems, and applications.
	  </term>
      <term abbr='HMAC' full="Hash-based Message Authentication Code"/>
      <term abbr='HTTP' full="Hypertext Transfer Protocol"/>
      <term abbr='HTTPS' full="Hypertext Transfer Protocol Secure"/>
      <term abbr='DSS' full="Digital Signature Standard"/>
      <term abbr='IETF' full="Internet Engineering Task Force"/>
      <term abbr='IP' full="Internet Protocol"/>
      <term abbr='ISO' full="International Organization for Standardization"/>
      <term abbr='IT' full="Information Technology"/>
      <term abbr='ITSEF' full="Information Technology Security Evaluation Facility"/>
      <term abbr='NIST' full="National Institute of Standards and Technology"/>
      <term abbr='OID' full="Object Identifier"/>
      <term full="Operating System" abbr="OS" plural="OSes">
		Software that manages physical and logical resources and provides services
		for applications. Operating systems are the generally the primary tenant of a GPCP.
      </term>
      <term abbr='PKI' full="Public Key Infrastructure"/>
      <term abbr='RBG' full="Random Bit Generator"/>
      <term abbr='RFC' full="Request for Comment"/>
      <term abbr='RNG' full="Random Number Generator"/>
      <term abbr='RNGVS' full="Random Number Generator Validation System"/>
      <term abbr='SHA' full="Secure Hash Algorithm"/>
      <term full="Sensitive Data">
		Sensitive data may include all user or enterprise data or may be specific
		application data such as PII, emails, messaging, documents, calendar items, and contacts.
		Sensitive data must minimally include credentials and keys. Sensitive data shall
		be identified in the OS's TSS by the ST author. 
      </term>
      <term abbr='SWID' full="Software Identification"/>
	  <term full="Tenant Software">
		Software that runs on and is supported by a platform. In the case of a GPCP, tenant software generally
		consists of an operating system, virtualization system, or "bare-metal" application.
	  </term>
      <term abbr='TLS' full="Transport Layer Security"/>
      <term abbr='USB' full="Universal Serial Bus"/>
      <term full="User">
		In the context of a GPCP, a User is a person who is physically present and operating the platform.
      </term>
	  <term abbr="VM" full="Virtual Machine">
	    A Virtual Machine is a virtualized hardware environment in which an operating system may execute.
	  </term>
	  <term abbr="VS" full="Virtualization System">
		A software product that enables multiple independent computing systems to execute on the same physical
		hardware platform without interference from one other. For the purposes of this document, the VS consists 
		of a Virtual Machine Manager (VMM), Virtual Machine abstractions, a management subsystem, and other 
		components.
	  </term>
      <term abbr='XOR' full="Exclusive Or"/>
    </tech-terms>   
	
<!--   1.3 Compliant Targets of Evaluation -->
    <section title="Compliant Targets of Evaluation" id="TOEdescription">
		A general-purpose computing platform is a hardware device that is capable of hosting more than one 
		different operating system, virtualization system, or bare-metal application. Typical platform 
		implementations include servers, PC clients, laptops, and tablets.<h:p/>
		Mobile Device platforms as defined in the Protection Profile for Mobile Device Fundamentals and 
		Network Device platforms as defined in the collaborative Protection Profile for Network Devices 
		are out of scope of this PP.  Mobile Device and Network Device platforms must be evaluated 
		against the more specific requirements in their respective specialized PPs.

<!--      1.3.1 TOE Boundary -->	    
    <section title="TOE Boundary" id="TOEboundary">
		The TOE comprises the hardware and firmware necessary for the hosting of tenant software. Generally,
		tenant software is an operating system or virtualization system, but may also be "bare-metal" applications.
		Tenant software is outside the TOE boundary.<h:p/>
		For example, for a PC Client platform, the hardware and firmware responsible for booting the platform and 
		operation of platform devices (such as BIOS, device controller firmware and plaform management firmware would all 
		be included in the TOE. Operating systems and application software is outside the TOE.<h:p/>
		For server-class hardware, any management controller responsible for updating platform firmware is expressly
		included within the TOE.<h:p/>
        <figure entity="images/arch.png" title="High-Level Architecture of a Generic Platform" id="toe"/><h:p/>
		Figure 1 (taken from NIST SP 800-193) shows a high-level system architecture for a generic computing platform.
		Tenant software (operating system/virtualization system and applications) is shown in orange.
		The tenant-specific software responsible for booting the tenant (Master Boot Record, etc.) is shown
		in grey. Platform components are in blue.<h:p/>
		For purposes of these requirements, the TOE consists of the platform components as represented 
		by the blue boxes, along with their associated firmware. Any particular platform may have 
		additional hardware components, or fewer than those illustrated.
      </section>

<!--     1.3.2 TOE Operational Environment -->
      <section title="TOE Operational Environment" id="TOEopenv">
	      The TOE has no platform since it is itself a platform. But the TOE does have an operational
		  environment. The OE consists of the physical environment in which the TOE operates (e.g., 
		  data center, enterprise office, vehicle, outdoors) and any networks to which the TOE may
		  be connected. Different use cases may invoke different requirements depending on the 
		  operational environment.
      </section>
    </section>
	
<!--   1.4 Use Cases  -->
    <section title="Use Cases" id="usecases">
	
		This Protection Profile supports several use cases for general-purpose computing platforms. By default,
		the PP expresses requirements for portable or desktop clients in a low-risk operational environment.
		Enterprise server platforms add audit requirements. Use cases involving higher-risk operational 
		environments add requirements for physical protections. 
	    
	<!-- Physical protections are one of the major differences in use cases. There are probably 
	four levels of physical protections. 
	    1. None. Physical protection commensurate with the value of the information is assumed to be
		provided by the operational environment.
		2. Tamper Detect without Automatic Notification (FPT_PHP.1)
		3. Tamper Detect with Automtic Notification (FPT_PHP.2)
		4. Tamper Resistance (FPT_PHP.3)
		We just have to align these levels with the use cases.
		
		CSfC/MACP has some EUD choices:
		- EUD with DAR 
		  - Continuous physical control required
		- Classified EUD 
		  - Rely on the environment for physical protection
		  - Continuous physical control required
		  - DAR required to store keys
		- Thin EUD
		  - DAR required to store keys
		  - Contunous physical control required
		  
		MA-EU-10  An EUD must be de-authorized from the network and submitted for Forensic Analysis if
				suspected of being compromised.
		MA-EU-11 An EUD must be destroyed if it has been determined to be compromised through
				Forensic Analysis.
		MA-EU-41 The EUD must perform a wipe of all protected data after 10 or less authentication failures. 
		MA-EU-57 USB debugging capabilities must be disabled on the EUDs.
		MA-CM-3 All solution components must be configured with a monitoring service that detects all
				changes to configuration. 
		MA-AU-9 Solution components must log all actions performed on the audit log (i.e., off-loading,
				deletion, etc.).		
		MA-GD-7 Users must periodically inspect the physical attributes of EUDs for signs of tampering or
				other unauthorized changes.		
		MA-GD-30 All hardware components must be tracked through an AO-approved inventory
				management process that identifies each component as part of a CSfC Solution. All T=O
		MA-GD-31 Users must maintain continuous physical control of the EUD as defined by local policy.
		MA-RP-11 Solution owners must report any evidence of malicious physical tampering with solution
				components.
	-->
	<usecases>
		<usecase title="Server-Class Platform, Basic" id="uc-server-basic">
        	<description>
				This use case includes the base requirements for server-class hardware in a data center OE. There are 
				no additional physical protections required because the platform is assumed to be protected 
				by the operational environment as indicated by A.PHYSICAL_PROTECTION.<h:p/>
				This use case adds only audit requirements the base mandatory requirements.
          	</description>
			<config>
				<ref-id>sfr-fau-gen-1</ref-id>
			</config>
        </usecase>
		<usecase title="Server-Class Platform, Enhanced" id="uc-servers-enhanced">
        	<description>
				This use case adds physical protections to the base requirements for server-class hardware.
				Additional physical protections required because the platform us assumed to be minimally 
				protected by the by the operational environment. This use case can also be used for servers in 
				data centers where there are enhanced security requirements.<h:p/>
				This use case adds requirements for audit and physical protections to the base mandatory SFRs.
				It removes the assumption that the TOE is physically protected by the OE.
          	</description>
			<config>
				<ref-id>sfr-fau-gen-1</ref-id>
				<ref-id>sfr-fpt-php-2</ref-id> 
				<ref-id>sfr-fpt-php-3</ref-id> 
				<ref-id>t-physical</ref-id>				
				<not><ref-id>a-physical-protection</ref-id></not>				
			</config>
        </usecase>
		<usecase title="Portable Clients (laptops, tablets), Basic" id="uc-clients-portable-basic">
        	<description>
				This use case includes the base requirements for portable clients or end-user devices. <h:p/>
				This use case adds no requirements to the base mandatory SFRs.
          	</description>
			<config>
			</config>
        </usecase>
		<usecase title="Portable Clients (laptops, tablets), Enhanced" id="uc-clients-portable-enhanced">
        	<description>
				This use case adds physical protections to the base requirements for portable clients or end-user 
				devices. It is intended for devices that are used in high-assurance scanrios.
          	</description>
			<config>
				<ref-id>sfr-fpt-php-1</ref-id> 
				<ref-id>t-physical</ref-id>				
				<not><ref-id>a-physical-protection</ref-id></not>				
			</config>
        </usecase>
		<usecase title="CSfC EUD" id="uc-csfc-eud">
        	<description>
				EUDs used in accordance with the CSfC Mobile Access Capability Package can include 
				smart phones, tablets, and laptops. This use case covers the basic CSfC requirements 
				for tablet and laptop EUDs (mobile devices are out of scope for this PP).<h:p/>
				Although CSfC requires that users maintain physical control of EUDs at all times,
				this use case removes the assumption that the TOE is protected by the OE and 
				adds requirements for audit and basic tamper detection and reporting.
          	</description>
			<config>
				<ref-id>sfr-fpt-php-1</ref-id> 
				<ref-id>sfr-fpt-php-2</ref-id> 
				<ref-id>sfr-fau-gen-1</ref-id>
				<ref-id>t-physical</ref-id>				
				<not><ref-id>a-physical-protection</ref-id></not>				
			</config>
        </usecase>
		<usecase title="Tactical EUD" id="uc-tactical-eud">
        	<description>
				This use case adds requirements for portable end user computing devices in a tactial
				environment. 
          	</description>
			<config>
				<ref-id>sfr-fpt-php-3</ref-id> 
				<not><ref-id>a-physical-protection</ref-id></not>				
			</config>
        </usecase>
		<usecase title="Desktop clients" id="uc-clients-desktop">
        	<description>
				This use case covers the requirements for non-portable desktop computing devices in a low-threat
				physical environment.<h:p/>
				This use case adds only audit to the base mandatory SFRs.
          	</description>
			<config>
				<ref-id>sfr-fau-gen-1</ref-id>
			</config>
        </usecase>
		<usecase title="IoT Devices" id="uc-iot-device">
        	<description>
				IoT devices are field-located devices without human interfaces when in normal 
				operation. In order to qualify for evaluation under this PP, the device must meet 
				the basic criteria for a general-purpose platform, and not meet the requirements
				for a mobile device or network device.
          	</description>
			<config>
				<ref-id>sfr-fpt-php-1</ref-id> 
				<ref-id>t-physical</ref-id>				
				<not><ref-id>a-physical-protection</ref-id></not>				
			</config>
        </usecase>
		</usecases>
    </section>
  </section>

<!-- 2.0 Conformance Claims (this is all boilerplate) -->
  <section title="Conformance Claims" id="cclaims"/>
	
<!-- 3.0 Security Problem Description -->
  <section title="Security Problem Description" id="spd">
	The security problem is described in terms of the threats that the GPCP is expected to address, assumptions 
	about the operational environment, and any organizational security policies that the GPCP
    	is expected to enforce.<h:br/><h:br/>
  	The platform has three major security responsibilities:
	<h:ul>
		<h:li>ensuring the integrity of its own firmware</h:li>
		<h:li>ensuring that it is resilient</h:li>
		<h:li>providing security services to tenant workloads</h:li>
	</h:ul>
	These responsibilities manifest as protecting: 
	<h:ul>
		<h:li>Platform firmware</h:li>
		<h:li>Platform firmware updates</h:li>
		<h:li>Tenant initialization (boot)</h:li>
	</h:ul>
	  

<!--    3.1 Threats -->
	  
    <section title="Threats" id="threats">
      <threats>
        <threat id="t-physical" name="T.PHYSICAL">
          <description>An attacker with physical access might be able to compromise TOE integrity, subvert
		  TOE protections, or access tenant data through hardware attacks such as probing, physical
		  manipulation, fault-injection, side-channel analysis, environmental stress, or activating
		  disabled features or pre-delivery services. This threat is included only in the following 
		  use cases:<h:ul>
			<h:li>Server-Class Platform, Enhanced</h:li>
			<h:li>Portable Clients (laptops, tablets), Enhanced</h:li>
			<h:li>CSfC EUD</h:li>
			<h:li>Tactical EUD</h:li>
			<h:li>IoT Devices</h:li></h:ul>
		  </description>
          <objective-refer ref="O.PHYSICAL_INTEGRITY">
            <rationale>The threat T.PHYSICAL is countered by O.PHYSICAL_INTEGRITY as this
              objective supports detection or prevention of attempts to compromise
			  the physical platform.</rationale>
          </objective-refer>
          <objective-refer ref="O.ATTACK_DETECTION_AND_RESPONSE">
            <rationale>The threat T.PHYSICAL is countered by O.ATTACK_DETECTION_AND_RESPONSE as this
              objective supports detection and reporting of attempts to compromise the TOE.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.SIDE_CHANNEL_LEAKAGE">
          <description>An attacker running in a tenant context might be able to leverage physical
		  effects caused by the operation of the TOE to derive sensitive information about
		  other tenants or the TOE.</description>
          <objective-refer ref="O.MITIGATE_FUNDAMENTAL_FLAWS">
            <rationale>The threat T.SIDE_CHANNEL_LEAKAGE is countered by O.MITIGATE_FUNDAMENTAL_FLAWS as this
              objective supports the remedy of critical flaws through update or other technical or
			  operational means.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.PERSISTENCE">
          <description>An attacker might be able to establish a permanent presence on the TOE in
		  firmware. This could result in permanent compromise of tenant information, as
		  well as TOE updates. This threat does not encompass attacker presence in tenant
		  software, as tenant software is not part of the TOE. </description>
          <objective-refer ref="O.PROTECTED_FIRMWARE">
            <rationale>The threat T.PERSISTENCE is countered by O.PROTECTED_FIRMWARE as this
              objective supports maintenance of platform firmware integrity.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.UPDATE_COMPROMISE">
          <description>An attacker may attempt to provide a compromised update of TOE firmware. 
		  Such updates can undermine the security functionality of the device if they are
		  unauthorized, unauthenticated, or are improperly validated using non-secure or
		  weak cryptography.</description>
          <objective-refer ref="O.UPDATE_INTEGRITY">
            <rationale>The threat T.UPDATE_COMPROMISE is countered by O.UPDATE_INTEGRITY as this
              objective supports ensuring that platform firmware updates are authentic and 
			  properly validated prior to installation.</rationale>
          </objective-refer>
          <objective-refer ref="O.STRONG_CRYPTOGRAPHY">
            <rationale>The threat T.UPDATE_COMPROMISE is countered by O.STRONG_CRYPTOGRAPHY as this
              objective supports use of proven, standards-based cryptographic mechanisms 
			  for ensuring that updates are authentic and maintain their integrity.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.SECURITY_FUNCTIONALITY_FAILURE">
          <description>An attacker could leverage failed or compromised security functionality to 
		  access, change, or modify tenant data, TOE data, or other security functionality
		  of the device.</description>
          <objective-refer ref="O.SECURITY_FUNCTIONALITY_INTEGRITY">
            <rationale>The threat T.SECURITY_FUNCTIONALITY_FAILURE is countered by O.SECURITY_FUNCTIONALITY_INTEGRITY
			  as this objective supports integrity and proper functioning of security functionality.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.TENANT-BASED_ATTACK">
          <description>An attacker running software as a tenant can attempt to access or modify
		  TOE firmware or functionality. Note that direct tenant attacks against other
		  tenants are not encompassed by this threat as they out of scope.</description>
          <objective-refer ref="O.TENANT_SECURITY">
            <rationale>The threat T.TENANT-BASED_ATTACK is countered by O.TENANT_SECURITY as this
              objective supports tenant-based security mechanisms to prevent tenant compromise.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.NETWORK_BASED_ATTACK">
          <description>An attacker from off the TOE can attempt to compromise the TOE
		  through a network interface connected to an active TOE component, such
		  as a management subsystem.</description>
          <objective-refer ref="O.TRUSTED_CHANNELS">
            <rationale>The threat T.REMOTE_ATTACK is countered by O.TRUSTED_CHANNELS as this
              provides for integrity and confidentiality of transmitted data.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.UNAUTHORIZED_RECONFIGURATION">
          <description>An attacker might be able to modify the configuration of the TOE and alter its 
		  functionality. This might include, activating dormant subsystems, disabling hardware assists,
		  or altering boot-time behaviors.</description>
          <objective-refer ref="O.CONFIGURATION_INTEGRITY">
            <rationale>The threat T.UNAUTHORIZED_RECONFIGURATION is countered by O.CONFIGURATION_INTEGRITY as this
              provides for integrity of platform configuration.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.UNAUTHORIZED_PLATFORM_ADMINISTRATOR">
          <description>An attacker might be able to attain platform administrator status by defeating or bypassing
		  authentication measures.</description>
          <objective-refer ref="O.AUTHORIZED_ADMINISTRATOR">
            <rationale>The threat T.UNAUTHORIZED_PLATFORM_ADMINISTRATOR is countered by O.AUTHORIZED_ADMINISTRATOR as this
              provides for authentication of privileged administrative users.</rationale>
          </objective-refer>
        </threat>
      </threats>
    </section>
	  
<!--   3.2 Assumptions  -->
    <section title="Assumptions" id="assumptions">
      <assumptions>
        <assumption id="a-physical-protection" name="A.PHYSICAL_PROTECTION">
          <description>The TOE is assumed to be physically protected in its operational environment and
		  thus is not subject to physical attacks that could compromise its security or its ability
		  to support the security of tenant workloads. </description>
          <objective-refer ref="OE.PHYSICAL_PROTECTION">
            <rationale> The operational environment objective OE.PHYSICAL_PROTECTION is realized through
              A.PHYSICAL_PROTECTION. </rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.ROT_INTEGRITY">
          <description>The TOE includes one or more Roots of Trust composed of TOE firmware, hardware, and
		  pre-installed credentials. Roots of Trust are assumed to be free of malicious capabilities as
		  their integrity cannot be verified. </description>
          <objective-refer ref="OE.ROT_INTEGRITY">
            <rationale>The operational environment objective OE.SUPPLY_CHAIN is realized through
              A.ROT_INTEGRITY.</rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.TRUSTED_ADMIN">
          <description> TOE Security Administrator are assumed to be trusted and to act in the best interest
			of security for the organization. The TOE is not expected to be capable of defending against a 
			malicious Administrator that actively works to bypass or compromise the security of the platform.
			</description>
          <objective-refer ref="OE.TRUSTED_ADMIN">
            <rationale>The operational environment objective OE.TRUSTED_ADMIN is realized through
              A.TRUSTED_ADMIN.</rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.MFR_ROT">
          <description> The root signing credential of the manufacturer is assumed to be secure and has not been 
			compromised.
			</description>
          <objective-refer ref="OE.TRUSTED_ADMIN">
            <rationale>The operational environment objective OE.TRUSTED_ADMIN is realized through
              A.TRUSTED_ADMIN.</rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.TRUSTED_DEVELOPMENT_AND_BUILD_PROCESSES">
          <description> The TOE cannot protect itself during its own development and build processes. Therefore
		  it is assumed that the developers and participants in the build process are not hostile.
			</description>
          <objective-refer ref="OE.TRUSTED_ADMIN">
            <rationale>The operational environment objective OE.TRUSTED_ADMIN is realized through
              A.TRUSTED_ADMIN.</rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.SUPPLY_CHAIN_SECURITY">
          <description>The hardware components that comprise the TOE are assumed to be non-hostile and not
		  compromised at the time of TOE construction. Likewise, the TOE is assumed to retain its integrity
		  throughout transportation until delivery to its operational site.
			</description>
          <objective-refer ref="OE.TRUSTED_ADMIN">
            <rationale>The operational environment objective OE.TRUSTED_ADMIN is realized through
              A.TRUSTED_ADMIN.</rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.CORRECT_INITIAL_CONFIGURATION">
          <description>It is assumed that the initial setup and configuration of the TOE at its operational 
		  site is correct and in accordance with organizational security policy and operational use case.
			</description>
          <objective-refer ref="OE.TRUSTED_ADMIN">
            <rationale>The operational environment objective OE.TRUSTED_ADMIN is realized through
              A.TRUSTED_ADMIN.</rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.TRUSTED_USERS">
          <description>Physically present non-administrative users of the TOE are assumed to be trusted as 
		  far as they are assumed to not be actively trying to subvert the system. (Not for all use cases).
			</description>
          <objective-refer ref="OE.TRUSTED_ADMIN">
            <rationale>The operational environment objective OE.TRUSTED_ADMIN is realized through
              A.TRUSTED_ADMIN.</rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.REGULAR_UPDATES">
          <description>It is assumed that the manufacturer provides updates to TOE firmware in a timely manner
		  in response to known vulnerabilities, and that Administrators apply these updates when they are
		  received.
			</description>
          <objective-refer ref="OE.TRUSTED_ADMIN">
            <rationale>The operational environment objective OE.TRUSTED_ADMIN is realized through
              A.TRUSTED_ADMIN.</rationale>
          </objective-refer>
        </assumption>
      </assumptions>
    </section>
	  
<!--   3.3 Organizational Security Policies -->
    <section title="Organizational Security Policies" id="OSPs">
      <OSPs>
        <OSP id="P.ENTERPRISE">
          <description>If the OS is bound to a directory or management server, the configuration of
            the OS software must be capable of adhering to the enterprise security policies
            distributed by them.</description>
          <objective-refer ref="O.MANAGEMENT">
            <rationale>The organizational security policy P.ENTERPRISE is enforced through the
              objective O.MANAGEMENT as this objective represents how the enterprise and user assert
              management over the OS.</rationale>
          </objective-refer>
        </OSP>
      </OSPs>
    </section>
  </section>
	    
<!-- 4.0 Security Objectives -->
  <section title="Security Objectives" id="obj">
	  
<!--   4.1 Security Objectives for the TOE -->
    <section title="Security Objectives for the TOE" id="SecurityObjectivesTOE">
      <SOs>
        <SO name="O.PHYSICAL_INTEGRITY">
          <description>Protect the physical platform and interfaces from access by physical means such as
		  probing, physical manipulation, fault-injection, side-channel analysis, environmental stress, or 
		  activating disabled features or pre-delivery services. This includes specification of:<h:ul>
			<h:li>Requirements for tamper detection</h:li>
			<h:li>Requirements for disabling or protection of external debug interfaces</h:li>
			<h:li>Requirements for updateability</h:li>
			<h:li>Requirements for environmental shielding</h:li></h:ul>
		  </description>
          <addressed-by>FPT_PHP.1</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FPT_PHP.2</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FPT_PHP.3</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FPT_TUD_EXT.1</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FPT_TUD_EXT.2</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FPT_TUD_EXT.3</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FPT_TUD_EXT.4</addressed-by><rationale>Rationale</rationale>		  
        </SO>
        <SO name="O.ATTACK_DETECTION_AND_RESPONSE">
          <description>Detected attempts to compromise the physical or logical integrity of the TOE must
		  be indicated to a user or reported to an enterprise security authority. This includes
		  specification of:<h:ul>
			<h:li>Requirements for responses to particular detected events. (resilience, secure state, etc.)</h:li>
			<h:li>Requirements for basic auditing capabilities and protection of audit records.</h:li>
			<h:li>Requirements for secure transmission of audit records (if applicable)</h:li></h:ul>
			</description>
            <addressed-by>FAU_GEN.1</addressed-by><rationale>Rationale</rationale>
            <addressed-by>FPT_PHP.1</addressed-by><rationale>ASLR For reasons </rationale>
            <addressed-by>FPT_PHP.3</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FPT_ROT_EXT.2</addressed-by><rationale>For reasons </rationale>
        </SO>
        <SO name="O.MITIGATE_FUNDAMENTAL_FLAWS">
          <description>The TOE must have a capability for mitigating or fixing fundamental flaws through update 
		  or some other technical or operational means. This includes specifications of:<h:ul>
			<h:li>Requirements for updateabililty of TOE firmware.</h:li></h:ul>
			</description>
          <addressed-by>FPT_TUD_EXT.1</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FPT_TUD_EXT.2</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FPT_TUD_EXT.3</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FPT_TUD_EXT.4</addressed-by><rationale>Rationale</rationale>		  
        </SO>
        <SO name="O.PROTECTED_FIRMWARE">
          <description>
		TOE firmware can be modified only through a non-bypassable trusted update process. This ensures the
		integrity of firmware both during the update process and while at rest. This includes specification
		of:<h:ul>
			<h:li>Requirements for invocation of the trusted update process</h:li>
			<h:li>Requirements for non-bypassability of the update process</h:li>
			<h:li>Requirements for detection and reporting of attempts to modify TOE 
				firmware outside of the trusted update process.</h:li></h:ul>
          </description>
          <addressed-by>FPT_TUD_EXT.1</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FPT_TUD_EXT.2</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FPT_TUD_EXT.3</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FPT_TUD_EXT.4</addressed-by><rationale>Rationale</rationale>		  
		  <addressed-by>FPT_ROT_EXT.2</addressed-by><rationale>Rationale</rationale>
		  <addressed-by>FPT_PPF_EXT.1</addressed-by><rationale>Rationale</rationale>
		  <addressed-by>FPT_RVR_EXT.1</addressed-by><rationale>Rationale</rationale>
        </SO>
        <SO name="O.UPDATE_INTEGRITY">
          <description>Updates to TOE firmware must be authorized, authenticated, and properly validated prior
		  to installation. This includes specification of:<h:ul>
			<h:li>Requirements for protection of updates</h:li>
			<h:li>Requirements for authentication of update packages</h:li>
			<h:li>Requirements for management of updates</h:li>
			<h:li>Requirements for detection and reporting of update events, whether authorized or not.
			</h:li></h:ul></description>
          <addressed-by>FPT_TUD_EXT.1</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FPT_TUD_EXT.2</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FPT_TUD_EXT.3</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FPT_TUD_EXT.4</addressed-by><rationale>Rationale</rationale>		  
		  <addressed-by>FPT_ROT_EXT.2</addressed-by><rationale>Rationale</rationale>
		  <addressed-by>FPT_PPF_EXT.1</addressed-by><rationale>Rationale</rationale>
        </SO>
        <SO name="O.STRONG_CRYPTOGRAPHY">
          <description>Cryptography must meet the standards required for protection of National Security Systems data 
		  (in accordance with CNSSP 15, "Use of Public Standards for Secure Information Sharing"). This includes 
		  specification of:<h:ul>
			<h:li>Requirements for use and configuration of cryptographic operations.</h:li>
			<h:li>Requirements for key generation</h:li>
			<h:li>Requirements for random bit generation support.</h:li>
			</h:ul></description>
          <addressed-by>FCS_CKM.1/AK</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FCS_CKM.1/SK</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FCS_CKM.1/KEK</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FCS_CKM.2</addressed-by><rationale>Rationale</rationale>		  
		  <addressed-by>FCS_CKM_EXT.5</addressed-by><rationale>Rationale</rationale>
		  <addressed-by>FCS_COP.1/HMAC</addressed-by><rationale>Rationale</rationale>
		  <addressed-by>FCS_COP.1/KAT</addressed-by><rationale>Rationale</rationale>
		  <addressed-by>FCS_COP.1/KeyEnc</addressed-by><rationale>Rationale</rationale>
		  <addressed-by>FCS_COP.1/PBKDF</addressed-by><rationale>Rationale</rationale>
		  <addressed-by>FCS_COP.1/SigGen</addressed-by><rationale>Rationale</rationale>
		  <addressed-by>FCS_COP.1/SigVer</addressed-by><rationale>Rationale</rationale>
		  <addressed-by>FCS_COP.1/SKC</addressed-by><rationale>Rationale</rationale>
		  <addressed-by>FCS_RBG_EXT.1</addressed-by><rationale>Rationale</rationale>
		  <addressed-by>FCS_SLT_EXT.1</addressed-by><rationale>Rationale</rationale>
		  <addressed-by>FCS_COP.1/Hash</addressed-by><rationale>Rationale</rationale>
        </SO>
        <SO name="O.SECURITY_FUNCTIONALITY_INTEGRITY">
          <description>The TOE should be able not be able to operate with failed or degraded
		  security functionality in such a way as might compromise the security or integrity of 
		  the TOE or of TOE data.<h:ul>
			<h:li>Requirements for detection of degraded or failed security functionality.</h:li>
			<h:li>Requirements for protection of platform credentials against compromise (secret keys,
				passwords, etc.)</h:li>
			<h:li>Requirements for secure destruction of platform credentials (if applicable)</h:li>
			<h:li>Requirements for quality of credentials (password lengths and the like)</h:li>			
			</h:ul></description>
          <addressed-by>FPT_PPF_EXT.1</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FCS_CKM.4</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FCS_CKM_EXT.4</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FCS_STG_EXT.1</addressed-by><rationale>Rationale</rationale>		  
		  <addressed-by>FCS_STG_EXT.2</addressed-by><rationale>Rationale</rationale>
		  <addressed-by>FCS_STG_EXT.3</addressed-by><rationale>Rationale</rationale>
        </SO>
        <SO name="O.TENANT_SECURITY">
          <description>The TOE should provide capabilities and security services to tenant software 
		  to help tenants help themselves. This includes specification of:<h:ul>
			<h:li>Requirements for providing cryptographic support to tenants (random bit generation,
				crypto support instructions).</h:li>
			<h:li>Requirements for support for separation of tenant workloads</h:li>
			<h:li>Requirements for supporting secure storage of tenant credentials</h:li>
			<h:li>Requirements for supporting secure boot of a tenant operating system</h:li>			
			</h:ul></description>
          <addressed-by>FCS_ENT_EXT.1</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FCS_STG_EXT.1</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FCS_STG_EXT.2</addressed-by><rationale>Rationale</rationale>
          <addressed-by>FCS_STG_EXT.3</addressed-by><rationale>Rationale</rationale>		  
		  <addressed-by>FDP_TEE_EXT.1</addressed-by><rationale>Rationale</rationale>
        </SO>
        <SO name="O.TRUSTED_CHANNELS">
          <description>Certain types of network communications with the TOE must be protected with guaranteed 
		  confidentiality, integrity, and authenticity. Such traffic includes communications with remote 
		  administrators, audit servers, update servers, and credential managers. This objective includes 
		  specification of:<h:ul>
			<h:li>Requirements for the use of secure network protocols</h:li>
			<h:li>Requirements for the use of public key certificates</h:li>
			<h:li>Requirements for the authentication of endpoints</h:li>
			</h:ul></description>
          <addressed-by>FCS_ENT_EXT.1</addressed-by><rationale>Not really this one. No trusted channel in here yet.</rationale>
        </SO>
        <SO name="O.CONFIGURATION_INTEGRITY">
          <description>The TOE should detect or prevent unauthorized users from being able to modify the system configuration.
		  This includes:<h:ul>
			<h:li>Requirements for authentication of Administrators before application of configuration modifications.</h:li>
			<h:li>Requirements for detection and reporting of attempts to modify the TOE configuration.</h:li>
			</h:ul></description>
          <addressed-by>FCS_ENT_EXT.1</addressed-by><rationale>Not really this one.</rationale>
        </SO>
        <SO name="O.AUTHORIZED_ADMINISTRATOR">
          <description>The TOE must ensure that Administrative actions can be taken only by authorized Administrators. This includes 
		  specification of:<h:ul>
			<h:li>Requirements specifying actions allowable for the Administrator role</h:li>
			<h:li>Requirements for processes for authenticating Administrators</h:li>
			<h:li>Requirements for protection of Administrator credentials</h:li>
			<h:li>Requirements for setup and operation of a secure channel for remote administration</h:li>
			<h:li>Requirements for management of administrator sessions.</h:li>
			</h:ul></description>
          <addressed-by>FCS_ENT_EXT.1</addressed-by><rationale>Not really this one.</rationale>
        </SO>
      </SOs>
    </section>
	  
<!--   4.2 Security Objectives for the Operational Environment -->
    <section title="Security Objectives for the Operational Environment"
      id="SecurityObjectivesTOEorEnvironment">The following security objectives for the operational
      environment assist the OS in correctly providing its security functionality.
      These track with the assumptions about the environment. <SOEs>
        <SOE name="OE.PLATFORM">
          <description>The OS relies on being installed on trusted
            hardware.</description>
        </SOE>
        <SOE name="OE.PROPER_USER">
          <description> The user of the OS is not willfully negligent or hostile,
            and uses the software within compliance of the applied enterprise security policy.
            Standard user accounts are provisioned in accordance with the least privilege model.
            Users requiring higher levels of access should have a separate account dedicated for
            that use. </description>
        </SOE>
        <SOE name="OE.PROPER_ADMIN">
          <description> The administrator of the OS is not careless, willfully
            negligent or hostile, and administers the OS within compliance of the applied enterprise
            security policy. </description>
        </SOE>
      </SOEs></section>
	  
<!--   4.3 Security Objectives Rationale -->
    <section title="Security Objectives Rationale" id="SOR">
      <!-- This section is populated by boilerplates.xsl in transforms. -->
      </section>
  </section>

<!-- 5.0 Security Requirements -->
  <section title="Security Requirements" id="req">
	  
<!--   5.1 Security Functional Requirements -->
    <section title="Security Functional Requirements" id="SFRs">

	<section id="fau" title="Security Audit (FAU)">
		
	<!-- FAU_GEN.1 Audit Data Generation-->
		<f-component id="sfr-fau-gen-1" cc-id="fau_gen.1" name="Audit Data Generation" status="sel-based">
			<depends on-sel="sel-audit-integrity"/>
			<depends on-sel="sel-audit-hw-integrity"/>
			<depends on-sel="sel-audit-update"/>
			<depends on-sel="sel-tud2-audit"/>
			<depends on-sel="sel-tud3-audit"/>
			<depends on-use="uc-server-base"/>
			<depends on-use="uc-server-enhanced"/>
			<depends on-use="uc-csfc-eud"/>
			<depends on-use="uc-clients-desktop"/>
			<f-element id="fau-gen-1e1">
				<title>The TSF shall be able to generate an audit record of the following auditable events:<h:br/>
					<h:ol type="1">
						<h:li>Start-up and shutdown of the audit functions</h:li>
						<h:li>All auditable events for the [not selected] level of audit</h:li>
						<h:li>All administrative actions</h:li>
						<h:li>Start-up, shutdown, and reboot of the platform</h:li>
						<h:li>Specifically defined auditable events in Table 1</h:li>
						<h:li>[selection: Audit records reaching [assignment: integer value less than 100] percentage of audit capacity, [assignment: other auditable events derived from this profile]]</h:li>
						<h:li>[selection: Specifically defined auditable event in Table 2, no additional auditable events]</h:li>
					</h:ol>
				</title>
				<note role="application">
					The ST Author should include this SFR in the ST if the TOE generates audit events for integrity verification or boot failures
					as indicated by the appropriate selections in FPT_ROT_EXT.1.2 and FPR_ROT_EXT.2.2.
				</note>
				<aactivity>
                            <TSS>
                                The evaluator shall check the TSS and ensure that it lists all of the auditable events 
                                and provides a format for audit records. Each audit record format type shall be covered, along with a 
                                brief description of each field. The evaluator shall check to make sure that every audit event type 
                                mandated by the PP-Configuration is described in the TSS.<h:p/>
                            </TSS>
                            <Guidance>
                                The evaluator shall also make a determination of the administrative actions that are relevant in the 
                                context of this PP-Configuration. The evaluator shall examine the administrative guide and make a determination of which 
                                administrative commands, including subcommands, scripts, and configuration files, are related to the 
                                configuration (including enabling or disabling) of the mechanisms implemented in the TOE 
                                that are necessary to enforce the requirements specified in the PP and PP-Module(s). The evaluator shall document the 
                                methodology or approach taken while determining which actions in the administrative guide are 
                                security-relevant with respect to this PP-Configuration.<h:p/>
                            </Guidance>
                            <Tests>
                                The evaluator shall test the TOE’s ability to correctly generate audit records by 
                                having the TOE generate audit records for the events listed and administrative actions. 
                                For administrative actions, the evaluator shall test that each action determined by the evaluator above to 
                                be security relevant in the context of this PP is auditable. When verifying the test results, the 
                                evaluator shall ensure the audit records generated during testing match the format specified in the 
                                administrative guide, and that the fields in each audit record have the proper entries.<h:p/>
                                Note that the testing here can be accomplished in conjunction with the testing of the security mechanisms 
                                directly.<h:br/>
                            </Tests>   
				</aactivity>
			</f-element>
			<audit-event/>
		</f-component>
    	</section>

	<section id="fcs" title="Cryptographic Support (FCS)">
		
		<f-component cc-id="fcs_ckm.1" iteration="AK" name="Cryptographic Key Generation (Asymmetric Keys)" status="optional">
			<!--			<exportable id="inf-gpcp-fcs-ckm-ak"/>  -->
			<!-- 			<importable inf-id="inf-dsc-fcs-ckm-ak"/>  -->
			<f-element id="fcs-ckm-1e1-ak">
				<title>The TSF shall generate <h:b>asymmetric</h:b> cryptographic keys using the methods defined by 
					the following rows in <xref to="fcs-ckm-1-ak-sels"/>:
					<!-- [selection: identifier from Supported Methods for Asymmetric Key Generation table] --> 
					<selectables>
						<selectable id="sel-fcs-ckm-ak-ak1">AK1</selectable>
						<selectable id="sel-fcs-ckm-ak-ak2">AK2</selectable>
						<selectable id="sel-fcs-ckm-ak-ak3">AK3</selectable>
						<selectable id="sel-fcs-ckm-ak-ak4">AK4</selectable>
						<selectable id="sel-fcs-ckm-ak-ak5">AK5</selectable>
					</selectables>.<h:p/>
					<h:b><ctr ctr-type='Table' id="fcs-ckm-1-ak-sels">: Supported Methods for Asymmetric Key Generation</ctr></h:b><h:br/>	
					<h:table>
						<h:tr class="header"><h:td>Identifier</h:td><h:td>Key Type</h:td><h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-ak-ak1"/>
						<h:td>AK1</h:td>
						<h:td>RSA</h:td>
						<h:td><selectables>
							<selectable id="sel-exp-ak-rsa-2048">2048 bit</selectable>
							<selectable id="sel-exp-ak-rsa-3072">3072-bit</selectable></selectables></h:td>
						<h:td>FIPS PUB 186-4 (Section B.3)</h:td></h:tr>
						
						<h:tr><depends on-sel="sel-fcs-ckm-ak-ak2"/>
						<h:td>AK2</h:td>
						<h:td>ECC-N</h:td>
						<h:td><selectables>
							<selectable id="sel-exp-ak-eccn-P256">256 (P-256)</selectable>
							<selectable id="sel-exp-ak-eccn-P384">384 (P-384)</selectable>
							<selectable id="sel-exp-ak-eccn-P521">521 (P-521)</selectable></selectables></h:td>
						<h:td>FIPS PUB 186-4 (Section B.4 &amp; D.1.2)</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-ak-ak3"/>
						<h:td>AK3</h:td>
						<h:td>ECC-B</h:td>
						<h:td><selectables>
							<selectable id="sel-exp-ak-ecc-bpP256r1">256 (brainpoolP256r1)</selectable>
							<selectable id="sel-exp-ak-ecc-bpP384r1">384 (brainpoolP384r1)</selectable>
							<selectable id="sel-exp-ak-ecc-bpP512r1">512 (brainpoolP512r1)</selectable></selectables></h:td>
						<h:td>RFC5639 (Section 3) (Brainpool Curves)</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-ak-ak4"/>
						<h:td>AK4</h:td>
						<h:td>DSA</h:td>
						<h:td>DSA Bit lengths of p and q respectively (L, N) 
							<selectables>
								<selectable id="sel-exp-ak-dsa-1024-160">(1024, 160)</selectable>
								<selectable id="sel-exp-ak-dsa-2048-224">(2048, 224)</selectable>
								<selectable id="sel-exp-ak-dsa-2048-256">(2048, 256)</selectable>
								<selectable id="sel-exp-ak-dsa-3027-256">(3027, 256)</selectable></selectables></h:td>
						<h:td>FIPS 186-4 Appendix B.1</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-ak-ak5"/>
						<h:td>AK5</h:td>
						<h:td>Curve25519</h:td>
						<h:td>256 bits</h:td>
						<h:td>RFC 7748</h:td></h:tr>
					</h:table>
				</title>
				<note role="application">					
					This requirement is included for the purposes of encryption and decryption operations only. To
					support ITE protected communications requirement for the transfer of encrypted data, this 
					requirement mandates implementation compliance to FIPS 186-4 only. Implementations
					according to FIPS 186-2 or FIPS 186-3 will not be accepted.<h:p/>
					This requirement must be claimed by the TOE if at least one of FCS_CKM.1 or FCS_CKM.1/KEK
					chooses a selection related to generation of asymmetric keys.
				</note>
				<aactivity>
					<TSS>
						The evaluator shall examine the TSS to verify that it describes how the TOE
						generates an asymmetric key based on the methods selected from cPP Table 13:
						“Supported Methods for Asymmetric Key Generation”. The evaluator shall
						examine the TSS to verify that it describes how the TOE invokes the methods
						selected in the ST from the same table. The evaluator shall examine the TSS to
						verify that it identifies the usage for each row identifier (key type, key size, and list
						of standards) selected in the ST.
					</TSS>
					<Guidance>
						The evaluator shall verify that the AGD guidance instructs the administrator how
						to configure the TOE to use the selected key types for all uses identified in the ST.
					</Guidance>
					<KMD>
						If the TOE uses the generated key in a key chain/hierarchy then the evaluator shall
						confirm that the KMD describes:<h:ul>
						<h:li>If <h:u>AK1</h:u> is selected, then the KMD describes which methods for generating p
							and q are used</h:li>
						<h:li>How the key is used as part of the key chain/hierarchy. </h:li></h:ul>
					</KMD>
					<Tests>
						The following tests require the developer to provide access to a test platform that
						provides the evaluator with tools that are typically not found on factory products.<h:p/>
						<h:b>AK1: RSA Key Generation</h:b><h:br/>
						The below tests are derived from The 186-4 RSA Validation System (RSA2VS),
						Updated 8 July 2014, Section 6.2, from the National Institute of Standards and
						Technology.<h:p/>
						The evaluator shall verify the implementation of RSA Key Generation by the TOE
						using the Key Generation test. This test verifies the ability of the TSF to correctly
						produce values for the key components including the public verification exponent
						e, the private prime factors p and q, the public modulus n and the calculation of the
						private signature exponent d.<h:p/>
						FIPS 186-4 Key Pair generation specifies 5 methods for generating the primes p
						and q.<h:p/>
						These are:<h:ol type="1">
							<h:li>Random Primes:<h:ul>
								<h:li>Provable primes</h:li>
								<h:li>Probable primes</h:li></h:ul></h:li>
							<h:li>Primes with Conditions:<h:ul>
								<h:li>Primes p1, p2, q1, q2, p and q shall all be provable primes.</h:li>
								<h:li>Primes p1, p2, q1, and q2 shall be provable primes and p and q shall be
									probable primes</h:li>
								<h:li>Primes p1, p2, q1, q2, p and q shall all be probable primes.</h:li></h:ul></h:li>
						</h:ol>	
						To test the key generation method for the Random Provable primes method and for
						all the Primes with Conditions methods, the evaluator must seed the TSF key
						generation routine with sufficient data to deterministically generate the RSA key
						pair.<h:p/>
						For each key length supported, the evaluator shall have the TSF generate 25 key
						pairs. The evaluator shall verify the correctness of the TSF’s implementation by
						comparing values generated by the TSF with those generated by a known good
						implementation using the same input parameters.<h:p/>
						If the TOE generates Random Probable Primes then if possible, the Random
						Probable primes method should also be verified against a known good
						implementation as described above. If verification against a known good
						implementation is not possible, the evaluator shall have the TSF generate 25 key
						pairs for each supported key length nlen and verify that all of the following are true:<h:ul>
						<h:li>n = p*q</h:li>
						<h:li>p and q are probably prime according to Miller-Rabin tests with error
							probability &lt;2^(-125)</h:li>
						<h:li>2^16 &lt; e &lt; 2^256 and e is an odd integer</h:li>
						<h:li>GCD(p-1,e) = 1</h:li>
						<h:li>GCD(q-1,e) = 1</h:li>
						<h:li>|p-q| > 2^(nlen/2 - 100)</h:li>
						<h:li>p >= squareroot(2)*( 2^(nlen/2 -1) )</h:li>
						<h:li>q >= squareroot(2)*( 2^(nlen/2 -1) )</h:li>
						<h:li>2^(nlen/2) &lt; d &lt; LCM(p-1,q-1)</h:li>
						<h:li>e*d = 1 mod LCM(p-1,q-1)</h:li></h:ul><h:p/>
						<h:b>AK2 &amp; AK3: ECC Key Generation with NIST and Brainpool Curves</h:b><h:p/>
						These tests are derived from The FIPS 186-4 Elliptic Curve Digital Signature
						Algorithm Validation System (ECDSA2VS), Updated 18 Mar 2014, Section 6.<h:p/>
						<h:b>ECC Key Generation Test</h:b><h:p/>
						For each selected curve, and for each key pair generation method as described in
						FIPS 186-4, section B.4, the evaluator shall require the implementation under test
						to generate 10 private/public key pairs (d, Q). The private key, d, shall be generated 
						using a random bit generator as specified in FCS_RBG_EXT.1. The private key, d,
						is used to compute the public key, Q’. The evaluator shall confirm that 0&lt;d&lt;n
						(where n is the order of the group), and the computed value Q’ is then compared to
						the generated public/private key pairs’ public key, Q, to confirm that Q is equal to
						Q’.<h:p/>
						<h:b>Public Key Validation (PKV) Test</h:b><h:p/>
						For each supported curve, the evaluator shall generate 12 private/public key pairs
						using the key generation function of a known good implementation and modify six
						of the public key values so that they are incorrect, leaving six values unchanged
						(i.e., correct). To determine correctness, the evaluator shall submit the 12 key pairs
						to the public key validation (PKV) function of the TOE and shall confirm that the
						results correspond as expected to the modified and unmodified values.<h:p/>
						<h:b>AK4: DSA Key Generation using Finite-Field Cryptography (FFC)</h:b><h:p/>
						The evaluator shall verify the implementation of the Parameters Generation and the
						Key Generation for FFC by the TOE using the Parameter Generation and Key
						Generation test. This test verifies the ability of the TSF to correctly produce values
						for the field prime p, the cryptographic prime q (dividing p-1), the cryptographic
						group generator g, and the calculation of the private key x and public key y.<h:p/>
						The Parameter generation specifies 2 ways (or methods) to generate the
						cryptographic prime q and the field prime p:<h:ul>
							<h:li>Primes q and p shall both be provable primes</h:li>
							<h:li>Primes q and field prime p shall both be probable primes</h:li></h:ul>
						and two ways to generate the cryptographic group generator g:<h:ul>
							<h:li>Generator g constructed through a verifiable process</h:li>
							<h:li>Generator g constructed through an unverifiable process.</h:li></h:ul>
						The Key generation specifies 2 ways to generate the private key x:<h:ul>
							<h:li>len(q) bit output of RBG where 1 &#8804; x &#8804; q-1</h:li>
							<h:li>len(q) + 64 bit output of RBG, followed by a mod q-1 operation and a +1
								operation, where 1&#8804; x&#8804;q-1. </h:li></h:ul>
						The security strength of the RBG must be at least that of the security offered by the
						FFC parameter set.<h:p/>
						To test the cryptographic and field prime generation method for the provable primes
						method or the group generator g for a verifiable process, the evaluator must seed
						the TSF parameter generation routine with sufficient data to deterministically
						generate the parameter set.<h:p/>
						For each key length supported, the evaluator shall have the TSF generate 25
						parameter sets and key pairs. The evaluator shall verify the correctness of the TSF’s
						implementation by comparing values generated by the TSF with those generated
						from a known good implementation. Verification must also confirm<h:ul>
						<h:li>g != 0,1</h:li>
						<h:li>q divides p-1</h:li>
						<h:li>g^q mod p = 1</h:li>
						<h:li>g^x mod p = y</h:li></h:ul>
						for each FFC parameter set and key pair.<h:p/>
						<h:b>AK5: Curve25519 Key Generation</h:b><h:p/>
						The evaluator shall require the implementation under test (IUT) to generate 10
						private/public key pairs. The private key shall be generated as specified in RFC
						7748 using an approved random bit generator (RBG) and shall be written in littleendian order (least significant byte first. To determine correctness, the evaluator
						shall submit the generated key pairs to the public key verification (PKV) function
						of a known good implementation.<h:p/>
						Note: Assuming the PKV function of the good implementation will (using little-endian order):
						<h:ul>
							<h:li>Confirm the private and public keys are 32-byte values</h:li>
							<h:li>Confirm the three least significant bits of the first byte of the private key are
								zero</h:li>
							<h:li>Confirm the most significant bit of the last byte is zero</h:li>
							<h:li>Confirm the second most significant bit of the last byte is one</h:li>
							<h:li>Calculate the expected public key from the private key and confirm it matches
								the supplied public key</h:li>
						</h:ul>
						The evaluator shall generate 10 private/public key pairs using the key generation
						function of a known good implementation and modify 5 of the public key values so
						that they are incorrect, leaving five values unchanged (i.e. correct). The evaluator
						shall obtain in response a set of 10 PASS/FAIL values.
					</Tests>				
				</aactivity>
			</f-element>
		</f-component>
	  
		<f-component cc-id="fcs_ckm.1" iteration="SK" name="Cryptographic Key Generation (Symmetric Encryption Key)" status="optional">
<!--			<exportable id="inf-gpcp-fcs-ckm-sk"/> -->
<!--			<importable inf-id="inf-dsc-fcs-ckm-sk"/> -->
			<f-element id="fcs-ckm-1e1-sk">
				<title>The TSF shall generate <h:b>symmetric</h:b> cryptographic keys using the methods defined by 
					the following rows in <xref to="fcs-ckm-1-sk-sels"/>:
				<!-- [selection: identifier from Supported Methods for Symmetric Encryption Key Generation table] -->
					<selectables>
						<selectable id="sel-fcs-ckm-sk-rsk">RSK</selectable>
						<selectable id="sel-fcs-ckm-sk-dsk">DSK</selectable>
						<selectable id="sel-fcs-ckm-sk-pbk">PBK</selectable>
					</selectables>.<h:p/>
					<h:b><ctr ctr-type='Table' id="fcs-ckm-1-sk-sels">: Supported Methods for Symmetric Key Generation</ctr></h:b><h:br/>	
					<h:table>
						<h:tr class="header"><h:td>Identifier</h:td><h:td>Key Type</h:td>
							<h:td>Cryptographic Key Generation Algorithm</h:td><h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-sk-rsk"/>
							<h:td>RSK</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>submask</selectable>
							<selectable>authorization value</selectable></selectables></h:td>
						<h:td>Direct Generation from a Random Bit Generator as specified in FCS_RBG_EXT.1</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							<selectable>512</selectable></selectables> bits</h:td>
						<h:td>NIST SP 800-133 (Section 7.1) with ISO 18031 as an approved RBG in addition
							to those in NIST SP 800-133 (Section 5).</h:td></h:tr>
							
						<h:tr><depends on-sel="sel-fcs-ckm-sk-dsk"/>
							<h:td>DSK <selectables> 
							<selectable>identifier from Table 16: Key Derivation Functions</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>Key Type from Table 16: Key Derivation Functions</selectable></selectables></h:td>
						<h:td>Derived from a Key Derivation Function as specified in FCS_CKM_EXT.5 
							<selectables>
								<selectable>Key Derivation Algorithm from Table 16: Key Derivation Function</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>key sizes from Table 16: Key Derivation Functions</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>List of Standards from Table 16: Key Derivation Functions</selectable></selectables></h:td></h:tr>
						
						<h:tr><depends on-sel="sel-fcs-ckm-sk-pbk"/>
							<h:td>PBK</h:td>
						<h:td><selectables>
							<selectable>submask</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable></selectables></h:td>
						<h:td>Derived from a Password Based Key Derivation Function as specified in FCS_COP.1/PBKDF</h:td>
						<h:td><selectables>
							<selectable>key sizes as specified in FCS_COP.1/PBKDF</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>standards as specified in FCS_COP.1/PBKDF</selectable></selectables></h:td></h:tr>
					</h:table>
				</title>
				<note role="application">
					The selection of key size 512 bits is for the case of XTS-AES using AES-256. In the case of XTSAES
					for both AES-128 and AES-256, the developer is expected to ensure that the full key is
					generated using direct generation from the RBG as in NIST SP 800-133 section.<h:p/>
					The ST author selects at least one algorithm from the RSK row if the ST supports creating keys
					directly from the output of the RBG without further conditioning, at least one algorithm from the
					DSK row should be selected if the ST supports key derivation functions which are usually seeded
					from RBG and then further conditioned to the appropriate key size, and at least one algorithm
					from the PBK row should be selected if the ST supports keys derived from passwords.<h:p/>
					If DSK is selected, the selection-based SFR FCS_CKM_EXT.5 must be claimed by the TOE.<h:p/>
					If PBK is selected, the selection-based SFR FCS_COP.1/PBKDF must be claimed by the TOE.<h:p/>
					This requirement must be claimed by the TOE if at least one of FCS_CKM.1 or FCS_CKM.1/KEK
					chooses a selection related to generation of symmetric keys.<h:p/>
				</note>
				<aactivity>
					<TSS>
						The evaluator shall examine the TSS to verify that it describes how the TOE obtains
						an SK through direct generation as specified in FCS_RBG_EXT.1,
						FCS_COP.1/KDF, or FCS_COP.1/PBKDF. The evaluator shall review the TSS to
						verify that it describes how the ST invokes the functionality described by
						FCS_RBG_EXT.1 and FCS_COP.1/PBKDF where applicable.<h:p/>
						[conditional] If the symmetric key is generated by an RBG, the evaluator shall
						review the TSS to determine that it describes how the functionality described by
						FCS_RBG_EXT.1 is invoked. The evaluator uses the description of the RBG
						functionality in FCS_RBG_EXT.1 or documentation available for the operational
						environment to determine that the key size being requested is greater than or equal
						to the key size and mode to be used for the encryption/decryption of the data.
					</TSS>
					<Guidance>
						The evaluator shall verify that the AGD guidance instructs the administrator how
						to configure the TOE to use the selected key types for all uses identified in the ST.
					</Guidance>
					<KMD>
						The evaluator shall confirm that the KMD describes, as applicable:<h:ul>
						<h:li>The RBG interface and how the ST uses it in symmetric key generation</h:li>
						<h:li>The KDF interface and how the ST uses it in symmetric key generation</h:li>
						<h:li>The PBKDF interface and how the ST uses it in symmetric key generation</h:li>
						<h:li>If the TOE uses the generated key in a key chain/hierarchy then the KMD
							shall describe how the ST uses the key as part of the key chain/hierarchy.</h:li></h:ul>		
					</KMD>
					<Tests>
						For each selected key generation method, the evaluator shall configure the selected
						generation capability. The evaluator shall use the description of the RBG interface
						to verify that the TOE requests and receives an amount of RBG output greater than
						or equal to the requested key size. The evaluator shall perform the tests as described
						for FCS_COP.1/KDF and FCS_COP.1/PBKDF.
					</Tests>				
				</aactivity>
			</f-element>
		</f-component>
		
	<!-- FCS_CKM.1/KEK Cryptographic Key Generation (Key Encryption Key)  -->
	<f-component cc-id="fcs_ckm.1" iteration="KEK" name="Cryptographic Key Generation (Key Encryption Key)" status="optional">
<!--			<exportable id="inf-gpcp-fcs-ckm-kek"/>  -->
<!--			<importable inf-id="inf-dsc-fcs-ckm-kek"/>  -->
		<f-element id="fcs-ckm-1e1-kek">
			<title>The TSF shall generate key encryption keys in accordance with a specified
				cryptographic key generation algorithm corresponding to 
				<selectables linebreak="yes">
					<selectable>Asymmetric KEKs generated in accordance with FCS_CKM.1/AK identifier AK1</selectable>
					<selectable>Symmetric KEKs generated in accordance with FCS_CKM.1/SK</selectable>
					<selectable>Derived KEKs generated in accordance with FCS_CKM_EXT.5</selectable>
				</selectables>
				and specified cryptographic key sizes <assignable>cryptographic key sizes</assignable> that meet the
				following: <assignable>list of standards</assignable>.
			</title>
			<note role="application">
				KEKs protect KEKs and Symmetric Keys (SKs). DSCs should use key strengths commensurate
				with protecting the chosen symmetric encryption key strengths.<h:p/>
				If Asymmetric KEKs generated in accordance with FCS_CKM.1/AK is selected, the selection-based
				SFR FCS_CKM.1/AK must be claimed by the TOE.<h:p/>
				If Symmetric KEKs generated in accordance with FCS_CKM.1/SK is selected, the selection-based
				SFR FCS_CKM.1/SK must be claimed by the TOE.<h:p/>
				If Derived KEKs generated in accordance with FCS_CKM_EXT.5 is selected, the selection-based
				SFR FCS_CKM_EXT.5 must be claimed by the TOE.<h:p/>
			</note>
			<aactivity>
				<TSS>
					The evaluator shall examine the key hierarchy section of the TSS to ensure that the
					formation of all KEKs is described and that the key sizes match that described by
					the ST author. The evaluator shall examine the key hierarchy section of the TSS to
					ensure that each KEK encrypts keys of equal or lesser security strength using one
					of the selected methods.<h:p/>
					[conditional] If the KEK is generated according to an asymmetric key scheme, the
					evaluator shall review the TSS to determine that it describes how the functionality
					described by FCS_CKM.1/AK is invoked. The evaluator uses the description of the
					key generation functionality in FCS_CKM.1/AK or documentation available for the
					operational environment to determine that the key strength being requested is
					greater than or equal to 112 bits.<h:p/>
					[conditional] If the KEK is generated according to a symmetric key scheme, the
					evaluator shall review the TSS to determine that it describes how the functionality
					described by FCS_CKM.1/SK is invoked. The evaluator uses the description of the
					RBG functionality in FCS_RBG_EXT.1, or the key derivation functionality in
					either FCS_CKM_EXT.5 or FCS_COP.1/PBKDF, depending on the key
					generation method claimed, to determine that the key size being requested is greater
					than or equal to the key size and mode to be used for the encryption/decryption of
					the data.<h:p/>
					[conditional] If the KEK is formed from derivation, the evaluator shall verify that
					the TSS describes the method of derivation and that this method is consistent with
					FCS_CKM_EXT.5.<h:p/>
				</TSS>
				<Guidance>
					There are no guidance evaluation activities for this component.
				</Guidance>
				<KMD>
					The evaluator shall iterate through each of the methods selected by the ST and
					confirm that the KMD describes the applicable selected methods.
				</KMD>
				<Tests>
					The evaluator shall iterate through each of the methods selected by the ST and
					perform all applicable tests from the selected methods.
				</Tests>
			</aactivity>
		</f-element>
		<audit-event/>		
	</f-component>

	<f-component cc-id="fcs_ckm.2" name="Cryptographic Key Establishment" status="optional">
<!--			<exportable id="inf-gpcp-fcs-ckm-est"/>   -->
<!--			<importable inf-id="inf-dsc-fcs-ckm-est"/>   -->
			<f-element id="fcs-ckm-2e1">
				<title>The TSF shall establish cryptographic keys in accordance with a specified
					cryptographic key establishment method: 
					<selectables linebreak="yes">
						<selectable>RSA-based key establishment schemes that meet the following: NIST Special
							Publication 800-56B Revision 2, “Recommendation for Pair-Wise Key Establishment
							Schemes Using Integer Factorization Cryptography”</selectable>
						<selectable>RSA-based key establishment schemes that meet the following: RSAES-PKCS1-v1_5
							as specified in Section 7.2 of RFC 8017, “Public-Key Cryptography Standards
							(PKCS) #1: RSA Cryptography Specifications Version 2.2”</selectable>
						<selectable>Elliptic curve-based key establishment schemes that meet the following: 
							<selectables linebreak="yes">
								<selectable>NIST Special Publication 800-56A Revision 3, “Recommendation for Pair-Wise
									Key Establishment Schemes Using Discrete Logarithm Cryptography”</selectable>
								<selectable>RFC 7748, “Elliptic Curves for Security”</selectable>
							</selectables></selectable>
						<selectable>Finite field-based key establishment schemes that meet the following: NIST Special
							Publication 800-56A Revision 3, “Recommendation for Pair-Wise Key Establishment
							Schemes Using Discrete Logarithm Cryptography”</selectable>
						<selectable>Elliptic Curve Integrated Encryption Scheme (ECIES) that meets the following:
							<selectables linebreak="yes">
								<selectable>ANSI X9.63 - Public Key Cryptography for the Financial Services Industry
									Key Agreement and Key Transport Using Elliptic Curve Cryptography</selectable>
								<selectable>IEEE 1363a - Standard Specification for Public-Key Cryptography -
									Amendment 1: Additional Techniques</selectable>
								<selectable>ISO/IEC 18033-2 - Information Technology - Security Techniques -
									Encryption Algorithms - Part 2: Asymmetric Ciphers</selectable>
								<selectable>SECG SEC1 - Standards for Efficient Cryptography Group Elliptic Curve
									Cryptography, section 5.1 Elliptic Curve Integrated Encryption Scheme</selectable>
							</selectables></selectable>
					</selectables> <h:s>that meets the following: [<h:i>assignment: list of standards</h:i>]</h:s>.
				</title>
				<note role="application">
					This is a refinement of the SFR FCS_CKM.2 to deal with key establishment rather than key
					distribution.<h:p/>
					The ST author selects all key establishment schemes used for the selected cryptographic protocols.<h:p/>
					The RSA-based key establishment schemes are described in Section 8 of NIST SP 800-56B Revision
					2 [NIST-RSA]; however, Section 8 relies on implementation of other sections in SP 800-56B Revision 2.<h:p/>
					The elliptic curves used for the key establishment scheme correlate with the curves specified in
					FCS_CKM.1/AK.<h:p/>
					The selections in this SFR must be consistent with those for FCS_COP.1/KAT.<h:p/>
				</note>
				<aactivity>
					<TSS>
						The evaluator shall examine the TSS to ensure that ST supports at least one key
						establishment scheme. The evaluator also ensures that for each key establishment
						scheme selected by the ST in FCS_CKM.2.1 it also supports one or more
						corresponding methods selected in FCS_COP.1/KAT. If the ST selects RSA in
						FCS_CKM.2.1, then the TOE must support one or more of “KAS1,” or “KAS2,”
						“KTS-OAEP,” from FCS_COP.1/KAT. If the ST selects elliptic curve-based, then
						the TOE must support one or more of “ECDH-NIST” or “ECDH-BPC” from
						FCS_COP.1/KAT. If the ST selects Diffie-Hellman-based key establishment, then
						the TOE must support “DH” from FCS_COP.1/KAT.<h:p/>
					</TSS>
					<Guidance>
						The evaluator shall verify that the guidance instructs the administrator how to
						configure the TOE to use the selected key establishment scheme.
					</Guidance>
					<KMD>
						There are no KMD evaluation activities for this component.
					</KMD>
					<Tests>
						Testing for this SFR is performed under the corresponding functions in
						FCS_COP.1/KAT.
					</Tests>
				</aactivity>
			</f-element>
		</f-component>

	<f-component cc-id="fcs_ckm.4" name="Cryptographic Key Destruction" status="optional">
		<f-element id="fcs-ckm-4e1">
			<title>The TSF shall destroy cryptographic keys and keying material in accordance
				with a specified cryptographic key destruction method 
					<h:ul><h:li>For volatile memory, the destruction shall be executed by a 
						<selectables linebreak="yes">
							<selectable>single overwrite consisting of 
								<selectables>
									<selectable>a pseudo-random pattern using the TSF’s RBG</selectable>
									<selectable>zeroes</selectable>
									<selectable>ones</selectable>
									<selectable>a new value of a key</selectable>
									<selectable><assignable>some value that does not contain any CSP</assignable></selectable>
								</selectables></selectable>
							<selectable>removal of power to the memory</selectable>
							<selectable>removal of all references to the key directly followed by a request for garbage
								collection</selectable>
						</selectables></h:li>
					<h:li>For non-volatile memory 
						<selectables linebreak="yes">
							<selectable>that employs a wear-leveling algorithm, the destruction shall be executed by a
								<selectables>
									<selectable>single overwrite consisting of 
										<selectables>
											<selectable>zeroes</selectable>
											<selectable>ones</selectable>
											<selectable>pseudo-random pattern</selectable>
											<selectable>a new value of a key of the same size</selectable>
											<selectable><assignable>some value that does not contain any CSP</assignable></selectable>
										</selectables></selectable>
									<selectable>block erase</selectable>
								</selectables></selectable>
							<selectable>that does not employ a wear-leveling algorithm, the destruction shall be executed by a
								<selectables linebreak="yes">
									<selectable>
										<selectables>
											<selectable>single</selectable>
											<selectable><assignable>ST author-defined multi-pass</assignable></selectable>
										</selectables> overwrite consisting of 
										<selectables>
											<selectable>zeros</selectable>
											<selectable>ones</selectable>
											<selectable>pseudo-random pattern</selectable>
											<selectable>a new value of a key of the same size</selectable>
											<selectable><assignable>some value that does not contain any CSP</assignable></selectable>
										</selectables> followed by a read-verify. If the read-verification of the overwritten data fails,
										the process shall be repeated again up to <assignable>number of times to attempt overwrite</assignable> times, 
										whereupon an error is returned.</selectable>
									<selectable>block erase</selectable>
								</selectables></selectable>
						</selectables></h:li></h:ul>
				that meets the following: [<h:i>no standard</h:i>].
			</title>
			<note role="application">
				The platform must implement mechanisms to destroy cryptographic keys and key material contained in
				persistent storage when no longer needed. The term “cryptographic keys” in this SFR includes
				the authorization data that is the entry point to a key chain and all other cryptographic keys and
				keying material (whether in plaintext or encrypted form). This SFR does not apply to the public
				component of asymmetric key pairs, or to keys that are permitted to remain stored such as device
				identification keys.<h:p/>
				In the case of volatile memory, the selection “removal of all references to the key directly followed
				by a request for garbage collection” is used in a situation where the TSF cannot address the
				specific physical memory locations holding the data to be erased and therefore relies on
				addressing logical addresses (which frees the relevant physical addresses holding the old data)
				and then requesting the platform to ensure that the data in the physical addresses is no longer
				available for reading (i.e. the “garbage collection” referred to in the SFR text).
				Guidance documentation for the TOE requires users not to allow the TOE to leave the user’s
				control while a session is active (and hence while the DEK is likely to be in plaintext in volatile
				memory).<h:p/>
				The selection for destruction of data in non-volatile memory includes block erase as an option,
				and this option applies only to flash memory. A block erase does not require a read verify, since 
				collaborative Protection Profile for Dedicated Security Components
				the mappings of logical addresses to the erased memory locations are erased as well as the data
				itself.<h:p/>
				Where different destruction methods are used for different data or different destruction situations
				then the different methods and the data/situations they apply to (e.g. different points in time, or
				power-loss situations) are described in the TSS (and the ST may use separate iterations of the SFR
				to aid clarity). The TSS includes a table describing all relevant keys and keying material (including
				authorization data) used in the implementation of the SFRs, stating the source of the data, all
				memory types in which the data is stored (covering storage both during and outside of a session,
				and both plaintext and non-plaintext forms of the data), and the applicable destruction method
				and time of destruction in each case.<h:p/>
				Some selections allow assignment of “some value that does not contain any CSP.” This means
				that the TOE uses some specified data not drawn from an RBG meeting FCS_RBG_EXT
				requirements, and not being any of the particular values listed as other selection options. The point
				of the phrase “does not contain any sensitive data” is to ensure that the overwritten data is
				carefully selected, and not taken from a general pool that might contain current or residual data
				(e.g. SDOs or intermediate key chain values) that itself requires confidentiality protection.<h:p/>
			</note>
		<aactivity>
				<TSS>
					The evaluator shall examine the TSS to ensure it lists all relevant keys and keying
					material (describing the source of the data, all memory types in which the data is
					stored (covering storage both during and outside of a session, and both plaintext and
					non-plaintext forms of the data)), all relevant destruction situations (including the
					point in time at which the destruction occurs; e.g. factory reset or device wipe
					function, change of authorization data, change of DEK, completion of use of an
					intermediate key) and the destruction method used in each case. The evaluator shall
					confirm that the description of the data and storage locations is consistent with the
					functions carried out by the TOE (e.g. that all keys in the key chain are accounted
					for). (Where keys are stored encrypted or wrapped under another key then this may need to
					be explained in order to allow the evaluator to confirm the consistency of the description 
					of keys with the TOE functions). <h:p/>
					The evaluator shall check that the TSS identifies any configurations or
					circumstances that may not conform to the key destruction requirement (see further
					discussion in the AGD section below). Note that reference may be made to the AGD
					for description of the detail of such cases where destruction may be prevented or
					delayed.<h:p/>
					Where the ST specifies the use of “a value that does not contain any sensitive data”
					to overwrite keys, the evaluator shall examine the TSS to ensure that it describes
					how that pattern is obtained and used, and that this justifies the claim that the pattern
					does not contain any sensitive data. <h:p/>
				</TSS>
				<Guidance>
					The evaluator shall check that the guidance documentation for the TOE requires
					users to ensure that the TOE remains under the user’s control while a session is
					active.<h:p/>
					A TOE may be subject to situations that could prevent or delay data destruction in
					some cases. The evaluator shall check that the guidance documentation identifies
					configurations or circumstances that may not strictly conform to the key destruction
					requirement, and that this description is consistent with the relevant parts of the TSS
					(and KMD). The evaluator shall check that the guidance documentation provides
					guidance on situations where key destruction may be delayed at the physical layer,
					identifying any additional mitigation actions for the user (e.g. there might be some
					operation the user can invoke, or the user might be advised to retain control of the
					device for some particular time to maximise the probability that garbage collection
					will have occurred).<h:p/>
					For example, when the TOE does not have full access to the physical memory, it is
					possible that the storage may implement wear-levelling and garbage collection. This
					may result in additional copies of the data that are logically inaccessible but persist
					physically. Where available, the TOE might then describe use of the TRIM
					command	and garbage collection to destroy these persistent copies upon their
					deletion (this would be explained in TSS and guidance documentation). <h:p/>
					Where TRIM is used then the TSS or guidance documentation is also expected to describe how
					the keys are stored such that they are not inaccessible to TRIM, (e.g. they would need not
					to be contained in a file less than 982 bytes which would be completely contained in the
					master file table.<h:p/>
				</Guidance>
				<KMD>
						The evaluator shall examine the KMD to verify that it identifies and describes the
						interfaces that are used to service commands to read/write memory. The evaluator
						shall examine the interface description for each different media type to ensure that
						the interface supports the selections made by the ST author.<h:p/>
						45 The evaluator shall examine the KMD to ensure that all keys and keying material
						identified in the TSS and KMD have been accounted for.<h:p/>
						46 Note that where selections include ‘destruction of reference to the key directly
						followed by a request for garbage collection’ (for volatile memory) then the
						evaluator shall examine the KMD to ensure that it explains the nature of the
						destruction of the reference, the request for garbage collection, and of the garbage
						collection process itself.<h:p/>
				</KMD>
				<Tests>
					The following tests require the developer to provide access to a test platform that
					provides the evaluator with tools that are typically not found on factory products.<h:p/>
					The evaluator shall perform the following tests:
					<testlist>
						<test>
							Applied to each key or keying material held as plaintext in volatile
							memory and subject to destruction by overwrite by the TOE (whether or not the
							plaintext value is subsequently encrypted for storage in volatile or non-volatile
							memory).<h:p/>
							The evaluator shall:<h:ol type="1">
							<h:li>Record the value of the key or keying material.</h:li>
							<h:li>Cause the TOE to dump the SDO/SDE memory of the TOE into a binary file.</h:li>
							<h:li>Search the content of the binary file created in Step #2 to locate all
								instances of the known key value from Step #1.<h:p/>
								Note that the primary purpose of Step #3 is to demonstrate that appropriate
								search commands are being used for Steps #8 and #9.</h:li>
							<h:li>Cause the TOE to perform normal cryptographic processing with the key
								from Step #1.</h:li>
							<h:li>Cause the TOE to destroy the key.</h:li>
							<h:li>Cause the TOE to stop execution but not exit.</h:li>
							<h:li>Cause the TOE to dump the SDO/SDE memory of the TOE into a binary
								file.</h:li>
							<h:li>Search the content of the binary file created in Step #7 for instances of the
								known key value from Step #1.</h:li>
							<h:li>Break the key value from Step #1 into an evaluator-chosen set of
								fragments and perform a search using each fragment. (Note that the
								evaluator shall first confirm with the developer how the key is normally
								stored, in order to choose fragment sizes that are the same or smaller than
								any fragmentation of the data that may be implemented by the TOE. The
								endianness or byte-order should also be taken into account in the search.)</h:li>
							</h:ol><h:p/>
							Steps #1-8 ensure that the complete key does not exist anywhere in volatile
							memory. If a copy is found, then the test fails.<h:p/>
							Step #9 ensures that partial key fragments do not remain in memory. If the
							evaluator finds a 32-or-greater-consecutive-bit fragment, then fail immediately.
							Otherwise, there is a chance that it is not within the context of a key (e.g., some
							random bits that happen to match). If this is the case the test should be repeated
							with a different key in Step #1. If a fragment is also found in this repeated run
							then the test fails unless the developer provides a reasonable explanation for the
							collision, then the evaluator may give a pass on this test.<h:p/>
						</test>
						<test>
							Applied to each key and keying material held in non-volatile memory and
							subject to destruction by overwrite by the TOE.<h:ol type="1">
							<h:li>Record the value of the key or keying material.</h:li>
							<h:li>Cause the TOE to perform normal cryptographic processing with the key
								from Step #1.</h:li>
							<h:li>Search the non-volatile memory the key was stored in for instances of the
								known key value from Step #1. <h:p/>
								Note that the primary purpose of Step #3 is to demonstrate that appropriate
								search commands are being used for Steps #5 and #6.</h:li>
							<h:li>Cause the TOE to clear the key.</h:li>
							<h:li>Search the non-volatile memory in which the key was stored for instances
								of the known key value from Step #1. If a copy is found, then the test fails.</h:li>
							<h:li>Break the key value from Step #1 into an evaluator-chosen set of
								fragments and perform a search using each fragment. (Note that the
								evaluator shall first confirm with the developer how the key is normally
								stored, in order to choose fragment sizes that are the same or smaller than
								any fragmentation of the data that may be implemented by the TOE. The
								endianness or byte-order should also be taken into account in the search).</h:li>
							</h:ol>
							Step #6 ensures that partial key fragments do not remain in non-volatile memory.
							If the evaluator finds a 32-or-greater-consecutive-bit fragment, then fail
							immediately. Otherwise, there is a chance that it is not within the context of a key
							(e.g., some random bits that happen to match). If this is the case the test should be
							repeated with a different key in Step #1. If a fragment is also found in this
							repeated run then the test fails unless the developer provides a reasonable
							explanation for the collision, then the evaluator may give a pass on this test.
						</test>
						<test>
							Applied to each key and keying material held in non-volatile memory and
							subject to destruction by overwrite by the TOE.<h:ol type="1">
							<h:li>Record memory of the key or keying material.</h:li>
							<h:li>Cause the TOE to perform normal cryptographic processing with the key
								from Step #1.</h:li>
							<h:li>Cause the TOE to clear the key. Record the value to be used for the
								overwrite of the key. </h:li>
							<h:li>Examine the memory from Step #1 to ensure the appropriate pattern
								(recorded in Step #3) is used. </h:li>
							</h:ol>
							The test succeeds if correct pattern is found in the memory location. If the pattern
							is not found, then the test fails.
						</test>
					</testlist>
				</Tests>
		</aactivity>
	</f-element>
	</f-component>

	<f-component cc-id="fcs_ckm_ext.4" name="Cryptographic Key and Key Material Destruction Timing" status="optional">
		<f-element id="fcs-ckm-ext-1e1">
			<title>
				The TSF shall destroy all keys and keying material when no longer needed.
			</title>
			<note role="application">
				The platform will have mechanisms to destroy keys, including intermediate keys and key material, by
				using an approved method, FCS_CKM.4. Examples of keys include intermediate keys, leaf keys,
				encryption keys, signing keys, verification keys, authentication tokens, and submasks. The DSC
				will have mechanisms to destroy keys and key material contained in persistent storage when no
				longer needed. Based on their implementation, vendors will explain when certain keys are no
				longer needed. An example in which key is no longer necessary includes a wrapped key whose
				password has changed. However, there are instances when keys are allowed to remain in memory,
				for example, a device identification key.
			</note>
			<aactivity>
				<TSS>
					The evaluator shall verify the TSS provides a high-level description of what it
					means for keys and key material to be no longer needed and when this data should
					be expected to be destroyed.
				</TSS>
				<Guidance>
					There are no guidance evaluation activities for this component.
				</Guidance>
				<KMD>
					The evaluator shall verify that the KMD includes a description of the areas where
					keys and key material reside and when this data is no longer needed.<h:p/>
					The evaluator shall verify that the KMD includes a key lifecycle that includes a
					description where key materials reside, how the key materials are used, how it is 
					determined that keys and key material are no longer needed, and how the data is
					destroyed once it is no longer needed. The evaluator shall also verify that all key
					destruction operations are performed in a manner specified by FCS_CKM.4.<h:p/>
				</KMD>
				<Tests>
					There are no test evaluation activities for this component
				</Tests>
			</aactivity>
		</f-element>
	</f-component>

		<f-component cc-id="fcs_ckm_ext.5" name="Cryptographic Key Derivation" status="optional">
		<!-- <exportable id="inf-gpcp-fcs-ckm-derv"/> -->
		<!-- <exportable inf-id="inf-dsc-fcs-ckm-derv"/> -->
			<f-element id="fcs-ckm-ext-5e1">
				<title>The TSF shall generate cryptographic keys using the Key Derivation Functions defined by the following 
					rows of <xref to="fcs-ckm-keydrv-sels"/>:
					<selectables>
						<selectable id="sel-fcs-ckm-keydrv-1">KeyDrv1</selectable>
						<selectable id="sel-fcs-ckm-keydrv-2">KeyDrv2</selectable>
						<selectable id="sel-fcs-ckm-keydrv-3">KeyDrv3</selectable>
						<selectable id="sel-fcs-ckm-keydrv-4">KeyDrv4</selectable>
						<selectable id="sel-fcs-ckm-keydrv-5">KeyDrv5</selectable>
						<selectable id="sel-fcs-ckm-keydrv-6">KeyDrv6</selectable>
						<selectable id="sel-fcs-ckm-keydrv-7">KeyDrv7</selectable>
						<selectable id="sel-fcs-ckm-keydrv-8">KeyDrv8</selectable>
					</selectables>.<h:p/>
					<h:b><ctr ctr-type='Table' id="fcs-ckm-keydrv-sels">: Key Derivation Functions</ctr></h:b><h:br/>	
					<h:table>
						<h:tr class="header"><h:td>Identifier</h:td><h:td>Key Type</h:td><h:td>Input Parameters</h:td>
						<h:td>Key Derivation Algorithm</h:td><h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-1"/>
							<h:td>KeyDrv1</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Direct Generation from a Random Bit Generator as specified in FCS_RBG_EXT.1 </h:td>
						<h:td>KDF in Counter Mode using <selectables>
								<selectable>CMAC-AES-128</selectable>
								<selectable>CMAC-AES-192</selectable>
								<selectable>CMAC-AES-256</selectable>
								<selectable>HMAC-SHA-1</selectable>
								<selectable>HMAC-SHA-256</selectable>
								<selectable>HMAC-SHA-512</selectable>
							</selectables>as the PRF</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>NIST SP 800-108 (Section 5.1) (KDF in Counter Mode)<h:p/>
							<selectables>
								<selectable>ISO-CMAC</selectable>
								<selectable>NIST-CMAC</selectable>
								<selectable>ISO-CIPH</selectable>
								<selectable>ISO-HMAC</selectable> 
								<selectable>FIPS-HMAC</selectable>
								<selectable>ISO-HASH</selectable>
								<selectable>FIPS-SHA</selectable>
								</selectables></h:td>
						</h:tr>
		
						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-2"/>
						<h:td>KeyDrv2</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Direct Generation from a Random Bit Generator as specified in FCS_RBG_EXT.1 </h:td>
						<h:td>KDF in Feedback Mode using <selectables>
								<selectable>CMAC-AES-128</selectable>
								<selectable>CMAC-AES-192</selectable>
								<selectable>CMAC-AES-256</selectable>
								<selectable>HMAC-SHA-1</selectable>
								<selectable>HMAC-SHA-256</selectable>
								<selectable>HMAC-SHA-512</selectable>
							</selectables>as the PRF</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>NIST SP 800-108 (Section 5.2) (KDF in Feedback Mode)<h:p/>
							<selectables>
								<selectable>ISO-CMAC</selectable>
								<selectable>NIST-CMAC</selectable>
								<selectable>ISO-CIPH</selectable>
								<selectable>ISO-HMAC</selectable> 
								<selectable>FIPS-HMAC</selectable>
								<selectable>ISO-HASH</selectable>
								<selectable>FIPS-SHA</selectable>
								</selectables></h:td>
						</h:tr>
		
						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-3"/>
						<h:td>KeyDrv3</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Direct Generation from a Random Bit Generator as specified in FCS_RBG_EXT.1 </h:td>
						<h:td>KDF in Double Pipeline Iteration Mode using <selectables>
								<selectable>CMAC-AES-128</selectable>
								<selectable>CMAC-AES-192</selectable>
								<selectable>CMAC-AES-256</selectable>
								<selectable>HMAC-SHA-1</selectable>
								<selectable>HMAC-SHA-256</selectable>
								<selectable>HMAC-SHA-512</selectable>
							</selectables>as the PRF</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>NIST SP 800-108 (Section 5.3) (KDF in n Double Pipeline Iteration Mode)<h:p/>
							<selectables>
								<selectable>ISO-CMAC</selectable>
								<selectable>NIST-CMAC</selectable>
								<selectable>ISO-CIPH</selectable>
								<selectable>ISO-HMAC</selectable> 
								<selectable>FIPS-HMAC</selectable>
								<selectable>ISO-HASH</selectable>
								<selectable>FIPS-SHA</selectable>
								</selectables></h:td>
						</h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-4"/>
						<h:td>KeyDrv4</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Intermediary keys</h:td>
						<h:td><selectables>
							<selectable>exclusive OR (XOR)</selectable>
							<selectable>SHA256</selectable>
							<selectable>SHA-512</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td><selectables>
							<selectable>ISO-HASH</selectable>
							<selectable>FIPSSHA</selectable>
							</selectables></h:td>
						</h:tr>
		
						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-5"/>
						<h:td>KeyDrv5</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Concatenated keys</h:td>
						<h:td>KDF in <selectables>
							<selectable>Counter Mode</selectable>
							<selectable>Feedback Mode</selectable>
							<selectable>Double Pipeline Iteration Mode</selectable>
							</selectables> using <selectables>
							<selectable>CMAC-AES-128</selectable>
							<selectable>CMAC-AES-192</selectable>
							<selectable>CMAC-AES-256</selectable>
							<selectable>HMAC-SHA-1</selectable>
							<selectable>HMAC-SHA-256</selectable>
							<selectable>HMAC-SHA-512</selectable>
							</selectables>as the PRF</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>NIST SP 800-108 [selection: (Section 5.1) (KDF in Counter Mode);<h:p/>
							(Section 5.2) (KDF in Feedback Mode);<h:p/>
							(Section 5.3) (KDF in Double-Pipeline Iteration Mode)]<h:p/>
							<selectables>
								<selectable>ISO-CMAC</selectable>
								<selectable>NIST-CMAC</selectable>
								<selectable>ISO-CIPH</selectable>
								<selectable>ISO-HMAC</selectable> 
								<selectable>FIPS-HMAC</selectable>
								<selectable>ISO-HASH</selectable>
								<selectable>FIPS-SHA</selectable>
								</selectables></h:td>
						</h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-6"/>
						<h:td>KeyDrv6</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Two keys</h:td>
						<h:td><selectables>
							<selectable>AES-CCM</selectable>
							<selectable>AES-GCM</selectable>
							<selectable>AES-CBC</selectable>
							<selectable>AES-KWP</selectable>
							<selectable>AES-KW</selectable>
							<selectable>CAM-CBC</selectable> 
							<selectable>CAM-CCM</selectable>
							<selectable>CAM-GCM</selectable></selectables> from FCS_COP.1/SKC Symmetric Key table</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>[selection: see List of Standards in FCS_COP.1/SKC Symmetric Key table]</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-7"/>
						<h:td>KeyDrv7</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>secret IV</selectable>
							<selectable>seed</selectable>
							</selectables></h:td>
						<h:td>Shared secret, salt, output length, fixed information</h:td>
						<h:td><selectables>
							<selectable>hash function from FCS_COP.1/Hash</selectable>
							<selectable>keyed hash from FCS_COP.1/HMAC</selectable>
							</selectables></h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>(NIST-KDRV) sec 4<h:p/>
							<selectables>
								<selectable>see List of Standards in FCS_COP.1/Hash and FCS_COP.1/HMAC</selectable>
								</selectables></h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-8"/>
						<h:td>KeyDrv8</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>secret IV</selectable>
							<selectable>seed</selectable>
							</selectables></h:td>
						<h:td>Shared secret, salt, IV, output length, fixed information</h:td>
						<h:td><selectables>
							<selectable>keyed hash from FCS_COP.1/HMAC</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>(NIST-KDRV) sec 5<h:p/>
							<selectables>
								<selectable>see List of Standards in FCS_COP.1/Hash and FCS_COP.1/HMAC</selectable>
								</selectables></h:td></h:tr>
					</h:table>
				</title>
				<note role="application">
					Note that Camellia algorithms do not support 192-bit key sizes.<h:p/>
					The interface referenced in the requirement could take different forms, the most likely of which is
					an application programming interface to an OS kernel. There may be various levels of abstraction.
					For Authorization Factor Submasks, the key size to be used in the HMAC falls into a range between
					L1 and L2 defined in ISO/IEC 10118 for the appropriate hash function (for example for SHA-256
					L1 = 512, L2 =256) where L2 = k = L1.<h:p/>
					General note: in order to use a NIST SP 800-108 conformant method of key derivation, the TOE
					is permitted to implement this with keys as derived as indicated in Key Derivation Functions table
					above, and with the algorithms as indicated in the same table.<h:p/>
					NIST SP 800-131A Rev 1 allows the use of SHA-1 in these use cases.<h:p/>
					KeyDrv5, KeyDrv6, and the XOR option in KeyDrv4 will create an “inverted key hierarchy” in
					which the TSF will combine two or more keys to create a third key. These same KDFs may also
					use a submask key as input, which could be an authorization factor or derived from a PBKDF. In
					these cases the ST author must explicitly declare this option and should present a reasonable
					argument that the entropy of the inputs to the KDFs will result in full entropy of the expected
					output.<h:p/>
					If keys are combined, the ST author shall describe which method of combination is used in order
					to justify that the effective entropy of each factor is preserved.<h:p/>
					The documentation of the product’s encryption key management should be detailed enough that,
					after reading, the evaluator will thoroughly understand the product’s key management and how it
					meets the requirements to ensure the keys are adequately protected. This documentation should
					include an essay and diagrams. This documentation is not required to be part of the TSS; it can be
					submitted as a separate document and marked as developer proprietary.<h:p/>
					SP 800-56C specifies a two-step key derivation procedure that employs an extraction-thenexpansion technique for deriving keying material from a shared secret generated during a key
					establishment scheme. The Randomness Extraction step as described in Section 5 of SP 800-56C
					is followed by Key Expansion using the key derivation functions defined in SP 800-108.<h:p/>
					This requirement must be claimed by the TOE if at least one of FCS_CKM.1/KEK,
					FCS_CKM.1/SK, or FCS_COP.1/KeyEnc chooses a selection related to key derivation.<h:p/>
					If at least one of KeyDrv4, KeyDrv5, or KeyDrv6 is selected AND password-based key derivation
					is used to create at least one of the inputs, the selection-based SFR FCS_COP.1/PBKDF must also
					be claimed.<h:p/>
				</note>
				<aactivity>
					<TSS>
						The evaluator shall check that the TSS includes a description of the key derivation
						functions and shall check that this uses a key derivation algorithm and key sizes
						according to the specification selected in the ST out of the table as provided in the
						cPP table per row. The evaluator shall confirm that the TSS supports the selected
						methods.<h:p/>
						If <h:u>KeyDrv5</h:u> is selected, the evaluator shall verify that the TSS shows that the total
						length of the concatenated keys used as input to the KDF is greater than or equal to
						the length of the output from the KDF.<h:p/>
						[conditional] If key combination is used to form a KEK, the evaluator shall verify
						that the TSS describes the method of combination and that this method is either an
						XOR, a KDF, or encryption.<h:p/>
						[conditional] If a KDF is used to form a KEK, the evaluator shall ensure that the
						TSS includes a description of the key derivation function and shall verify the key
						derivation uses an approved derivation mode and key expansion algorithm
						according to SP 800-108.<h:p/>
						[conditional] If key concatenation is used to derive KEKs (KeyDrv5), the evaluator
						shall ensure the TSS includes a description of the randomness extraction step,
						including the following:<h:p/><h:ul>
						<h:li>The description must include how an approved untruncated MAC function is
							being used for the randomness extraction step and the evaluator must verify
							the TSS describes that the output length (in bits) of the MAC function is at
							least as large as the targeted security strength (in bits) of the parameter set
							employed by the key establishment scheme (see Tables 1-3 of SP 800-56C).</h:li>
						<h:li>The description must include how the MAC function being used for the
							randomness extraction step is related to the PRF used in the key expansion and
							verify the TSS description includes the correct MAC function:<h:ul>
							<h:li>If an HMAC-hash is used in the randomness extraction step, then the same
								HMAC-hash (with the same hash function hash) is used as the PRF in the
								key expansion step.</h:li>
							<h:li>If an AES-CMAC (with key length 128, 192, or 256 bits) is used in the
								randomness extraction step, then AES-CMAC with a 128-bit key is used
								as the PRF in the key expansion step.</h:li></h:ul></h:li>
						<h:li>The description must include the lengths of the salt values being used in the
							randomness extraction step and the evaluator shall verify the TSS description
							includes correct salt lengths:<h:ul>
							<h:li>If an HMAC-hash is being used as the MAC, the salt length can be any
								value up to the maximum bit length permitted for input to the hash
								function hash.</h:li>
							<h:li>If an AES-CMAC is being used as the MAC, the salt length shall be the
								same length as the AES key (i.e. 128, 192, or 256 bits).</h:li></h:ul></h:li>
						</h:ul>
					</TSS>
					<Guidance>
						The evaluator shall verify that the AGD guidance instructs the administrator how
						to configure the TOE to use the selected key types for all uses identified in the ST.
					</Guidance>
					<KMD>
						The evaluator shall examine the KMD to ensure that:<h:ul>
						<h:li>The KMD describes the complete key derivation chain and the description
							must be consistent with the description in the TSS. For all key derivations the
							TOE must use a method as described in the cPP table. There should be no
							uncertainty about how a key is derived from another in the chain.</h:li>
						<h:li>The length of the key derivation key is defined by the PRF. The evaluator
							should check whether the key derivation key length is consistent with the
							length provided by the selected PRF.</h:li>
						<h:li>If a key is used as an input to several KDFs, each invocation must use a
							distinct context string. If the output of a KDF execution is used for multiple
							cryptographic keys, those keys must be disjoint segments of the output.</h:li>
						</h:ul>
					</KMD>
					<Tests>
						The following tests require the developer to provide access to a test platform that
						provides the evaluator with tools that are typically not found on factory products.<h:p/>
						The evaluator shall perform one or more of the following tests to verify the
						correctness of the key derivation function, depending on the specific functions that
						are supported:<h:p/>
						Preconditions for testing:<h:ul>
						<h:li>Specification of input parameter to the key derivation function to be tested</h:li>
						<h:li>Specification of further required input parameters</h:li>
						<h:li>Access to derived keys</h:li></h:ul>
						The following table maps the data fields in the tests below to the notations used in
						SP 800-108 and SP 800-56C<h:p/>
						<h:table class="classic" style="width:75%">
						<h:tr class="header"><h:td>Data Fields</h:td><h:td colspan="2">Notations</h:td></h:tr>
						<h:tr><h:td></h:td><h:td>SP 800-108</h:td><h:td>SP 800-56C</h:td></h:tr>
						<h:tr><h:td>Pseudorandom function</h:td><h:td>PRF</h:td><h:td>PRF</h:td></h:tr>
						<h:tr><h:td>Counter length</h:td><h:td>r</h:td><h:td>r</h:td></h:tr>
						<h:tr><h:td>Length of output of PRF</h:td><h:td>r</h:td><h:td>r</h:td></h:tr>
						<h:tr><h:td>Length of derived keying material</h:td><h:td>L</h:td><h:td>L</h:td></h:tr>
						<h:tr><h:td>Length of input values</h:td><h:td>I_length</h:td><h:td>I_length</h:td></h:tr>
						<h:tr><h:td>Pseudorandom input values I</h:td><h:td>K1 (key derivation key)</h:td><h:td>Z (shared secret)</h:td></h:tr>
						<h:tr><h:td>Pseudorandom salt values</h:td><h:td></h:td><h:td>S</h:td></h:tr>
						<h:tr><h:td>Randomness extraction MAC</h:td><h:td>n/a</h:td><h:td>MAC</h:td></h:tr>
						</h:table>
						The below tests are derived from Key Derivation using Pseudorandom Functions
						(SP 800-108) Validation System (KBKDFVS), Updated 4 January 2016, Section
						6.2, from the National Institute of Standards and Technology.<h:p/>
						<h:b>KeyDrv1: Counter Mode Tests:</h:b><h:br/>
						The evaluator shall determine the following characteristics of the key derivation
						function:<h:ul>
						<h:li>One or more pseudorandom functions that are supported by the
							implementation (PRF).</h:li>
						<h:li>One or more of the values {8, 16, 24, 32} that equal the length of the binary
							representation of the counter (r).</h:li>
						<h:li>The length (in bits) of the output of the PRF (h).</h:li>
						<h:li>Minimum and maximum values for the length (in bits) of the derived keying
							material (L). These values can be equal if only one value of L is supported.
							These must be evenly divisible by h.</h:li>
						<h:li>Up to two values of L that are NOT evenly divisible by h.</h:li>
						<h:li>Location of the counter relative to fixed input data: before, after, or in the
							middle.<h:ul>
							<h:li>Counter before fixed input data: fixed input data string length (in bytes),
								fixed input data string value.</h:li>
							<h:li>Counter after fixed input data: fixed input data string length (in bytes),
								fixed input data string value.</h:li>
							<h:li>Counter in the middle of fixed input data: length of data before counter (in
								bytes), length of data after counter (in bytes), value of string input before
								counter, value of string input after counter.</h:li></h:ul></h:li>
						<h:li>The length (I_length) of the input values I.</h:li></h:ul>
						For each supported combination of I_length, MAC, salt, PRF, counter location,
						value of r, and value of L, the evaluator shall generate 10 test vectors that include
						pseudorandom input values I, and pseudorandom salt values. If there is only one
						value of L that is evenly divisible by h, the evaluator shall generate 20 test vectors
						for it. For each test vector, the evaluator shall supply this data to the TOE in order
						to produce the keying material output.<h:p/>
						The results from each test may either be obtained by the evaluator directly or by
						supplying the inputs to the implementer and receiving the results in response. To
						determine correctness, the evaluator shall compare the resulting values to those
						obtained by submitting the same inputs to a known good implementation.<h:p/>
						<h:b>KeyDrv2: Feedback Mode Tests:</h:b><h:p/>
						The evaluator shall determine the following characteristics of the key derivation
						function:<h:ul>
						<h:li>One or more pseudorandom functions that are supported by the
							implementation (PRF).</h:li>
						<h:li>The length (in bits) of the output of the PRF (h).</h:li>
						<h:li>Minimum and maximum values for the length (in bits) of the derived keying
							material (L). These values can be equal if only one value of L is supported.
							These must be evenly divisible by h.</h:li>
						<h:li>Up to two values of L that are NOT evenly divisible by h.</h:li>
						<h:li>Whether or not zero-length IVs are supported.</h:li>
						<h:li>Whether or not a counter is used, and if so:<h:ul>
							<h:li>One or more of the values {8, 16, 24, 32} that equal the length of the
								binary representation of the counter (r).</h:li>
							<h:li>Location of the counter relative to fixed input data: before, after, or in the
								middle.<h:ul>
								<h:li>Counter before fixed input data: fixed input data string length (in
									bytes), fixed input data string value.</h:li>
								<h:li>Counter after fixed input data: fixed input data string length (in bytes),
									fixed input data string value.</h:li>
								<h:li>Counter in the middle of fixed input data: length of data before counter
									(in bytes), length of data after counter (in bytes), value of string input
									before counter, value of string input after counter.</h:li></h:ul></h:li></h:ul></h:li>
						<h:li>The length (I_length) of the input values L.</h:li></h:ul>
						For each supported combination of I_length, MAC, salt, PRF, counter location (if
						a counter is used), value of r (if a counter is used), and value of L, the evaluator
						shall generate 10 test vectors that include pseudorandom input values I and
						pseudorandom salt values. If the KDF supports zero-length IVs, five of these test
						vectors will be accompanied by pseudorandom IVs and the other five will use zerolength IVs. If zero-length IVs are not supported, each test vector will be
						accompanied by an pseudorandom IV. If there is only one value of L that is evenly
						divisible by h, the evaluator shall generate 20 test vectors for it.<h:p/>
						For each test vector, the evaluator shall supply this data to the TOE in order to
						produce the keying material output. The results from each test may either be
						obtained by the evaluator directly or by supplying the inputs to the implementer and
						receiving the results in response. To determine correctness, the evaluator shall
						compare the resulting values to those obtained by submitting the same inputs to a
						known good implementation.<h:p/>
						<h:b>KeyDrv3: Double Pipeline Iteration Mode Tests:</h:b><h:p/>
						The evaluator shall determine the following characteristics of the key derivation
						function:<h:ul>
						<h:li>One or more pseudorandom functions that are supported by the
							implementation (PRF).</h:li>
						<h:li>The length (in bits) of the output of the PRF (h).</h:li>
						<h:li>Minimum and maximum values for the length (in bits) of the derived keying
							material (L). These values can be equal if only one value of L is supported.
							These must be evenly divisible by h.</h:li>
						<h:li>Up to two values of L that are NOT evenly divisible by h.</h:li>
						<h:li>Whether or not a counter is used, and if so:<h:ul>
							<h:li>One or more of the values {8, 16, 24, 32} that equal the length of the
								binary representation of the counter (r).</h:li>
							<h:li>Location of the counter relative to fixed input data: before, after, or in the
								middle.<h:ul>
								<h:li>Counter before fixed input data: fixed input data string length (in
									bytes), fixed input data string value.</h:li>
								<h:li>Counter after fixed input data: fixed input data string length (in bytes),
								fixed input data string value.</h:li>
								<h:li>Counter in the middle of fixed input data: length of data before counter
								(in bytes), length of data after counter (in bytes), value of string input
								before counter, value of string input after counter.</h:li></h:ul></h:li></h:ul></h:li>
						<h:li>The length (I_length) of the input values I.</h:li></h:ul>
						For each supported combination of I_length, MAC, salt, PRF, counter location (if
						a counter is used), value of r (if a counter is used), and value of L, the evaluator
						shall generate 10 test vectors that include pseudorandom input values I, and
						pseudorandom salt values. If there is only one value of L that is evenly divisible by
						h, the evaluator shall generate 20 test vectors for it.<h:p/>
						For each test vector, the evaluator shall supply this data to the TOE in order to
						produce the keying material output. The results from each test may either be
						obtained by the evaluator directly or by supplying the inputs to the implementer and
						receiving the results in response. To determine correctness, the evaluator shall
						compare the resulting values to those obtained by submitting the same inputs to a
						known good implementation.<h:p/>
						<h:b>KeyDrv4: Intermediate Keys Method</h:b><h:p/>
						If the selected algorithm is a hash then the testing of the hash primitive is the only
						required Evaluation Activity. If the selected algorithm is XOR then no separate
						primitive testing is necessary.<h:p/>
						<h:b>KeyDrv5: Concatenated Keys Method</h:b><h:p/>
						The evaluator should confirm that the combined length of the concatenated keys
						should be at least as long as the keysize of the selected methods. There are no other
						tests other than for the methods selected for this row performed for KeyDrv1,
						KeyDrv2, and KeyDrv3. <h:p/>
						<h:b>KeyDrv6: Two Keys Method</h:b><h:p/>
						The evaluator should confirm that the combined length of the two keys should be
						at least as long as the keysize of the selected methods. There are no other tests other
						than for the methods selected for this row from FCD_COP.1/SK.<h:p/>
						<h:b>KeyDrv7: Shared Secret, Salt, Output Length, Fixed Information Method</h:b><h:p/>
						For each supported selection of PRF, length of shared secret (Z) [selection: 128,
						256] bits, length of salt (S) [selection: length of input block of PRF, one-half length
						of input block of PRF, 0] bits, output length (L) [selection: 128, 256] bits, and length
						of fixed information (FixedInfo) [selection: length of on input block of PRF, onehalf length of input block of PRF, 0] bits, the evaluator shall generate 10 test vectors
						that include pseudorandom input values for Z, salt values (for non-zero lengths,
						otherwise, omit) and fixed information (for non-zero lengths, otherwise, omit).<h:p/>
						For each test vector, the evaluator shall supply this data to the TOE in order to
						produce the keying material output. The results from each test may either be
						obtained by the evaluator directly or by supplying the inputs to the implementer and
						receiving the results in response. To determine correctness, the evaluator shall
						compare the resulting values to those obtained by submitting the same inputs to a
						known good implementation.<h:p/>
						<h:b>KeyDrv8: Shared Secret, Salt, IV, Output Length, Fixed Information Method</h:b><h:p/>
						For each supported selection of PRF, length of shared secret (Z), length of salt,
						length of initialization vector (IV), output length (L), and length of fixed
						information (FixedInfo), the evaluator shall generate 10 test vectors that include
						pseudorandom input values for Z, salt values (for non-zero lengths, otherwise,
						omit), IV (for non-zero lengths, otherwise, use a vector of length equal to length of
						input block of PRF and fill with zeros), and fixed information (for non-zero lengths,
						otherwise, omit).<h:p/>
						For each test vector, the evaluator shall supply this data to the TOE in order to
						produce the keying material output. The results from each test may either be
						obtained by the evaluator directly or by supplying the inputs to the implementer and
						receiving the results in response. To determine correctness, the evaluator shall
						compare the resulting values to those obtained by submitting the same inputs to a
						known good implementation.<h:p/>
					</Tests>
				</aactivity>
			</f-element>
		</f-component>


		
	<!-- FCS_COP.1/Hash Cryptographic Operation (Hashing)-->
	<f-component cc-id="fcs_cop.1" iteration="Hash" name="Cryptographic Operation (Hashing)" status="sel-based">
<!-- 		<exportable id="inf-gpcp-fcs-cop-hash"/> -->
<!-- 		<importable inf-id="inf-dsc-fcs-cop-hash"/> -->
		<selection-depends req="fpt-tud-ext-2e1" ids="sel-tud2-hash"/>
                <f-element id="fcs-cop-1e1-hash">
                    <title>The TSF shall perform [<h:i>cryptographic hashing</h:i>] in accordance with a specified cryptographic algorithm
                        <selectables>
                            <selectable id="sel-cop1-sha1">SHA-1</selectable>
                            <selectable id="sel-cop1-sha256">SHA-256</selectable>
                            <selectable id="sel-cop1-sha384">SHA-384</selectable>
                            <selectable id="sel-cop1-sha512">SHA-512</selectable>
							<selectable id="sel-cop1-sha3-224">SHA-3-224</selectable>
							<selectable id="sel-cop1-sha3-256">SHA-3-256</selectable>
							<selectable id="sel-cop1-sha3-384">SHA-3-384</selectable>
							<selectable id="sel-cop1-sha3-512">SHA-3-512</selectable>		    
                        </selectables> that meet the following:
					<selectables>
						<selectable>ISO/IEC 10118-3:2018</selectable>
						<selectable>FIPS 180-4</selectable>
					</selectables>   
                    </title>
                    <note role="application">
				The hash selection should be consistent with the overall strength of the algorithm used for
				signature generation. For example, the ST Author should choose SHA-256 for 2048-bit RSA or ECC 
				with P-256, SHA-384 for 3072-bit RSA, 4096-bit RSA, or ECC with P-384, and SHA-512 for ECC
				with P-521. The ST author selects the standard based on the algorithms selected.<h:p/>
				SHA-1 may be used for the following applications: generating and verifying hash-based message
				authentication codes (HMACs), key derivation functions (KDFs), and random bit/number
				generation (In certain cases, SHA-1 may also be used for verifying old digital signatures and time
				stamps, provided that this is explicitly allowed by the application domain).
                    </note>
                    <aactivity>  <!-- QQQQ: This evaluation activity must be checked against DSC -->
                        <TSS>
                            The evaluator shall check that the association of the hash function with other TSF 
                            cryptographic functions (for example, the digital signature verification function) is documented 
                            in the TSS.<h:p/>
                        </TSS>
                        <Guidance>
                            The evaluator checks the AGD documents to determine that any configuration that is required to 
                            be done to configure the functionality for the required hash sizes is present. <h:p/>
                        </Guidance>
                        <Tests>
							<h:b><h:u>SHA-1 and SHA-2 Tests</h:u></h:b><h:br/>
                            The TSF hashing functions can be implemented in one of two modes. The first mode is the byte-oriented
							mode. In this mode the TSF only hashes messages that are an integral number of bytes in length;
							i.e., the length (in bits) of the message to be hashed is divisible by 8. The second mode is the
							bit-oriented mode. In this mode the TSF hashes messages of arbitrary length. As there are different
							tests for each mode, an indication is given in the following sections for the bit-oriented vs. the
							byte-oriented testmacs.
                            <h:p/>
                            The evaluator shall perform all of the following tests for each hash algorithm implemented by the TSF
							and used to satisfy the requirements of this PP.
                            <h:p/>
                            <h:b>Assurance Activity Note:</h:b><h:br /> The following tests require the developer to provide access
							to a test platform that provides the evaluator with tools that are typically not found on factory 
							products.
                            <h:p/>
                            <h:b>Short Messages Test Bit-oriented Mode</h:b><h:br/>
                            The evaluators devise an input set consisting of m+1 messages, where m is the block length of the hash
							algorithm. The length of the messages range sequentially from 0 to m bits. The message text shall
							be pseudo-randomly generated. The evaluators compute the message digest for each of the messages
							and ensure that the correct result is produced when the messages are provided to the TSF.
                            <h:p/>
                            <h:b>Short Messages Test Byte-oriented Mode</h:b><h:br/>
                            The evaluators devise an input set consisting of m/8+1 messages, where m is the block length of the 
							hash algorithm. The length of the messages range sequentially from 0 to m/8 bytes, with each 
							message being an integral number of bytes. The message text shall be pseudo-randomly generated.
							The evaluators compute the message digest for each of the messages and ensure that the correct
							result is produced when the messages are provided to the TSF.
                            <h:p/>
                            <h:b>Selected Long Messages Test Bit-oriented Mode</h:b><h:br/>
                            The evaluators devise an input set consisting of m messages, where m is the block length
                            of the hash algorithm. The length of the ith message is 512 + 99*i, where
                            1 &lt;= i &lt;= m. The message text shall be pseudo-randomly
                            generated. The evaluators compute the message digest for each of the messages and ensure
                            that the correct result is produced when the messages are provided to the TSF.
                            <h:p/>
                            <h:b>Selected Long Messages Test Byte-oriented Mode</h:b><h:br/>
                            The evaluators devise an input set consisting of m/8 messages,
                            where m is the block length of the hash algorithm. The length of the ith message
                            is 512 + 8*99*i, where 1 &lt;= i &lt;= m/8.
                            The message text shall be pseudo-randomly generated. The evaluators compute the message
                            digest for each of the messages and ensure that the correct result is produced when
                            the messages are provided to the TSF.
                            <h:p/>
                            <h:b>Pseudo-randomly Generated Messages Test</h:b><h:br/>
                            This test is for byte-oriented implementations only. The evaluators randomly generate a
                            seed that is n bits long, where n is the length of the message digest produced by the
                            hash function to be tested. The evaluators then formulate a set of 100 messages and
                            associated digests by following the algorithm provided in Figure 1 of [SHAVS]. The
                            evaluators then ensure that the correct result is produced when the messages are
                            provided to the TSF.<h:p/>
							<h:b><h:u>SHA-3 Tests</h:u></h:b><h:br/>
							The tests below are derived from the The Secure Hash Algorithm-3 Validation System (SHA3VS), 
							Updated: April 7, 2016, from the National Institute of Standards and Technology.<h:p/>
							For each SHA-3-XXX implementation, XXX represents d, the digest length in bits. The capacity, c,
							is equal to 2d bits. The rate is equal to 1600-c bits.  <h:p/>
							The TSF hashing functions can be implemented with one of two orientations. The first is a bit-oriented
							mode that hashes messages of arbitrary length. The second is a byte-oriented mode that hashes messages 
							that are an integral number of bytes in length (i.e., the length (in bits) of the message to be
							hashed is divisible by 8). Separate tests for each orientation are given below. <h:p/>
							The evaluator shall perform all of the following tests for each hash algorithm and orientation
							implemented by the TSF and used to satisfy the requirements of this PP. The evaluator shall
							compare digest values produced by a known-good SHA-3 implementation against those generated by
							running the same values through the TSF.<h:p/>
							<h:b>Short Messages Test, Bit-oriented Mode</h:b><h:br/>
							The evaluators devise an input set consisting of rate+1 short messages. The length of the messages
							ranges sequentially from 0 to rate bits. The message text shall be pseudo-randomly generated. The
							evaluators compute the message digest for each of the messages and ensure that the correct result
							is produced when the messages are provided to the TSF. The message of length 0 is omitted if the
							TOE does not support zero-length messages.<h:p/>
							<h:b>Short Messages Test, Byte-oriented Mode</h:b><h:br/>
							The evaluators devise an input set consisting of rate/8+1 short messages. The length of the
							messages ranges sequentially from 0 to rate/8 bytes, with each message being an integral number of 
							bytes. The message text shall be pseudo-randomly generated. The evaluators compute the message
							digest for each of the messages and ensure that the correct result is produced when the messages
							are provided to the TSF. The message of length 0 is omitted if the TOE does not support zero-length
							messages.<h:br/><h:p/>
							<h:b>Selected Long Messages Test, Bit-oriented Mode</h:b><h:br/>
							The evaluators devise an input set consisting of 100 long messages ranging in size from 
							rate+(rate+1) to rate+(100*(rate+1)), incrementing by rate+1. (For example, SHA-3-256 has a rate
							of 1088 bits. Therefore, 100 messages will be generated with lengths 2177, 3266, …, 109988 bits.)
							The message text shall be pseudo-randomly generated. The evaluators compute the message digest for
							each of the messages and ensure that the correct result is produced when the messages are provided
							to the TSF.<h:p/>
							<h:b>Selected Long Messages Test, Byte-oriented Mode</h:b><h:br/>
							The evaluators devise an input set consisting of 100 messages ranging in size from (rate+(rate+8))
							to (rate+100*(rate+8)), incrementing by rate+8. (For example, SHA-3-256 has a rate of 1088 bits.
							Therefore 100 messages will be generated of lengths 2184, 3280, 4376, …, 110688 bits.) The message
							text shall be pseudo-randomly generated. The evaluators compute the message digest for each of the
							messages and ensure that the correct result is produced when the messages are provided to the TSF.<h:p/>
							<h:b>Pseudo-randomly Generated Messages Monte Carlo) Test, Byte-oriented Mode</h:b><h:p/>
							The evaluators supply a seed of d bits (where d is the length of the message digest produced by
							the hash function to be tested. This seed is used by a pseudorandom function to generate 100,000 
							message digests. One hundred of the digests (every 1000th digest) are recorded as checkpoints. The
							TOE then uses the same procedure to generate the same 100,000 message digests and 100 checkpoint
							values. The evaluators then compare the results generated ensure that the correct result is
							produced when the messages are generated by the TSF.<h:br/><h:br/>
                        </Tests>
                    </aactivity>
                </f-element>
				<audit-event />
            </f-component>
		
	<f-component cc-id="fcs_cop.1" iteration="HMAC" name="Cryptographic Operation (Keyed Hash)" status="optional">
<!--			<exportable id="inf-gpcp-fcs-cop-hmac"/> -->
<!--			<exportable inf-id="inf-dsc-fcs-cop-hmac"/> -->
			<f-element id="fcs-cop-1e1-hmac">
				<title>The TSF shall perform [<h:i>keyed hash message authentication</h:i>] in accordance
					with a specified cryptographic algorithm 
					<selectables>
						<selectable>HMAC-SHA-1</selectable>
						<selectable>HMAC-SHA-256</selectable>
						<selectable>HMAC-SHA-384</selectable>
						<selectable>HMAC-SHA-512</selectable>
						<selectable>KMAC128</selectable>
						<selectable>KMAC256</selectable>
					</selectables> and cryptographic key sizes <assignable>key size (in bits)</assignable>
					that meet the following: 
					<selectables>
						<selectable>ISO/IEC 9797-2:2011 Section 7 “MAC Algorithm 2”</selectable>
						<selectable>[NIST-KDV] section 4 “KMAC”</selectable>
					</selectables>.
				</title>
				<note role="application">
					The HMAC key size falls into a range between L1 and L2 defined in ISO/IEC 10118 for the
					appropriate hash function (for example for SHA-256 L1 = 512, L2 = 256) where L2 ≤ k ≤ L1.
				</note>
				<aactivity>
					<TSS>
						The evaluator shall examine the TSS to ensure that it specifies the following values
						used by the HMAC and KMAC functions: output MAC length used.
					</TSS>
					<Guidance>
						There are no guidance evaluation activities for this component.
					</Guidance>
					<KMD>
						There are no KMD evaluation activities for this component.
					</KMD>
					<Tests>
						The following test requires the developer to provide access to a test platform that
						provides the evaluator with tools that are typically not found on factory products.<h:p/>
						This test is derived from The Keyed-Hash Message Authentication Code Validation
						System (HMACVS), updated 6 May 2016.<h:p/>
						The evaluator shall provide 15 sets of messages and keys for each selected hash
						algorithm and hash length/key size/MAC size combination. The evaluator shall
						have the TSF generate HMAC or KMAC tags for these sets of test data. The
						evaluator shall verify that the resulting HMAC or KMAC tags match the results
						from submitting the same inputs to a known-good implementation of the HMAC or
						KMAC function, having the same characteristics.<h:p/>
					</Tests>
				</aactivity>
			</f-element>
		</f-component>

	<f-component cc-id="fcs_cop.1" iteration="KAT" name="Cryptographic Operation (Key Agreement/Transport)" status="optional">
		<f-element id="fcs-cop-1e1-kat">
			<title>The TSF shall perform [<h:i>cryptographic key agreement/transport</h:i>] using the supported
			methods for key agreement/transport defined by the following rows of <xref to="fcs-ckm-kat-sels"/>: 
			<selectables>
				<selectable id="sel-fcs-cop-kat-kas1">KAS1</selectable>
				<selectable id="sel-fcs-cop-kat-kas2">KAS2</selectable>
				<selectable id="sel-fcs-cop-kat-kts">KTS-OAEP</selectable>
				<selectable id="sel-fcs-cop-kat-rsaes">RSAES-PKCS1-v1_5</selectable>
				<selectable id="sel-fcs-cop-kat-ecdh-nist">ECDH-NIST</selectable>
				<selectable id="sel-fcs-cop-kat-ecdh-bpc">ECDH-BPC</selectable>
				<selectable id="sel-fcs-cop-kat-dh">DH</selectable>
				<selectable id="sel-fcs-cop-kat-curve25519">Curve25519</selectable>
				<selectable id="sel-fcs-cop-kat-ecies">ECIES</selectable>
			</selectables>.<h:p/>
			<h:b><ctr ctr-type='Table' id="fcs-ckm-kat-sels">: Supported Methods for Key Agreement/Transport Operation</ctr></h:b><h:br/>	
			<h:table>
				<h:tr class="header"><h:td>Identifier</h:td><h:td>Cryptographic Algorithm</h:td><h:td>Key Sizes</h:td>
						<h:td>List of Standards</h:td></h:tr>
					
				<h:tr><depends on-sel="sel-fcs-cop-kat-kas1"/>
					<h:td>KAS1</h:td>
					<h:td>RSA-single party</h:td>
					<h:td><selectables>
						<selectable>2048</selectable>
						<selectable>3072</selectable>
						<selectable>4096</selectable>
						<selectable>6144</selectable>
						<selectable>8192</selectable>
					</selectables>bits</h:td>
					<h:td>NIST SP 800-56Br2 section 8.2</h:td>
				</h:tr>
			
				<h:tr><depends on-sel="sel-fcs-cop-kat-kas2"/>
					<h:td>KAS2</h:td>
					<h:td>RSA-both party</h:td>
					<h:td><selectables>
						<selectable>2048</selectable>
						<selectable>3072</selectable>
						<selectable>4096</selectable>
						<selectable>6144</selectable>
						<selectable>8192</selectable>
					</selectables>bits</h:td>
					<h:td>NIST SP 800-56Br2 section 8.3</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-kat-kts"/>
					<h:td>KTS-OAEP</h:td>
					<h:td>RSA</h:td>
					<h:td><selectables>
						<selectable>2048</selectable>
						<selectable>3072</selectable>
						<selectable>4096</selectable>
						<selectable>6144</selectable>
						<selectable>8192</selectable>
					</selectables>bits</h:td>
					<h:td>NIST SP 800-56Br2 section 9</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-kat-rsaes"/>
					<h:td>RSAES-PKCS1-v1_5</h:td>
					<h:td>RSA</h:td>
					<h:td><selectables>
						<selectable>2048</selectable>
						<selectable>3072</selectable>
						<selectable>4096</selectable>
						<selectable>6144</selectable>
						<selectable>8192</selectable>
					</selectables>bits</h:td>
					<h:td>RFC 8017 Section 7.2</h:td>
				</h:tr>
				
				<h:tr><depends on-sel="sel-fcs-cop-kat-ecdh-nist"/>
					<h:td>ECDH-NIST</h:td>
					<h:td>ECDH with NIST curves</h:td>
					<h:td><selectables>
						<selectable>256 (P-256)</selectable>
						<selectable>384 (P-384)</selectable>
						<selectable>512 (P-521)</selectable>
					</selectables></h:td>
					<h:td>NIST SP 800-56Ar3</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-kat-ecdh-bpc"/>
					<h:td>ECDH-BPC</h:td>
					<h:td>ECDH with Brainpool curves</h:td>
					<h:td><selectables>
						<selectable>256 (brainpoolP256r1)</selectable>
						<selectable>384 (brainpoolP384r1</selectable>
						<selectable>512 (brainpoolP512r1)</selectable>
					</selectables></h:td>
					<h:td>RFC 5639 (Section 3)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-kat-dh"/>
					<h:td>DH</h:td>
					<h:td>Diffie-Hellman</h:td>
					<h:td><selectables>
						<selectable>2048</selectable>
						<selectable>3072</selectable>
						<selectable>4096</selectable>
						<selectable>6144</selectable>
						<selectable>8192</selectable>
					</selectables>bits</h:td>
					<h:td>NIST SP 800-56A rev 3,
						<selectables>
							<selectable>RFC 3526 Section 
								<selectables>
									<selectable>3</selectable>
									<selectable>4</selectable>
									<selectable>5</selectable>
									<selectable>6</selectable>
									<selectable>7</selectable>
									</selectables></selectable>
							<selectable>RFC 7919 Appendices 
								<selectables>
									<selectable>A.1</selectable>
									<selectable>A.2</selectable>
									<selectable>A.3</selectable>
									<selectable>A.4</selectable>
									<selectable>A.5</selectable>
								</selectables></selectable>
						</selectables></h:td>
				</h:tr>
				
				<h:tr><depends on-sel="sel-fcs-cop-kat-curve25519"/>
					<h:td>Curve25519</h:td>
					<h:td>ECDH</h:td>
					<h:td>256 bits</h:td>
					<h:td>RFC 7748</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-kat-ecies"/>
					<h:td>ECIES</h:td>
					<h:td>ECIES</h:td>
					<h:td><selectables>
						<selectable>256</selectable>
						<selectable>384</selectable>
						<selectable>512</selectable>
					</selectables>bits</h:td>
					<h:td>
						<selectables>
							<selectable>ANSI X9.63</selectable>,
							<selectable>IEEE 1363a</selectable>,
							<selectable>ISO/IEC 18033-2 Part 2</selectable>,
							<selectable>SECG SEC1 sec 5.1</selectable>
						</selectables></h:td>
				</h:tr>
			</h:table>
			</title>
			<note role="application">
				The selections in this SFR should be consistent with the algorithms selected in FCS_CKM.2.	
			</note>
			<aactivity>
				<TSS>
					The evaluator shall ensure that the selected RSA and ECDH key
					agreement/transport schemes correspond to the key generation schemes selected in
					FCS_CKM.1/AK, and the key establishment schemes selected in FCS_CKM.2 If
					the ST selects DH, the TSS shall describe how the implementation meets the
					relevant sections of RFC 3526 (Section 3-7) and RFC 7919 (Appendices A.1-A.5).
					If the ST selects ECIES, the TSS shall describe the key sizes and algorithms (e.g.
					elliptic curve point multiplication, ECDH with either NIST or Brainpool curves,
					AES in a mode permitted by FCS_COP.1/SKC, a SHA-2 hash algorithm permitted
					by FCS_COP.1/Hash, and a MAC algorithm permitted by FCS_COP.1/HMAC)
					that are supported for the ECIES implementation.<h:p/>
					The evaluator shall ensure that, for each key agreement/transport scheme, the size
					of the derived keying material is at least the same as the intended strength of the 
					key agreement/transport scheme, and where feasible this should be twice the
					intended security strength of the key agreement/transport scheme.<h:p/>
					Table 2 of NIST SP 800-57 identifies the key strengths for the different algorithms
					that can be used for the various key agreement/transport schemes.<h:p/>
				</TSS>
				<Guidance>
					There are no guidance evaluation activities for this component.
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>
				<Tests>
					The following tests require the developer to provide access to a test platform that
					provides the evaluator with tools that are typically not found on factory products.<h:p/>
					The evaluator shall verify the implementation of the key generation routines of the
					supported schemes using the following tests:<h:p/>
					<h:b>If ECDH-NIST or ECDH-BPC is claimed:</h:b><h:p/>
					<h:b>SP800-56A Key Agreement Schemes</h:b><h:p/>
					The evaluator shall verify a TOE's implementation of SP800-56A key agreement
					schemes using the following Function and Validity tests. These validation tests for
					each key agreement scheme verify that a TOE has implemented the components of
					the key agreement scheme according to the specifications in the Recommendation.
					These components include the calculation of the DLC primitives (the shared secret
					value Z) and the calculation of the derived keying material (DKM) via the Key
					Derivation Function (KDF). If key confirmation is supported, the evaluator shall
					also verify that the components of key confirmation have been implemented
					correctly, using the test procedures described below. This includes the parsing of
					the DKM, the generation of MACdata and the calculation of MACtag.<h:p/>
					<h:i>Function Test</h:i><h:p/>
					The Function test verifies the ability of the TOE to implement the key agreement
					schemes correctly. To conduct this test the evaluator shall generate or obtain test
					vectors from a known good implementation of the TOE supported schemes. For
					each supported key agreement scheme-key agreement role combination, KDF type,
					and, if supported, key confirmation role-key confirmation type combination, the
					tester shall generate 10 sets of test vectors. The data set consists of one set of domain
					parameter values (FFC) or the NIST approved curve (ECC) per 10 sets of public
					keys. These keys are static, ephemeral or both depending on the scheme being
					tested.<h:p/>
					The evaluator shall obtain the DKM, the corresponding TOE’s public keys (static
					or ephemeral), the MAC tags, and any inputs used in the KDF, such as the Other
					Information field OI and TOE id fields.<h:p/>
					If the TOE does not use a KDF defined in SP 800-56A, the evaluator shall obtain
					only the public keys and the hashed value of the shared secret. <h:p/>
					The evaluator shall verify the correctness of the TSF’s implementation of a given
					scheme by using a known good implementation to calculate the shared secret value,
					derive the keying material DKM, and compare hashes or MAC tags generated from
					these values.<h:p/>
					If key confirmation is supported, the TSF shall perform the above for each
					implemented approved MAC algorithm.<h:p/>
					<h:i>Validity Test</h:i><h:p/>
					The Validity test verifies the ability of the TOE to recognize another party’s valid
					and invalid key agreement results with or without key confirmation. To conduct this
					test, the evaluator shall obtain a list of the supporting cryptographic functions
					included in the SP800-56A key agreement implementation to determine which
					errors the TOE should be able to recognize. The evaluator generates a set of 24
					(FFC) or 30 (ECC) test vectors consisting of data sets including domain parameter
					values or NIST approved curves, the evaluator’s public keys, the TOE’s
					public/private key pairs, MACTag, and any inputs used in the KDF, such as the
					other info and TOE id fields.<h:p/>
					The evaluator shall inject an error in some of the test vectors to test that the TOE
					recognizes invalid key agreement results caused by the following fields being
					incorrect: the shared secret value Z, the DKM, the other information field OI, the
					data to be MACed, or the generated MACTag. If the TOE contains the full or partial
					(only ECC) public key validation, The evaluator shall also individually inject errors
					in both parties’ static public keys, both parties’ ephemeral public keys and the
					TOE’s static private key to assure the TOE detects errors in the public key validation
					function or the partial key validation function (in ECC only). At least two of the test
					vectors shall remain unmodified and therefore should result in valid key agreement
					results (they should pass).<h:p/>
					The TOE shall use these modified test vectors to emulate the key agreement scheme
					using the corresponding parameters. The evaluator shall compare the TOE’s results
					with the results using a known good implementation verifying that the TOE detects
					these errors.<h:p/>
					<h:b>If KAS1, KAS2, KTS-OAEP, or RSAES-PKCS1-v1_5 is claimed:</h:b><h:p/>
					<h:b>SP800-56B and PKCS#1 Key Establishment Schemes</h:b><h:p/>
					If the TOE acts as a sender, the following evaluation activity shall be performed to
					ensure the proper operation of every TOE supported combination of RSA-based
					key establishment scheme:<h:p/>
					To conduct this test the evaluator shall generate or obtain test vectors from a known
					good implementation of the TOE supported schemes. For each combination of
					supported key establishment scheme and its options (with or without key
					confirmation if supported, for each supported key confirmation MAC function if
					key confirmation is supported, and for each supported mask generation function if
					KTS-OAEP is supported), the tester shall generate 10 sets of test vectors. Each test
					vector shall include the RSA public key, the plaintext keying material, any
					additional input parameters if applicable, the MacKey and MacTag if key 
					confirmation is incorporated, and the outputted ciphertext. For each test vector, the
					evaluator shall perform a key establishment encryption operation on the TOE with
					the same inputs (in cases where key confirmation is incorporated, the test shall use
					the MacKey from the test vector instead of the randomly generated MacKey used
					in normal operation) and ensure that the outputted ciphertext is equivalent to the
					ciphertext in the test vector.<h:p/>
					If the TOE acts as a receiver, the following evaluation activities shall be performed
					to ensure the proper operation of every TOE supported combination of RSA-based
					key establishment scheme:<h:p/>
					To conduct this test the evaluator shall generate or obtain test vectors from a known
					good implementation of the TOE supported schemes. For each combination of
					supported key establishment scheme and its options (with our without key
					confirmation if supported, for each supported key confirmation MAC function if
					key confirmation is supported, and for each supported mask generation function if
					KTSOAEP is supported), the tester shall generate 10 sets of test vectors. Each test
					vector shall include the RSA private key, the plaintext keying material (KeyData),
					any additional input parameters if applicable, the MacTag in cases where key
					confirmation is incorporated, and the outputted ciphertext. For each test vector, the
					evaluator shall perform the key establishment decryption operation on the TOE and
					ensure that the outputted plaintext keying material (KeyData) is equivalent to the
					plain text keying material in the test vector. In cases where key confirmation is
					incorporated, the evaluator shall perform the key confirmation steps and ensure that
					the outputted MacTag is equivalent to the MacTag in the test vector.<h:p/>
					The evaluator shall ensure that the TSS describes how the TOE handles decryption
					errors. In accordance with NIST Special Publication 800-56B, the TOE must not
					reveal the particular error that occurred, either through the contents of any outputted
					or logged error message or through timing variations. If KTS-OAEP is supported,
					the evaluator shall create separate contrived ciphertext values that trigger each of
					the three decryption error checks described in NIST Special Publication 800-56B
					section 7.2.2.3, ensure that each decryption attempt results in an error, and ensure
					that any outputted or logged error message is identical for each.<h:p/>
					<h:b>DH:</h:b><h:p/>
					The evaluator shall verify the correctness of each TSF implementation of each
					supported Diffie-Hellman group by comparison with a known good
					implementation.<h:p/>
					<h:b>Curve25519:</h:b><h:p/>
					The evaluator shall verify a TOE's implementation of the key agreement scheme
					using the following Function and Validity tests. These validation tests for each key
					agreement scheme verify that a TOE has implemented the components of the key
					agreement scheme according to the specification. These components include the
					calculation of the shared secret K and the hash of K.<h:p/>
					<h:b>Function Test</h:b><h:p/>
					The Function test verifies the ability of the TOE to implement the key agreement
					schemes correctly. To conduct this test the evaluator shall generate or obtain test
					vectors from a known good implementation of the TOE supported schemes. For
					each supported key agreement role and hash function combination, the tester shall
					generate 10 sets of public keys. These keys are static, ephemeral or both depending
					on the scheme being tested.<h:p/>
					The evaluator shall obtain the shared secret value K, and the hash of K. The
					evaluator shall verify the correctness of the TSF’s implementation of a given
					scheme by using a known good implementation to calculate the shared secret value
					K and compare the hash generated from this value.<h:p/>
					<h:b>Validity Test</h:b><h:p/>
					The Validity test verifies the ability of the TOE to recognize another party’s valid
					and invalid key agreement results. To conduct this test, the evaluator generates a set
					of 30 test vectors consisting of data sets including the evaluator’s public keys and
					the TOE’s public/private key pairs.<h:p/>
					The evaluator shall inject an error in some of the test vectors to test that the TOE
					recognizes invalid key agreement results caused by the following fields being
					incorrect: the shared secret value K or the hash of K. At least two of the test vectors
					shall remain unmodified and therefore should result in valid key agreement results
					(they should pass).<h:p/>
					The TOE shall use these modified test vectors to emulate the key agreement scheme
					using the corresponding parameters. The evaluator shall compare the TOE’s results
					with the results using a known good implementation verifying that the TOE detects
					these errors.<h:p/>
					<h:b>ECIES:</h:b><h:p/>
					The evaluator shall verify the correctness of each TSF implementation of each
					supported use of ECIES by comparison with a known good implementation.<h:p/>
				</Tests>
			</aactivity>
		</f-element>
	</f-component>
		


		<f-component cc-id="fcs_cop.1" iteration="KeyEnc" name="Cryptographic Operation (Key Encryption)" status="optional">
<!--			<exportable id="inf-gpcp-fcs-cop-keyenc"/>  -->
<!--			<importable inf-id="inf-dsc-fcs-cop-keyenc"/>  -->
			<f-element id="fcs-cop-1e1-keyenc">
				<title>
					The TSF shall perform [<h:i>key encryption and decryption</h:i>] using the methods defined in the
					following rows of <xref to="fcs-cop-keyenc-sels"/>:
					<selectables>
						<selectable id="sel-fcs-cop-keyenc-se1">SE1</selectable>
						<selectable id="sel-fcs-cop-keyenc-ae1">AE1</selectable>
						<selectable id="sel-fcs-cop-keyenc-se2">SE2</selectable>
						<selectable id="sel-fcs-cop-keyenc-xor">XOR</selectable>
					</selectables><h:p/>
					<h:b><ctr ctr-type='Table' id="fcs-cop-keyenc-sels">: Supported Methods for Key Encryption Operation</ctr></h:b><h:br/>	
					<h:table>
						<h:tr class="header"><h:td>Identifier</h:td><h:td>Cryptographic Algorithm</h:td>
						<h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-cop-keyenc-se1"/>
						<h:td>SE1</h:td>
						<h:td>Symmetric <selectables>
							<selectable>AES-CCM</selectable>
							<selectable>AES-GCM</selectable>
							<selectable>AES-CBC</selectable>
							<selectable>AES-CTR</selectable>
							<selectable>AES-KWP</selectable>
							<selectable>AESKW</selectable>
							</selectables></h:td>
							<h:td><selectables>
								<selectable>128</selectable>
								<selectable>192</selectable>
								<selectable>256</selectable></selectables> bits</h:td>
						<h:td>See FCS_COP.1/SKC</h:td></h:tr>
					
						<h:tr><depends on-sel="sel-fcs-cop-keyenc-ae1"/>
						<h:td>AE1</h:td>
						<h:td>Asymmetric KTS-OAEP</h:td>
						<h:td><selectables>
							<selectable>2048</selectable>
							<selectable>3072</selectable></selectables> bits</h:td>
						<h:td>See FCS_COP.1/SKC</h:td></h:tr>
		
						<h:tr><depends on-sel="sel-fcs-cop-keyenc-se2"/>
						<h:td>SE2</h:td>
						<h:td>Symmetric <selectables>
							<selectable>CAM-CBC</selectable>
							<selectable>CAM-CCM</selectable>
							<selectable>CAM-GCM</selectable>
							</selectables></h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>256</selectable></selectables> bits</h:td>
						<h:td>See FCS_COP.1/KAT</h:td></h:tr>
						
						<h:tr><depends on-sel="sel-fcs-cop-keyenc-xor"/>
						<h:td>XOR</h:td>
						<h:td>Exclusive OR operation</h:td>
							<h:td><selectables>
								<selectable>128</selectable>
								<selectable>192</selectable>
								<selectable>256</selectable></selectables> bits</h:td>
						<h:td>See FCS_CKM_EXT.5</h:td></h:tr>
					</h:table>
				</title>
				<note role="application">
					A TOE will use this requirement to specify how the Key Encryption Key (KEK) wraps a
					symmetric encryption key. A TOE will always need this requirement in order to capture the last
					stage of the key chain in which the Key Encryption Key (KEK) wraps the symmetric encryption
					key.<h:p/>
					If XOR is selected, the selection-based SFR FCS_CKM_EXT.5 must be claimed by the TOE.<h:p/>
				</note>
				<aactivity>
					<TSS>
						The evaluator shall examine the TSS to ensure that it identifies whether the
						implementation of this cryptographic operation for key encryption (including key
						lengths and modes) is an implementation that is tested in FCS_COP.1/SKC.<h:p/>
						The evaluator shall check that the TSS includes a description of the key wrap
						functions and shall check that this uses a key wrap algorithm and key sizes
						according to the specification selected in the ST out of the table as provided in the
						cPP table. <h:p/>
					</TSS>
					<Guidance>
						The evaluator checks the AGD documents to confirm that the instructions for
						establishing the evaluated configuration use only those key wrap functions selected
						in the ST. If multiple key access modes are supported, the evaluator shall examine
						the guidance documentation to determine that the method of choosing a specific
						mode/key size by the end user is described.<h:p/>
					</Guidance>
					<KMD>
						The evaluator shall examine the KMD to ensure that it describes when the key
						wrapping occurs, that the KMD description is consistent with the description in the
						TSS, and that for all keys that are wrapped the TOE uses a method as described in
						the cPP table. No uncertainty should be left over which is the wrapping key and the
						key to be wrapped and where the wrapping key potentially comes from i.e. is
						derived from.<h:p/>
						If “AES-GCM” or “AES-CCM” is used the evaluator shall examine the KMD to
						ensure that it describes how the IV is generated and that the same IV is never reused
						to encrypt different plaintext pairs under the same key. Moreover in the case of
						GCM, he must ensure that, at each invocation of GCM, the length of the plaintext
						is at most (2^32)-2 blocks.<h:p/>
					</KMD>
					<Tests>
						Refer to FCS_COP.1/SKC for the required testing for each symmetric key wrapping
						method selected from the table and to FCS_COP.1/KAT for the required testing for
						each asymmetric key wrapping method selected from the table. Each distinct
						implementation shall be tested separately.<h:p/>
						If the implementation of the key encryption operation is the same implementation
						tested under FCS_COP.1/SKC or FCS_COP.1/KAT, and it has been tested with the
						same key lengths and modes, then no further testing is required. If key encryption
						uses a different implementation, (where “different implementation” includes the use
						of different key lengths or modes), then the evaluator shall additionally test the key
						encryption implementation using the corresponding tests specified for
						FCS_COP.1/SKC or FCS_COP.1/KAT.<h:p/>
					</Tests>
				</aactivity>
			</f-element>
		</f-component>

	<f-component cc-id="fcs_cop.1" iteration="PBKDF" name="Cryptographic Operation (Password-Based Key Derivation Functions)" 
		status="optional">
		<f-element id="fcs-cop-1e1-pbkdf">
			<title>The TSF shall perform [<h:i>password-based key derivation functions</h:i>] in
				accordance with a specified cryptographic algorithm [<h:i>HMAC-</h:i>
				<selectables>
					<selectable>SHA-256</selectable>
					<selectable>SHA-384</selectable>
					<selectable>SHA-512</selectable>
				</selectables>], with <assignable>integer number greater than or equal to 1000</assignable>
				iterations, and output cryptographic key sizes 
				<selectables>
					<selectable>128</selectable>
					<selectable>192</selectable>
					<selectable>256</selectable>
				</selectables>bits that meet the following standard: [<h:i>NIST SP 800-132</h:i>].
			</title>
			<note role="application">
				The ST must condition a password into a string of bits prior to using it as input to algorithms that
				form SKs and KEKs. The ST can perform conditioning using one of the identified hash functions
				or the process described in NIST SP 800-132; the ST author selects the method used. NIST SP
				800-132 requires the use of a pseudo-random function (PRF) consisting of HMAC with an
				approved hash function.<h:p/>
				Appendix A of NIST SP 800-132 recommends setting the iteration count in order to increase the
				computation needed to derive a key from a password and, therefore, increase the workload of
				performing a dictionary attack.<h:p/>
				The TOE must claim this requirement if it claims FCS_CKM.1/SK and selects an algorithm in the
				PBK row or claims FCS_CKM_EXT.5 and selects at least one of KeyDrv4, KeyDrv5, or KeyDrv6
				AND uses password-based key derivation to create at least one of the inputs.<h:p/>
			</note>
			<aactivity>
				<TSS>
					The evaluator shall review the TSS to verify that it contains a description of the
					PBKDF. The evaluator shall also confirm the ST supports the selected hash function
					itself. The evaluator shall confirm that the TSS contains a description of how the
					TOE ensures that the output of the PBKDF is at least the same length as that
					specified in FCS_CKM.1/SK and for the KeyDrv4, KeyDrv5, or KeyDrv6 in
					FCS_CKM_EXT.5.<h:p/>
					If the ST performs additional conditioning, whitening, or manipulation of the
					password or passphrase before applying the PBKDF, or to the output of the PBKDF,
					the evaluator shall ensure that the TSS describes the actions and provides assurance
					that the TSF does not negatively impact the entropy of the PBKDF output.<h:p/>
					If any manipulation of the key is performed in forming the submask that will be
					used to form the KEK, that process shall be described in the TSS.
				</TSS>
				<Guidance>
					There are no AGD evaluation activities for this component.
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>
				<Tests>
					No explicit testing of the formation of the submask from the input password is
					required.<h:p/>
					For the NIST SP 800-132-based conditioning of the passphrase, the required
					evaluation activities will be performed when doing the evaluation activities for the
					appropriate requirements (FCS_COP.1/HMAC).<h:p/>
					The evaluator shall verify that the iteration count for PBKDFs performed by the
					TOE comply with NIST SP 800-132 by ensuring that the TSS contains a description
					of the estimated time required to derive key material from passwords and how the
					TOE increases the computation time for password-based key derivation (including
					but not limited to increasing the iteration count).
				</Tests>
			</aactivity>
		</f-element>
	</f-component>		  


 	<f-component cc-id="fcs_cop.1" iteration="SigGen" name="Cryptographic Operation (Signature Generation)" status="optional">
		<f-element id="fcs-cop-1e1-siggen">
			<title>
				The TSF shall perform [<h:i>digital signature generation</h:i>] using the supported methods 
				for signature generation defined in the following rows of <xref to="fcs-cop-siggen-sels"/>
				<selectables>
					<selectable id="sel=fcs-cop-siggen-1">SigGen1</selectable>
					<selectable id="sel=fcs-cop-siggen-2">SigGen2</selectable>
					<selectable id="sel=fcs-cop-siggen-3">SigGen3</selectable>
					<selectable id="sel=fcs-cop-siggen-4">SigGen4</selectable>
					<selectable id="sel=fcs-cop-siggen-5">SigGen5</selectable>
				</selectables>.<h:p/>
				
				<h:b><ctr ctr-type='Table' id="fcs-cop-siggen-sels">: Supported Methods for Signature Generation Operation</ctr></h:b><h:br/>	
				<h:table>
					<h:tr class="header"><h:td>Identifier</h:td><h:td>Cryptographic Algorithm</h:td>
					<h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>
					
					<h:tr><depends on-sel="sel=fcs-cop-siggen-1"/>
					<h:td>SigGen1</h:td>
					<h:td>RSASSA-PKCS1-v1_5 using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						<selectables>
							<selectable>RFC 8017</selectable>
							<selectable>PKCS #1 v2.2 (Section 8.2)</selectable>
							<selectable>FIPS186-4, (Section 5.5)</selectable>
						</selectables>(RSASSA-PKCS1-v1_5)<h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel=fcs-cop-siggen-2"/>
					<h:td>SigGen2</h:td>
					<h:td>Digital signature scheme 2 using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						ISO9796-2, (Clause 9) (Digital signature scheme 2)<h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel=fcs-cop-siggen-3"/>
					<h:td>SigGen3</h:td>
					<h:td>Digital signature scheme 3 using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						ISO9796-2, (Clause 10) (Digital signature scheme 3)<h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel=fcs-cop-siggen-4"/>
					<h:td>SigGen4</h:td>
					<h:td>RSASSA-PSS using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						[RFC8017, PKCS#1v2.2 (Section 8.1)] (RSASSAPSS)<h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel=fcs-cop-siggen-5"/>
					<h:td>SigGen5</h:td>
					<h:td>ECDSA on 
						<selectables>
							<selectable>brainpoolP256r1</selectable>
							<selectable>brainpoolP384r1</selectable>
							<selectable>brainpoolP512r1</selectable>
							<selectable>NIST P-256</selectable>
							<selectable>NIST P-384</selectable>
							<selectable>NIST P-521</selectable>
						</selectables> using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						<selectables linebreak="yes">
							<selectable>
								<selectables>
									<selectable>ISO14888-3</selectable>
									<selectable>FIPS186-4 (Section 6)</selectable>
								</selectables>(EDCSA)</selectable>
							<selectable>RFC5639 (Section 3)(Brainpool Curves)</selectable>
							<selectable>FIPS186-4 (Appendix D.1.2) (NIST Curves)</selectable>
						</selectables><h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>
				</h:table>
			</title>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS to ensure that all signature generation
					functions use the approved algorithms and key sizes.
				</TSS>
				<Guidance>
					There are no AGD evaluation activities for this component.
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>
				<Tests>
					The following tests require the developer to provide access to a test platform that
					provides the evaluator with tools that are typically not found on factory products.<h:p/>
					Each section below contains tests the evaluators must perform for each selected
					digital signature scheme. Based on the assignments and selections in the
					requirement, the evaluators choose the specific activities that correspond to those
					selections.<h:p/>
					The following tests require the developer to provide access to a test platform that
					provides the evaluator with tools that are not found on the TOE in its evaluated
					configuration.<h:p/>
					<h:b>If SigGen1: RSASSA-PKCS1-v1_5or SigGen4: RSASSA-PSS is claimed:</h:b><h:p/>
					The below test is derived from The 186-4 RSA Validation System (RSA2VS).
					Updated 8 July 2014, Section 6.3, from the National Institute of Standards and
					Technology.<h:p/>
					To test the implementation of RSA signature generation the evaluator uses the
					system under test to generate signatures for 10 messages for each combination of
					modulus size and SHA algorithm. The evaluator then uses a known-good
					implementation and the associated public keys to verify the signatures.<h:p/>
					<h:b>If SigGen2: Digital Signature Scheme 2 (DSS2) or SigGen3: Digital Signature
					Scheme 3 (DSS3):</h:b><h:p/>
					To test the implementation of DSS2/3 signature generation the evaluator uses the
					system under test to generate signatures for 10 messages for each combination of
					SHA algorithm, hash size and key size. The evaluator them uses a known-good
					implementation and the associated public keys to verify the signatures.<h:p/>
					<h:b>If SigGen5: ECDSA is claimed:</h:b><h:p/>
					The below test is derived from The FIPS 186-4 Elliptic Curve Digital Signature
					Algorithm Validation System (ECDSA2VS). Updated 18 March 2014, Section 6.4,
					from the National Institute of Standards and Technology.<h:p/>
					To test the implementation of ECDSA signature generation the evaluator uses the
					system under test to generate signatures for 10 messages for each combination of
					curve, SHA algorithm, hash size, and key size. The evaluator then uses a known-good 
					implementation and the associated public keys to verify the signatures.<h:p/>
				</Tests>
			</aactivity>
		</f-element>
	</f-component>
 
 
		<!-- FCS_COP.1/SigVer Cryptographic Operation (Signature Verification) --> 
		<f-component cc-id="fcs_cop.1" iteration="SigVer" name="Cryptographic Operation (Signature Verification)" status="sel-based">
			<selection-depends req="fpt-tud-ext-1e1" ids="sel-tud-update"/>
			<f-element id="fcs-cop-1e1-sigver">
				<title><refinement>Refinement:</refinement> The TSF shall perform  
				The TSF shall perform [<h:i>digital signature verification</h:i>] using the supported methods 
				for signature verification defined in the following rows of <xref to="fcs-cop-sigver-sels"/>
				<selectables>
					<selectable id="sel-fcs-cop-sigver-1">SigVer1</selectable>
					<selectable id="sel-fcs-cop-sigver-2">SigVer2</selectable>
					<selectable id="sel-fcs-cop-sigver-3">SigVer3</selectable>
					<selectable id="sel-fcs-cop-sigver-4">SigVer4</selectable>
					<selectable id="sel-fcs-cop-sigver-5">SigVer5</selectable>
				</selectables>.<h:p/>
				
				<h:b><ctr ctr-type='Table' id="fcs-cop-sigver-sels">: Supported Methods for Signature Verification Operation</ctr></h:b><h:br/>	
				<h:table>
					<h:tr class="header"><h:td>Identifier</h:td><h:td>Cryptographic Algorithm</h:td>
					<h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>
					
					<h:tr><depends on-sel="sel-fcs-cop-sigver-1"/>
					<h:td>SigVer1</h:td>
					<h:td>RSASSA-PKCS1-v1_5 using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						<selectables>
							<selectable>RFC 8017</selectable>
							<selectable>PKCS #1 v2.2 (Section 8.2)</selectable>
							<selectable>FIPS186-4, (Section 5.5)</selectable>
						</selectables>(RSASSA-PKCS1-v1_5)<h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-sigver-2"/>
					<h:td>SigVer2</h:td>
					<h:td>Digital signature scheme 2 using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						ISO9796-2, (Clause 9) (Digital signature scheme 2)<h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-sigver-3"/>
					<h:td>SigVer3</h:td>
					<h:td>Digital signature scheme 3 using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						ISO9796-2, (Clause 10) (Digital signature scheme 3)<h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-sigver-4"/>
					<h:td>SigVer4</h:td>
					<h:td>RSASSA-PSS using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						[RFC8017, PKCS#1v2.2 (Section 8.1)] (RSASSAPSS)<h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-sigver-5"/>
					<h:td>SigVer5</h:td>
					<h:td>ECDSA on 
						<selectables>
							<selectable>brainpoolP256r1</selectable>
							<selectable>brainpoolP384r1</selectable>
							<selectable>brainpoolP512r1</selectable>
							<selectable>NIST P-256</selectable>
							<selectable>NIST P-384</selectable>
							<selectable>NIST P-521</selectable>
						</selectables> using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						<selectables linebreak="yes">
							<selectable>
								<selectables>
									<selectable>ISO14888-3</selectable>
									<selectable>FIPS186-4 (Section 6)</selectable>
								</selectables>(EDCSA)</selectable>
							<selectable>RFC5639 (Section 3)(Brainpool Curves)</selectable>
							<selectable>FIPS186-4 (Appendix D.1.2) (NIST Curves)</selectable>
						</selectables><h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>
				</h:table>
				</title>
				<note role="application">
					The ST author should choose the algorithm implemented to perform vertification of digital signatures. 
					if more than one algorithm is available, this requirement should be iterated to specify the functionality. 
					For the algorithm chosen, the ST author should make the appropriate assignments/selections to specify the 
					parameters that are implemented for that algorithm. In particular, if ECDSA is selected as one of the signature
					algorithms, the key size specified must match the selection for the curve used in the algorithm.<h:p/>
					For elliptic curve-based schemes, the key size refers to the binary logarithm (log2) of the order of the
					base point. As the preferred approach for digital signatures, elliptic curves will be required after all the
					necessary standards and other supporting information are fully established.<h:p/>
					If cryptographic signature vertification services are provided to the TOE or to tenant software by a local DSC, 
					then the ST should include an instance of this SFR with instance identifier "(DSC)." 
				</note>
				<aactivity>
				<TSS>
					The evaluator shall check the TSS to ensure that it describes the overall flow of the
					signature verification. This should at least include identification of the format and
					general location (e.g., "firmware on the hard drive device" rather than “memory
					location 0x00007A4B") of the data to be used in verifying the digital signature; how
					the data received from the operational environment are brought onto the device; and
					any processing that is performed that is not part of the digital signature algorithm
					(for instance, checking of certificate revocation lists).
				</TSS>
				<Guidance>
					There are no AGD evaluation activities for this component.
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>
				<Tests>
					The following tests require the developer to provide access to a test platform that
					provides the evaluator with tools that are typically not found on factory products.<h:p/>
					Each section below contains tests the evaluators must perform for each selected
					digital signature scheme. Based on the assignments and selections in the
					requirement, the evaluators choose the specific activities that correspond to those
					selections.<h:p/>
					The following tests require the developer to provide access to a test platform that
					provides the evaluator with tools that are not found on the TOE in its evaluated
					configuration.<h:p/>
					<h:b><h:i>SigVer1: RSASSA-PKCS1-v1_5 and SigVer4: RSASSA-PSS</h:i></h:b><h:p/>
					These tests are derived from The 186-4 RSA Validation System (RSA2VS),
					updated 8 Jul 2014, Section 6.4.<h:p/>
					The FIPS 186-4 RSA Signature Verification Test tests the ability of the TSF to
					recognize valid and invalid signatures. The evaluator shall provide a modulus and
					three associated key pairs (d, e) for each combination of selected SHA algorithm,
					modulus size and hash size. Each private key d is used to sign six pseudorandom
					messages each of 1024 bits. For five of the six messages, the public key (e),
					message, IR format, padding, or signature is altered so that signature verification
					should fail. The test passes only if all the signatures made using unaltered
					parameters result in successful signature verification, and all the signatures made
					using altered parameters result in unsuccessful signature verification.<h:p/>
					<h:b><h:i>SigVer5: ECDSA on NIST and Brainpool Curves</h:i></h:b><h:p/>
					These tests are derived from The FIPS 186-4 Elliptic Curve Digital Signature
					Algorithm Validation System (ECDSA2VS), updated 18 Mar 2014, Section 6.5.<h:p/>
					The FIPS 186-4 ECC Signature Verification Test tests the ability of the TSF to
					recognize valid and invalid signatures. The evaluator shall provide a modulus and
					associated key pair (x, y) for each combination of selected curve, SHA algorithm,
					modulus size, and hash size. Each private key (x) is used to sign 15 pseudorandom 
					messages of 1024 bits. For eight of the fifteen messages, the message, IR format,
					padding, or signature is altered so that signature verification should fail. The test
					passes only if all the signatures made using unaltered parameters result in successful
					signature verification, and all the signatures made using altered parameters result in
					unsuccessful signature verification.<h:p/>
					<h:b><h:i>SigVer2: Digital Signature Scheme 2</h:i></h:b><h:p/>
					The following or equivalent steps shall be taken to test the TSF.<h:p/>
					For each supported modulus size, underlying hash algorithm, and length of the
					trailer field (1- or 2-byte), the evaluator shall generate NT sets of recoverable
					message (M1), non-recoverable message (M2), salt, public key and signature (<h:i>&#931;</h:i>).<h:p/>
					<h:ol type="1">
						<h:li><h:i>N<h:sub>T</h:sub></h:i> shall be greater than or equal to 20.</h:li>
						<h:li>The length of salts shall be selected from its supported length range of salt.
							The typical length of salt is equal to the output block length of underlying
							hash algorithm (see 9.2.2 of ISO/IEC 9796-2:2010).</h:li>
						<h:li>The length of recoverable messages should be selected by considering
							modulus size, output block length of underlying hash algorithm, and length
							of salt (<h:i>L<h:sub>S</h:sub></h:i>). As described in Annex D of ISO/IEC 9796-2:2010, it is desirable
							to maximise the length of recoverable message. The following table shows
							the maximum bit-length of recoverable message that is divisible by 512, for
							some combinations of modulus size, underlying hash algorithm, and length
							of salt.
							<h:table class="classic" style="width:50%">
								<h:tr class="header"><h:td>Maximum length of recoverable message divisible by 512 (bits)</h:td>
								<h:td>Modulus size (bits)</h:td>
								<h:td>Underlying hash algorithm (bits)</h:td>
								<h:td>Length of salt L<h:sub>S</h:sub> (bits)</h:td></h:tr>
					
								<h:tr><h:td>1536</h:td><h:td rowspan="5">2048</h:td><h:td rowspan="2">SHA-256</h:td><h:td>128</h:td></h:tr>
								<h:tr><h:td>1024</h:td><h:td>256</h:td></h:tr>
								<h:tr><h:td>1024</h:td><h:td rowspan="3">SHA-512</h:td><h:td>128</h:td></h:tr>
								<h:tr><h:td>1024</h:td><h:td>256</h:td></h:tr>
								<h:tr><h:td>512</h:td><h:td>512</h:td></h:tr>
								<h:tr><h:td>2560</h:td><h:td rowspan="5">3072</h:td><h:td rowspan="2">SHA-256</h:td><h:td>128</h:td></h:tr>
								<h:tr><h:td>2048</h:td><h:td>256</h:td></h:tr>
								<h:tr><h:td>2048</h:td><h:td rowspan="3">SHA-512</h:td><h:td>128</h:td></h:tr>
								<h:tr><h:td>2048</h:td><h:td>256</h:td></h:tr>
								<h:tr><h:td>1536</h:td><h:td>512</h:td></h:tr>
								<h:tr colspan="4">None that 2-byte trailer field is assumed in calculating the maximum length of recoverable message</h:tr>
							</h:table></h:li>
						<h:li>The length of non-recoverable messages should be selected by considering
							the underlying hash algorithm and usages. If the TSF is used for verifying
							the authenticity of software/firmware updates, the length of non-recoverable
							messages should be selected greater than or equal to 2048-bit. With this
							length range, it means that the underlying hash algorithm is also tested for
							two or more input blocks.</h:li>
						<h:li>The evaluator shall select approximately one half of <h:i>N<h:sub>T</h:sub></h:i> sets and shall alter
							one of the values (non-recoverable message, public key exponent or
							signature) in the sets. In altering public key exponent, the evaluator shall
							alter the public key exponent while keeping the exponent odd. In altering
							signatures, the following ways should be considered:
							<h:ol type="a">
								<h:li>Altering a signature just by replacing a bit in the bit-string representation
									of the signature</h:li>
								<h:li>Altering a signature so that the trailer in the message representative
									cannot be interpreted. This can be achieved by following ways:<h:ul>
									<h:li>Setting the rightmost four bits of the message representative to the
										values other than '1100'.</h:li>
									<h:li>In the case when 1-byte trailer is used, setting the rightmost byte of
										the message representative to the values other than '0xbc', while
										keeping the rightmost four bits to '1100'.</h:li>
									<h:li>In the case when 2-byte trailer is used, setting the rightmost byte of
										the message representative to the values other than '0xcc', while
										keeping the rightmost four bits to '1100'.</h:li></h:ul></h:li>
								<h:li>In the case when 2-byte trailer is used, altering a signature so that the
									hash algorithm identifier in the trailer (i.e. the left most byte of the
									trailer) does not correspond to hash algorithms identified in the SFR.
									The hash algorithm identifiers are 0x34 for SHA-256 (see Clause 10 of
									ISO/IEC 10118-3:2018), and 0x35 for SHA-512 (see Clause 11 of
									ISO/IEC 10118-3:2018).</h:li>
								<h:li>Let <h:i>L<h:sub>S</h:sub></h:i> be the length of salt, altering a signature so that the intermediate
									bit string <h:i>D</h:i> in the message representative is set to all zeroes except for
									the rightmost <h:i>L<h:sub>S</h:sub></h:i> bits of <h:i>D</h:i>.</h:li>
								<h:li> (non-conformant signature length) Altering a signature so that the length
									of signature <h:i>&#931;</h:i> is changed to modulus size and the most significant bit of
									signature <h:i>&#931;</h:i> is set equal to '1'.</h:li>
								<h:li>(non-conformant signature) Altering a signature so that the integer
									converted from signature <h:i>&#931;</h:i> is greater than modulus <h:i>n</h:i>.</h:li>
							</h:ol>
						</h:li>
					</h:ol>
					The evaluator shall supply the NT sets to the TSF and obtain in response a set of
					NT Verification-Success or Verification-Fail values. When the VerificationSuccess is 
					obtained, the evaluator shall also obtain recovered message (M 1*).<h:p/>
					The evaluator shall verify that Verification-Success results correspond to the
					unaltered sets and Verification-Fail results correspond to the altered sets.<h:p/>
					For each recovered message, the evaluator shall compare the recovered message
					(M1*) with the corresponding recoverable message (M 1) in the unaltered sets.<h:p/>
					The test passes only if all the signatures made using unaltered sets result in
					Verification-Success, each recovered message (M 1*) is equal to corresponding M 
					1 in the unaltered sets, and all the signatures made using altered sets result in
					Verification-Fail.<h:p/>
					<h:b><h:i>SigVer3: Digital Signature Scheme 3</h:i></h:b><h:p/>
					The evaluator shall perform the test described in SigVer2: Digital Signature Scheme
					2 while using a fixed salt for NT sets.<h:p/>
				</Tests>
				</aactivity>
			</f-element>
			<audit-event/>
		</f-component>	
		
		
	<f-component cc-id="fcs_cop.1" iteration="SKC" name="Cryptographic Operation (Symmetric Key Cryptography)" status="optional">
		<f-element id="fcs-cop-1e1-skc">
			<title>
				The TSF shall perform [<h:i>data encryption/decryption</h:i>] using the supported symmetric-key cryptography
				methods defined in the following rows of <xref to="fcs-cop-skc-sels"/>
				<selectables>
					<selectable id="sel-fcs-cop-skc-aes-ccm">AES-CCM</selectable>
					<selectable id="sel-fcs-cop-skc-aes-gcm">AES-GCM</selectable>
					<selectable id="sel-fcs-cop-skc-aes-cbc">AES-CBC</selectable>
					<selectable id="sel-fcs-cop-skc-aes-ctr">AES-CTR</selectable>
					<selectable id="sel-fcs-cop-skc-xts-aes">XTS-AES</selectable>
					<selectable id="sel-fcs-cop-skc-aes-kwp">AES-KWP</selectable>
					<selectable id="sel-fcs-cop-skc-aes-kw">AES-KW</selectable>
					<selectable id="sel-fcs-cop-skc-cam-cbs">CAM-CBC</selectable>
					<selectable id="sel-fcs-cop-skc-cam-ccm">CAM-CCM</selectable>
					<selectable id="sel-fcs-cop-skc-cam-gcm">CAM-GCM</selectable>
					<selectable id="sel-fcs-cop-skc-xts-cam">XTS-CAM</selectable>
				</selectables>.<h:p/>
				<h:b><ctr ctr-type='Table' id="fcs-cop-skc-sels">: Supported Methods for Symmetric Key Cryptography Operation</ctr></h:b><h:br/>	
				<h:table>
					<h:tr class="header"><h:td>Identifier</h:td><h:td>Cryptographic Algorithm</h:td>
					<h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>
					
					<h:tr><depends on-sel="sel=fcs-cop-skc-aes-ccm"/>
					<h:td>AES-CCM</h:td>
					<h:td>AES in CCM mode with unpredictable, nonrepeating nonce, minimum size of 64 bits</h:td>
					<h:td><selectables>
						<selectable>128 bits</selectable>
						<selectable>192 bits</selectable>
						<selectable>256 bits</selectable>
					</selectables></h:td>
					<h:td>
						ISO 18033-3 (AES)<h:p/>
						ISO 19772, Clause 8 (CCM)<h:p/>
						NIST SP800-38C (CCM)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel=fcs-cop-skc-aes-gcm"/>
					<h:td>AES-GCM</h:td>
					<h:td>AES in GCM mode with non-repeating IVs; IV length must be equal to 96
						bits; the deterministic IV construction method (SP800-38D, Section 8.2.1) must
						be used; the MAC length t must be one of the values 
						<selectables>
							<selectable>96</selectable>
							<selectable>104</selectable>
							<selectable>112</selectable>
							<selectable>120</selectable>
							<selectable>128</selectable>
						</selectables></h:td>
					<h:td><selectables>
							<selectable>128 bits</selectable>
							<selectable>192 bits</selectable>
							<selectable>256 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (AES)<h:p/>
						ISO 19772, Clause 11 (GCM)<h:p/>
						NIST SP800-38D (GCM)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel=fcs-cop-skc-aes-cbc"/>
					<h:td>AES-CBC</h:td>
					<h:td>AES in CBC mode with non-repeating and unpredictable IVs</h:td>
					<h:td><selectables>
							<selectable>128 bits</selectable>
							<selectable>192 bits</selectable>
							<selectable>256 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (AES)<h:p/>
						ISO 10116 (CBC)<h:p/>
						NIST SP800-38A (CBC)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel=fcs-cop-skc-aes-ctr"/>
					<h:td>AES-CTR</h:td>
					<h:td>AES in counter mode with a non-repeating initial counter and with no
						repeated use of counter values across multiple messages with the same
						secret key</h:td>
					<h:td><selectables>
							<selectable>128 bits</selectable>
							<selectable>192 bits</selectable>
							<selectable>256 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (AES)<h:p/>
						ISO 10116 (CTR)<h:p/>
						NIST SP800-38A (CTR)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel=fcs-cop-skc-xts-aes"/>
					<h:td>XTS-AES</h:td>
					<h:td>AES in XTS mode with unique 
						<selectables>
							<selectable>consecutive non-negative integers starting at an
								arbitrary non-negative integer</selectable>
							<selectable>data unit sequence numbers</selectable>
						</selectables> tweak values</h:td>
					<h:td><selectables>
							<selectable>256 bits</selectable>
							<selectable>512 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (AES)<h:p/>
						<selectables>
							<selectable>IEEE 1619</selectable>
							<selectable>NIST SP800-38E</selectable>
						</selectables>(XTS)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel=fcs-cop-skc-aes-kwp"/>
					<h:td>AES-KWP</h:td>
					<h:td>KWP based on AES </h:td>
					<h:td><selectables>
							<selectable>128 bits</selectable>
							<selectable>192 bits</selectable>
							<selectable>256 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (AES)<h:p/>
						NIST SP 800-38F, sec. 6.3 (KWP)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel=fcs-cop-skc-aes-kw"/>
					<h:td>AES-KW</h:td>
					<h:td>KW based on AES </h:td>
					<h:td><selectables>
							<selectable>128 bits</selectable>
							<selectable>192 bits</selectable>
							<selectable>256 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (AES)<h:p/>
						NIST SP 800-38F, sec. 6.2 (KW)<h:p/>
						ISO/IEC 19772, clause 7 (key wrap)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel=fcs-cop-skc-cam-cbc"/>
					<h:td>CAM-CBC</h:td>
					<h:td>Camellia in CBC mode with non-repeating and unpredictable IVs</h:td>
					<h:td><selectables>
							<selectable>128 bits</selectable>
							<selectable>256 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (Camellia)<h:p/>
						ISO 10116 (CBC)<h:p/></h:td>
					</h:tr>

					<h:tr><depends on-sel="sel=fcs-cop-skc-cam-ccm"/>
					<h:td>CAM-CCM</h:td>
					<h:td>Camellia in CCM mode with unpredictable, nonrepeating nonce, minimum size of 64 bits</h:td>
					<h:td><selectables>
						<selectable>128 bits</selectable>
						<selectable>256 bits</selectable>
					</selectables></h:td>
					<h:td>
						ISO 18033-3 (Camellia)<h:p/>
						ISO 19772, Clause 8 (CCM)<h:p/>
						NIST SP800-38C (CCM)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel=fcs-cop-skc-cam-gcm"/>
					<h:td>CAM-GCM</h:td>
					<h:td>Camellia in GCM mode with non-repeating IVs; IV length must be equal to 96
						bits; the deterministic IV construction method (SP800-38D, Section 8.2.1) must
						be used; the MAC length t must be one of the values 
						<selectables>
							<selectable>96</selectable>
							<selectable>104</selectable>
							<selectable>112</selectable>
							<selectable>120</selectable>
							<selectable>128</selectable>
						</selectables></h:td>
					<h:td><selectables>
							<selectable>128 bits</selectable>
							<selectable>256 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (Camellia)<h:p/>
						ISO 19772, Clause 11 (GCM)<h:p/>
						NIST SP800-38D (GCM)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel=fcs-cop-skc-xts-cam"/>
					<h:td>XTS-CAM</h:td>
					<h:td>Camellia in XTS mode with unique 
						<selectables>
							<selectable>consecutive non-negative integers starting at an
								arbitrary non-negative integer</selectable>
							<selectable>data unit sequence numbers</selectable>
						</selectables> tweak values</h:td>
					<h:td><selectables>
							<selectable>256 bits</selectable>
							<selectable>512 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (Camellia)<h:p/>
						<selectables>
							<selectable>IEEE 1619</selectable>
							<selectable>NIST SP800-38E</selectable>
						</selectables>(XTS)</h:td>
					</h:tr>
				</h:table>
			</title>
			<aactivity>
				<TSS>
					The evaluator shall check that the TSS includes a description of encryption
					functions used for symmetric key encryption. The evaluator should check that this
					description of the selected encryption function includes the key sizes and modes of
					operations as specified in the cPP table 9 “Supported Methods for Symmetric Key
					Cryptography Operation.”<h:p/>
					The evaluator shall check that the TSS describes the means by which the TOE
					satisfies constraints on algorithm parameters included in the selections made for
					‘cryptographic algorithm’ and ‘list of standards’.<h:p/> 
				</TSS>
				<Guidance>
					If the product supports multiple modes, the evaluator shall examine the vendor’s
					documentation to determine that the method of choosing a specific mode/key size
					by the end user is described.
				</Guidance>
				<KMD>
					The evaluator shall examine the KMD to ensure that the points at which symmetric
					key encryption and decryption occurs are described, and that the complete data path
					for symmetric key encryption is described. The evaluator checks that this
					description is consistent with the relevant parts of the TSS.<h:p/>
					Assessment of the complete data path for symmetric key encryption includes
					confirming that the KMD describes the data flow from the device’s host interface
					to the device’s non-volatile memory storing the data, and gives information
					enabling the user data datapath to be distinguished from those situations in which
					data bypasses the data encryption engine (e.g. read-write operations to an
					unencrypted Master Boot Record area). The evaluator shall ensure that the
					documentation of the data path is detailed enough that it thoroughly describes the
					parts of the TOE that the data passes through (e.g. different memory types,
					processors and co-processors), its encryption state (i.e. encrypted or unencrypted)
					in each part, and any places where the data is stored. For example, any caching or
					buffering of the data should be identified and distinguished from the final
					destination in non-volatile memory (the latter represents the location from which
					the host will expect to retrieve the data in future).<h:p/>
					If support for AES-CTR is claimed and the counter value source is internal to the
					TOE, the evaluator shall verify that the KMD describes the internal counter
					mechanism used to ensure that it provides unique counter block values.<h:p/>
				</KMD>
				<Tests>
					The following tests require the developer to provide access to a test platform that
					provides the evaluator with tools that are typically not found on factory products.<h:p/>
					The following tests are conditional based upon the selections made in the SFR. The
					evaluator shall perform the following test or witness respective tests executed by
					the developer. The tests must be executed on a platform that is as close as practically
					possible to the operational platform (but which may be instrumented in terms of,
					for example, use of a debug mode). Where the test is not carried out on the TOE
					itself, the test platform shall be identified and the differences between test
					environment and TOE execution environment shall be described.<h:p/>
					Preconditions for testing:<h:ul>
					<h:li>Specification of keys as input parameter to the function to be tested</h:li>
					<h:li>specification of required input parameters such as modes</h:li>
					<h:li>Specification of user data (plaintext)</h:li>
					<h:li>Tapping of encrypted user data (ciphertext) directly in the non-volatile memory</h:li></h:ul>
					<h:p/>
					<h:b>AES-CBC:</h:b><h:br/>
					For the AES-CBC tests described below, the plaintext, ciphertext, and IV values
					shall consist of 128-bit blocks. To determine correctness, the evaluator shall
					compare the resulting values to those obtained by submitting the same inputs to a
					known-good implementation.<h:p/>
					These tests are intended to be equivalent to those described in NIST’s AES Algorithm Validation Suite (AESAVS)
					(<h:a href="http://csrc.nist.gov/groups/STM/cavp/documents/aes/AESAVS.pdf">
					http://csrc.nist.gov/groups/STM/cavp/documents/aes/AESAVS.pdf</h:a>). It is not
					recommended that evaluators use values obtained from static sources such as the
					example NIST’s AES Known Answer Test Values from the AESAVS document,
					or use values not generated expressly to exercise the AES-CBC implementation.<h:p/>
					<h:b><h:i>AES-CBC Known Answer Tests</h:i></h:b><h:p/>
					<h:u>KAT-1 (GFSBox):</h:u> To test the encrypt functionality of AES-CBC, the evaluator
					shall supply a set of five different plaintext values for each selected key size and
					obtain the ciphertext value that results from AES-CBC encryption of the given
					plaintext using a key value of all zeros and an IV of all zeros.<h:p/>
					To test the decrypt functionality of AES-CBC, the evaluator shall supply a set of
					five different ciphertext values for each selected key size and obtain the plaintext
					value that results from AES-CBC decryption of the given ciphertext using a key
					value of all zeros and an IV of all zeros.<h:p/>
					<h:u>KAT-2 (KeySBox):</h:u> To test the encrypt functionality of AES-CBC, the evaluator
					shall supply a set of five different key values for each selected key size and obtain
					the ciphertext value that results from AES-CBC encryption of an all-zeros plaintext
					using the given key value and an IV of all zeros.<h:p/>
					To test the decrypt functionality of AES-CBC, the evaluator shall supply a set of
					five different key values for each selected key size and obtain the plaintext that
					results from AES-CBC decryption of an all-zeros ciphertext using the given key
					and an IV of all zeros.<h:p/>
					<h:u>KAT-3 (Variable Key):</h:u> To test the encrypt functionality of AES-CBC, the evaluator
					shall supply a set of keys for each selected key size (as described below) and obtain
					the ciphertext value that results from AES encryption of an all-zeros plaintext using
					each key and an IV of all zeros.<h:p/>
					Key i in each set shall have the leftmost i bits set to ones and the remaining bits to
					zeros, for values of i from 1 to the key size. The keys and corresponding ciphertext
					are listed in AESAVS, Appendix E.<h:p/>
					To test the decrypt functionality of AES-CBC, the evaluator shall use the same keys
					as above to decrypt the ciphertext results from above. Each decryption should result
					in an all-zeros plaintext.<h:p/>
					<h:u>KAT-4 (Variable Text):</h:u> To test the encrypt functionality of AES-CBC, for each
					selected key size, the evaluator shall supply a set of 128-bit plaintext values (as 
					described below) and obtain the ciphertext values that result from AES-CBC
					encryption of each plaintext value using a key of each size and IV consisting of all
					zeros.<h:p/>
					Plaintext value i shall have the leftmost i bits set to ones and the remaining bits set
					to zeros, for values of i from 1 to 128. The plaintext values are listed in AESAVS,
					Appendix D.<h:p/>
					To test the decrypt functionality of AES-CBC, for each selected key size, use the
					plaintext values from above as ciphertext input, and AES-CBC decrypt each
					ciphertext value using key of each size consisting of all zeros and an IV of all zeros.<h:p/>
					<h:b><h:i>AES-CBC Multi-Block Message Test</h:i></h:b><h:p/>
					The evaluator shall test the encrypt functionality by encrypting nine i-block
					messages for each selected key size, for 2 &#8804; i &#8804; 10. For each test, the 
					evaluator shall supply a key, an IV, and a plaintext message of length i blocks, and encrypt the
					message using AES-CBC. The resulting ciphertext values shall be compared to the
					results of encrypting the plaintext messages using a known good implementation.<h:p/>
					The evaluator shall test the decrypt functionality by decrypting nine i-block
					messages for each selected key size, for 2 &#8804; i &#8804; 10. For each test, the evaluator shall
					supply a key, an IV, and a ciphertext message of length i blocks, and decrypt the
					message using AES-CBC. The resulting plaintext values shall be compared to the
					results of decrypting the ciphertext messages using a known good implementation.<h:p/>
					<h:b><h:i>AES-CBC Monte Carlo Tests</h:i></h:b><h:p/>
					The evaluator shall test the encrypt functionality for each selected key size using
					100 3-tuples of pseudo-random values for plaintext, IVs, and keys.<h:p/>
					The evaluator shall supply a single 3-tuple of pseudo-random values for each
					selected key size. This 3-tuple of plaintext, IV, and key is provided as input to the
					below algorithm to generate the remaining 99 3-tuples, and to run each 3-tuple
					through 1000 iterations of AES-CBC encryption.<h:p/>
					<h:pre>
						# Input: PT, IV, Key
						Key[0] = Key
						IV[0] = IV
						PT[0] = PT
						for i = 0 to 99 {
							Output Key[i], IV[i], PT[0]
							for j = 0 to 999 {
								if (j == 0) {
									CT[j] = AES-CBC-Encrypt(Key[i], IV[i], PT[j])
									PT[j+1] = IV[i]
								} else {
									CT[j] = AES-CBC-Encrypt(Key[i], PT[j])
									PT[j+1] = CT[j-1]
								}
							}
							Output CT[j]
							If (KeySize == 128) Key[i+1] = Key[i] xor CT[j] 
							If (KeySize == 192) Key[i+1] = Key[i] xor (last 64 bits of CT[j-1] || CT[j])
							If (KeySize == 256) Key[i+1] = Key[i] xor ((CT[j-1] | CT[j])
							IV[i+1] = CT[j]
							PT[0] = CT[j-1]
						}
					</h:pre><h:p/>
					The ciphertext computed in the 1000th iteration (CT[999]) is the result for each of
					the 100 3-tuples for each selected key size. This result shall be compared to the
					result of running 1000 iterations with the same values using a known good
					implementation.<h:p/>
					The evaluator shall test the decrypt functionality using the same test as above,
					exchanging CT and PT, and replacing AES-CBC-Encrypt with AES-CBC-Decrypt.<h:p/>
					<h:b>AES-CCM:</h:b><h:p/>
					These tests are intended to be equivalent to those described in the NIST document,
					“The CCM Validation System (CCMVS),” updated 9 Jan 2012, found at
					<h:a href="http://csrc.nist.gov/groups/STM/cavp/documents/mac/CCMVS.pdf">
					http://csrc.nist.gov/groups/STM/cavp/documents/mac/CCMVS.pdf</h:a>.<h:p/>
					It is not recommended that evaluators use values obtained from static sources such
					as http://csrc.nist.gov/groups/STM/cavp/documents/mac/ccmtestvectors.zip or use
					values not generated expressly to exercise the AES-CCM implementation.<h:p/>
					The evaluator shall test the generation-encryption and decryption-verification
					functionality of AES-CCM for the following input parameter and tag lengths:<h:p/><h:ul>
					<h:li><h:b>Keys:</h:b> All supported and selected key sizes (e.g., 128, 192, or 256 bits).</h:li>
					<h:li><h:b>Associated Data:</h:b> Two or three values for associated data length: The minimum
					(&#8805; 0 bytes) and maximum (&#8804; 32 bytes) supported associated data lengths, and
					2^16 (65536) bytes, if supported.</h:li>
					<h:li><h:b>Payload:</h:b> Two values for payload length: The minimum (&#8805; 0 bytes) and
					maximum (&#8804; 32 bytes) supported payload lengths.</h:li>
					<h:li><h:b>Nonces:</h:b> All supported nonce lengths (e.g., 8, 9, 10, 11, 12, 13) in bytes.</h:li>
					<h:li><h:b>Tag:</h:b> All supported tag lengths (e.g., 4, 6, 8, 10, 12, 14, 16) in bytes.</h:li></h:ul>
					The testing for CCM consists of five tests. To determine correctness in each of the
					below tests, the evaluator shall compare the ciphertext with the result of encryption
					of the same inputs with a known good implementation.<h:p/>
					Variable Associated Data Test: For each supported key size and associated data
					length, and any supported payload length, nonce length, and tag length, the
					evaluator shall supply one key value, one nonce value, and 10 pairs of associated
					data and payload values, and obtain the resulting ciphertext.<h:p/>
					Variable Payload Text: For each supported key size and payload length, and any
					supported associated data length, nonce length, and tag length, the evaluator shall 
					supply one key value, one nonce value, and 10 pairs of associated data and payload
					values, and obtain the resulting ciphertext.<h:p/>
					Variable Nonce Test: For each supported key size and nonce length, and any
					supported associated data length, payload length, and tag length, the evaluator shall
					supply one key value, one nonce value, and 10 pairs of associated data and payload
					values, and obtain the resulting ciphertext.<h:p/>
					Variable Tag Test: For each supported key size and tag length, and any supported
					associated data length, payload length, and nonce length, the evaluator shall supply
					one key value, one nonce value, and 10 pairs of associated data and payload values,
					and obtain the resulting ciphertext.<h:p/>
					Decryption-Verification Process Test: To test the decryption-verification
					functionality of AES-CCM, for each combination of supported associated data
					length, payload length, nonce length, and tag length, the evaluator shall supply a
					key value and 15 sets of input plus ciphertext, and obtain the decrypted payload.
					Ten of the 15 input sets supplied should fail verification and five should pass.<h:p/>
					<h:b>AES-GCM:</h:b>
					These tests are intended to be equivalent to those described in the NIST document,
					“The Galois/Counter Mode (GCM) and GMAC Validation System (GCMVS) with
					the Addition of XPN Validation Testing,” rev. 15 Jun 2016, section 6.2, found at
					<h:a href="http://csrc.nist.gov/groups/STM/cavp/documents/mac/gcmvs.pdf">
					http://csrc.nist.gov/groups/STM/cavp/documents/mac/gcmvs.pdf</h:a>.<h:p/>
					It is not recommended that evaluators use values obtained from static sources such
					as http://csrc.nist.gov/groups/STM/cavp/documents/mac/gcmtestvectors.zip, or use
					values not generated expressly to exercise the AES-GCM implementation.<h:p/>
					The evaluator shall test the authenticated encryption functionality of AES-GCM by
					supplying 15 sets of Key, Plaintext, AAD, IV, and Tag data for every combination
					of the following parameters as selected in the ST and supported by the
					implementation under test:<h:ul>
					<h:li><h:b>Key size in bits:</h:b> Each selected and supported key size (e.g., 128, 192, or
					256 bits).</h:li>
					<h:li><h:b>Plaintext length in bits:</h:b> Up to four values for plaintext length: Two values
					that are non-zero integer multiples of 128, if supported. And two values that
					are non-multiples of 128, if supported.</h:li>
					<h:li><h:b>AAD length in bits:</h:b> Up to five values for AAD length: Zero-length, if
					supported. Two values that are non-zero integer multiples of 128, if
					supported. And two values that are integer non-multiples of 128, if
					supported.</h:li>
					<h:li><h:b>IV length in bits:</h:b> Up to three values for IV length: 96 bits. Minimum and
					maximum supported lengths, if different.</h:li>
					<h:li><h:b>MAC length in bits:</h:b> Each supported length (e.g., 128, 120, 112, 104, 96).</h:li></h:ul>
					To determine correctness, the evaluator shall compare the resulting values to those
					obtained by submitting the same inputs to a known-good implementation.<h:p/>
					The evaluator shall test the authenticated decrypt functionality of AES-GCM by
					supplying 15 Ciphertext-Tag pairs for every combination of the above parameters,
					replacing Plaintext length with Ciphertext length. For each parameter combination
					the evaluator shall introduce an error into either the Ciphertext or the Tag such that
					approximately half of the cases are correct and half the cases contain errors. To
					determine correctness, the evaluator shall compare the resulting pass/fail status and
					Plaintext values to the results obtained by submitting the same inputs to a known-good
					implementation.<h:p/>
					<h:b>AES-CTR:</h:b><h:p/>
					For the AES-CTR tests described below, the plaintext and ciphertext values shall
					consist of 128-bit blocks. To determine correctness, the evaluator shall compare the
					resulting values to those obtained by submitting the same inputs to a known-good
					implementation.<h:p/>
					These tests are intended to be equivalent to those described in NIST’s AES
					Algorithm Validation Suite (AESAVS)
					(<h:a href="http://csrc.nist.gov/groups/STM/cavp/documents/aes/AESAVS.pdf">
					http://csrc.nist.gov/groups/STM/cavp/documents/aes/AESAVS.pdf</h:a>). It is not
					recommended that evaluators use values obtained from static sources such as the
					example NIST’s AES Known Answer Test Values from the AESAVS document,
					or use values not generated expressly to exercise the AES-CTR implementation.<h:p/>
					<h:b><h:i>AES-CTR Known Answer Tests</h:i></h:b><h:p/>
					<h:u>KAT-1 (GFSBox):</h:u> To test the encrypt functionality of AES-CTR, the evaluator
					shall supply a set of five different plaintext values for each selected key size and
					obtain the ciphertext value that results from AES-CTR encryption of the given
					plaintext using a key value of all zeros.<h:p/>
					To test the decrypt functionality of AES-CTR, the evaluator shall supply a set of
					five different ciphertext values for each selected key size and obtain the plaintext
					value that results from AES-CTR decryption of the given ciphertext using a key
					value of all zeros.<h:p/>
					<h:u>KAT-2 (KeySBox):</h:u> To test the encrypt functionality of AES-CTR, the evaluator
					shall supply a set of five different key values for each selected key size and obtain
					the ciphertext value that results from AES-CTR encryption of an all-zeros plaintext
					using the given key value.<h:p/>
					To test the decrypt functionality of AES-CTR, the evaluator shall supply a set of
					five different key values for each selected key size and obtain the plaintext that
					results from AES-CTR decryption of an all-zeros ciphertext using the given key.<h:p/>
					<h:u>KAT-3 (Variable Key):</h:u> To test the encrypt functionality of AES-CTR, the evaluator
					shall supply a set of keys for each selected key size (as described below) and obtain
					the ciphertext value that results from AES encryption of an all-zeros plaintext using
					each key.<h:p/>
					Key i in each set shall have the leftmost i bits set to ones and the remaining bits to
					zeros, for values of i from 1 to the key size. The keys and corresponding ciphertext
					are listed in AESAVS, Appendix E.<h:p/>
					To test the decrypt functionality of AES-CTR, the evaluator shall use the same keys
					as above to decrypt the ciphertext results from above. Each decryption should result
					in an all-zeros plaintext.<h:p/>
					<h:u>KAT-4 (Variable Text):</h:u> To test the encrypt functionality of AES-CTR, for each
					selected key size, the evaluator shall supply a set of 128-bit plaintext values (as
					described below) and obtain the ciphertext values that result from AES-CTR
					encryption of each plaintext value using a key of each size.<h:p/>
					Plaintext value i shall have the leftmost i bits set to ones and the remaining bits set
					to zeros, for values of i from 1 to 128. The plaintext values are listed in AESAVS,
					Appendix D.<h:p/>
					To test the decrypt functionality of AES-CTR, for each selected key size, use the
					plaintext values from above as ciphertext input, and AES-CTR decrypt each
					ciphertext value using key of each size consisting of all zeros.<h:p/>
					<h:b><h:i>AES-CTR Multi-Block Message Test</h:i></h:b><h:p/>
					The evaluator shall test the encrypt functionality by encrypting nine i-block
					messages for each selected key size, for 2 &#8804; i &#8804; 10. For each test, the evaluator shall
					supply a key and a plaintext message of length i blocks, and encrypt the message
					using AES-CTR. The resulting ciphertext values shall be compared to the results of
					encrypting the plaintext messages using a known good implementation.<h:p/>
					The evaluator shall test the decrypt functionality by decrypting nine i-block
					messages for each selected key size, for 2 &#8804; i &#8804; 10. For each test, the evaluator shall
					supply a key and a ciphertext message of length i blocks, and decrypt the message
					using AES-CTR. The resulting plaintext values shall be compared to the results of
					decrypting the ciphertext messages using a known good implementation.<h:p/>
					<h:b><h:i>AES-CTR Monte Carlo Tests</h:i></h:b><h:p/>
					The evaluator shall test the encrypt functionality for each selected key size using
					100 2-tuples of pseudo-random values for plaintext and keys.<h:p/>
					The evaluator shall supply a single 2-tuple of pseudo-random values for each
					selected key size. This 2-tuple of plaintext and key is provided as input to the below
					algorithm to generate the remaining 99 2-tuples, and to run each 2-tuple through
					1000 iterations of AES-CTR encryption.<h:p/>
					<h:pre>
						# Input: PT, Key
						Key[0] = Key
						PT[0] = PT
						for i = 0 to 99 {
							Output Key[i], PT[0]
							for j = 0 to 999 {
								CT[j] = AES-CTR-Encrypt(Key[i], PT[j])
								PT[j+1] = CT[j]
							}
							Output CT[j]
							If (KeySize == 128) Key[i+1] = Key[i] xor CT[j]
							If (KeySize == 192) Key[i+1] = Key[i] xor (last 64 bits of CT[j-1] || CT[j])
							If (KeySize == 256) Key[i+1] = Key[i] xor ((CT[j-1] | CT[j])
							PT[0] = CT[j]
						}
					</h:pre><h:p/>
					The ciphertext computed in the 1000th iteration (CT[999]) is the result for each of
					the 100 2-tuples for each selected key size. This result shall be compared to the
					result of running 1000 iterations with the same values using a known good
					implementation.<h:p/>
					The evaluator shall test the decrypt functionality using the same test as above,
					exchanging CT and PT, and replacing AES-CTR-Encrypt with AES-CTR-Decrypt.
					198 Note additional design considerations for this mode are addressed in the KMD
					requirements.<h:p/>
					<h:b>XTS-AES:</h:b>
					These tests are intended to be equivalent to those described in the NIST document,
					“The XTS-AES Validation System (XTSVS),” updated 5 Sept 2013, found at
					<h:a href="http://csrc.nist.gov/groups/STM/cavp/documents/aes/XTSVS.pdf">
					http://csrc.nist.gov/groups/STM/cavp/documents/aes/XTSVS.pdf</h:a><h:p/>
					It is not recommended that evaluators use values obtained from static sources such
					as the XTS-AES test vectors at
					http://csrc.nist.gov/groups/STM/cavp/documents/aes/XTSTestVectors.zip or use
					values not generated expressly to exercise the XTS-AES implementation.<h:p/>
					The evaluator shall generate test values as follows:<h:p/>
					For each supported key size (256 bit (for AES-128) and 512 bit (for AES-256)
					keys), the evaluator shall provide up to five data lengths:<h:ul>
					<h:li>Two data lengths divisible by the 128-bit block size, If data unit lengths of
						complete block sizes are supported.</h:li>
					<h:li>Two data lengths not divisible by the 128-bit block size, if data unit lengths
						of partial block sizes are supported.</h:li>
					<h:li>The largest data length supported by the implementation, or 2^16 (65536),
						whichever is larger.</h:li></h:ul><h:p/>
					The evaluator shall specify whether the implementation supports tweak values of
					128-bit hexadecimal strings or a data unit sequence numbers, or both.<h:p/>
					For each combination of key size and data length, the evaluator shall provide 100
					sets of input data and obtain the ciphertext that results from XTS-AES encryption.
					If both kinds of tweak values are supported then each type of tweak value shall be
					used in half of every 100 sets of input data, for all combinations of key size and data 
					length. The evaluator shall verify that the resulting ciphertext matches the results
					from submitting the same inputs to a known-good implementation of XTS-AES.<h:p/>
					The evaluator shall test the decrypt functionality of XTS-AES using the same test
					as for encrypt, replacing plaintext values with ciphertext values and XTS-AES
					encrypt with XTS- AES decrypt.<h:p/>
					The evaluator shall check that the full length keys are created by methods that
					ensure that the two halves are different and independent.<h:p/>
					<h:b>AES-KWP:</h:b><h:p/>
					The tests below are derived from “The Key Wrap Validation System (KWVS),
					Updated: June 20, 2014” from the National Institute of Standards and Technology.<h:p/>
					The evaluator shall test the authenticated-encryption functionality of AES-KWP
					(KWP-AE) using the same test as for AES-KW authenticated-encryption with the
					following change in the five plaintext lengths:<h:ul>
					<h:li>Four lengths that are multiples of 8 bits</h:li>
					<h:li>The largest supported length less than or equal to 4096 bits.</h:li></h:ul><h:p/>
					The evaluator shall test the authenticated-decryption (KWP-AD) functionality of
					AES-KWP using the same test as for AES-KWP authenticated-encryption,
					replacing plaintext values with ciphertext values and AES-KWP authenticatedencryption with AES-KWP authenticated-decryption. For the Authenticated
					Decryption test, 20 out of the 100 trials per plaintext length have ciphertext values
					that fail authentication.<h:p/>
					Additionally, the evaluator shall perform the following negative tests:<h:p/>
					<h:b>Test 1: (invalid plaintext length):</h:b><h:p/>
					Determine the valid plaintext lengths of the implementation from the TOE
					specification. Verify that the implementation of KWP-AE in the TOE rejects
					plaintexts of invalid length by testing plaintext of the following lengths: 1) plaintext
					with length greater than 64 semi-blocks, 2) plaintext with bit-length not divisible
					by 8, and 3) plaintext with length 0.<h:p/>
					<h:b>Test 2: (invalid ciphertext length):</h:b>
					Determine the valid ciphertext lengths of the implementation from the TOE
					specification. Verify that the implementation of KWP-AD in the TOE rejects
					ciphertexts of invalid length by testing ciphertext of the following lengths: 1)
					ciphertext with length greater than 65 semi-blocks, 2) ciphertext with bit-length not
					divisible by 64, 3) ciphertext with length 0, and 4) ciphertext with length of one
					semi-block.<h:p/>
					<h:b>Test 3: (invalid ICV2):</h:b>
					Test that the implementation detects invalid ICV2 values by encrypting any
					plaintext value four times using a different value for ICV2 each time as follows:
					Start with a base ICV2 of 0xA65959A6. For each of the four tests change a different 
					byte of ICV2 to a different value, so that each of the four bytes is changed once.
					Verify that the implementation of KWP-AD in the TOE outputs FAIL for each test.<h:p/>
					<h:b>Test 4: (invalid padding length):</h:b>
					Generate one ciphertext using algorithm KWP-AE with substring [len(P)/8]32 of S
					replaced by each of the following 32-bit values, where len(P) is the length of P in
					bits and [ ]32 denotes the representation of an integer in 32 bits:<h:ul>
					<h:li>[0]32</h:li>
					<h:li>[len(P)/8-8]32</h:li>
					<h:li>[len(P)/8+8]32</h:li>
					<h:li>[513]32.</h:li></h:ul><h:p/>
					Verify that the implementation of KWP-AD in the TOE outputs FAIL on those
					inputs.<h:p/>
					<h:b>Test 5: (invalid padding bits):</h:b><h:p/>
					If the implementation supports plaintext of length not a multiple of 64-bits, then<h:p/>
					<h:pre>
					for each PAD length [1..7]
						for each byte in PAD set a zero PAD value;
							replace current byte by a non-zero value and use the resulting plaintext as
								input to algorithm KWP-AE to generate ciphertexts;
							verify that the implementation of KWP-AD in the TOE outputs FAIL on
								this input.
					</h:pre><h:p/>
					<h:b>AES-KW:</h:b><h:p/>
					The tests below are derived from “The Key Wrap Validation System (KWVS),
					Updated: June 20, 2014” from the National Institute of Standards and Technology.<h:p/>
					The evaluator shall test the authenticated-encryption functionality of AES-KW for
					each combination of the following input parameters:<h:ul>
					<h:li>Supported key lengths selected in the ST (e.g. 128 bits, 256 bits)</h:li>
					<h:li>Five plaintext lengths:<h:ul>
						<h:li>Two lengths that are non-zero multiples of 128 bits (two semi-block
							lengths)</h:li>
						<h:li>Two lengths that are odd multiples of the semi-block length (64 bits)</h:li>
						<h:li>The largest supported plaintext length less than or equal to 4096 bits.</h:li></h:ul>
					</h:li></h:ul><h:p/>
					For each set of the above parameters the evaluator shall generate a set of 100 key
					and plaintext pairs and obtain the ciphertext that results from AES-KW
					authenticated encryption. To determine correctness, the evaluator shall compare the 
					results with those obtained from the AES-KW authenticated-encryption function of
					a known good implementation.<h:p/>
					The evaluator shall test the authenticated-decryption functionality of AES-KW
					using the same test as for authenticated-encryption, replacing plaintext values with
					ciphertext values and AES-KW authenticated-encryption (KW-AE) with AES-KW
					authenticated-decryption (KW-AD). For the authenticated-decryption test, 20 out
					of the 100 trials per plaintext length must have ciphertext values that are not
					authentic; that is, they fail authentication.<h:p/>
					Additionally, the evaluator shall perform the following negative tests:<h:p/>
					<h:b>Test 1 (invalid plaintext length):</h:b><h:p/>
					Determine the valid plaintext lengths of the implementation from the TOE
					specification. Verify that the implementation of KW-AE in the TOE rejects
					plaintexts of invalid length by testing plaintext of the following lengths: 1) plaintext
					length greater than 64 semi-blocks, 2) plaintext bit-length not divisible by 64, 3)
					plaintext with length 0, and 4) plaintext with one semi-block.<h:p/>
					<h:b>Test 2 (invalid ciphertext length):</h:b><h:p/>
					Determine the valid ciphertext lengths of the implementation from the TOE
					specification. Verify that the implementation of KW-AD in the TOE rejects
					ciphertexts of invalid length by testing ciphertext of the following lengths: 1)
					ciphertext with length greater than 65 semi-blocks, 2) ciphertext with bit-length not
					divisible by 64, 3) ciphertext with length 0, 4) ciphertext with length of one semiblock, 
					and 5) ciphertext with length of two semi-blocks.<h:p/>
					<h:b>Test 3 (invalid ICV1):</h:b><h:p/>
					222 Test that the implementation detects invalid ICV1 values by encrypting any
					plaintext value eight times using a different value for ICV1 each time as follows:
					Start with a base ICV1 of 0xA6A6A6A6A6A6A6A6. For each of the eight tests
					change a different byte to a different value, so that each of the eight bytes is changed
					once. Verify that the implementation of KW-AD in the TOE outputs FAIL for each
					test.<h:p/>
					<h:b>CAM-CBC:</h:b><h:p/>
					To test the encrypt and decrypt functionality of Camellia in CBC mode, the
					evaluator shall perform the tests as specified in 10.2.1.2 of ISO/IEC 18367:2016.<h:p/>
					<h:b>CAM-CCM:</h:b><h:p/>
					To test the encrypt functionality of Camellia in CCM mode, the evaluator shall
					perform the tests as specified in 10.6.1.1 of ISO/IEC 18367:2016.<h:p/>
					To test the decrypt functionality of Camellia in CCM mode, the evaluator shall
					perform the tests as specified in 10.6.1.2 of ISO/IEC 18367:2016.<h:p/>
					As a prerequisite for these tests, the evaluator shall perform the test for encrypt
					functionality of Camellia in ECB mode as specified in 10.2.1.2 of ISO/IEC
					18367:2016.<h:p/>
					<h:b>CAM-GCM:</h:b><h:p/>
					To test the encrypt functionality of Camellia in GCM, the evaluator shall perform
					the tests as specified in 10.6.1.1 of ISO/IEC 18367:2016.<h:p/>
					To test the decrypt functionality of Camellia in GCM, the evaluator shall perform
					the tests as specified in 10.6.1.2 of ISO/IEC 18367:2016.<h:p/>
					As a prerequisite for these tests, the evaluator shall perform the test for encrypt
					functionality of Camellia in ECB mode as specified in 10.2.1.2 of ISO/IEC
					18367:2016.<h:p/>
					<h:b>XTS-CAM:</h:b><h:p/>
					These tests are intended to be equivalent to those described in the IPA document,
					ATR-01-B, “Specifications of Cryptographic Algorithm Implementation Testing —
					Symmetric-Key Cryptography“, found at
					<h:a href="https://www.ipa.go.jp/security/jcmvp/jcmvp_e/documents/atr/atr01b_en.pdf">
					https://www.ipa.go.jp/security/jcmvp/jcmvp_e/documents/atr/atr01b_en.pdf</h:a>.<h:p/>
					The evaluator shall generate test values as follows:<h:p/>
					For each supported key size (256 bit (for Camellia-128) and 512 bit (for Camellia256) keys),
					the evaluator shall provide up to five data lengths:<h:ul>
					<h:li>Two data lengths divisible by the 128-bit block size, If data unit lengths of
						complete block sizes are supported.</h:li>
					<h:li>Two data lengths not divisible by the 128-bit block size, if data unit lengths
						of partial block sizes are supported.</h:li>
					<h:li>The largest data length supported by the implementation, or 2^16 (65536),
						whichever is larger.</h:li></h:ul><h:p/>
					The evaluator shall specify whether the implementation supports tweak values of
					128-bit hexadecimal strings or a data unit sequence numbers, or both.<h:p/>
					For each combination of key size and data length, the evaluator shall provide 100
					sets of input data and obtain the ciphertext that results from XTS-Camellia
					encryption. If both kinds of tweak values are supported, 50 of each 100 sets of input
					data shall use each type of tweak value. The resulting ciphertext shall be compared
					to the results of a known-good implementation.<h:p/>
					As a prerequisite for this test, the evaluator shall perform the test for encrypt
					functionality of Camellia in ECB mode as specified in 10.2.1.2 of ISO/IEC
					18367:2016.<h:p/>
					The evaluator shall test the decrypt functionality of XTS-Camellia using the same
					test as for encrypt, replacing plaintext values with ciphertext values and XTSCamellia 
					encrypt with XTS- Camellia decrypt.<h:p/>
					As a prerequisite for this test, the evaluator shall perform the test for decrypt
					functionality of Camellia in ECB mode as specified in 10.2.1.2 of ISO/IEC
					18367:2016.<h:p/>	
				</Tests>
			</aactivity>
		</f-element>
	</f-component>
		
		
		<!-- FCS_ENT_EXT.1 -->
        <f-component cc-id="fcs_ent_ext.1" name="Entropy for Tenant Software" status="optional">
            <f-element id="fcs-ent-ext-1e1">
                <title>The TSF shall provide one or more mechanisms to make entropy suitable for use in FCS_RBG_EXT.1
					available to tenant software.
                </title>
                <note role="application">
                    This requirement ensures that the TOE makes available sufficient entropy to any tenant
					that requires it. Every entropy source need not provide high-quality entropy, but tenant
					software must have a means of acquiring sufficient entropy.<h:p/>
					A hardware noise source is a component that produces data that cannot be explained
					by a deterministic rule, due to its physical nature. In other words, a hardware based
					noise source generates sequences of random numbers from a physical process that
					cannot be predicted. For example, a sampled ring oscillator consists of an odd number
					of inverter gates chained into a loop, with an electrical pulse traveling from 
					inverter to inverter around the loop. The inverters are not clocked, so the precise 
					time required for a complete circuit around the loop varies slightly as various
					physical effects modify the small delay time at each inverter on the line to the
					next inverter. This variance results in an approximate natural frequency that 
					contains drift and jitter over time. The output of the ring oscillator consists 
					of the oscillating binary value sampled at a constant rate from one of the 
					inverters – a rate that is significantly slower than the oscillator’s natural 
					frequency.
                </note>
                <aactivity>
                    <TSS>
                        The evaluator shall verify that the TSS documents the entropy sources implemented by the TOE.
						It is not necessary to document all the platform features that can be used by tenant software to 
						contribute to entropy, rather only those features expressly provided as entropy sources. 
                    </TSS>
					<Guidance>
						The evaluator shall examine the AGD to ensure that it describes how to configure 
						entropy sources (if applicable) and how tenant software can access the sources. 
					</Guidance>
                    <Tests>
                        The evaluator shall perform the following tests:
                        <testlist>
                            <test>
                                The evaluator shall invoke the entropy source(s) from tenant software.
								The evaluator shall verify that the tenant acquires values from the 
								interface.
                            </test>
                        </testlist>
                    </Tests>
                </aactivity>
            </f-element>
        </f-component>

		
		<f-component cc-id="fcs_rbg_ext.1" name="Random Bit Generation" status="optional">
<!--			<exportable id="inf-gpcp-fcs-rbg"/>  -->
<!--			<importable inf-id="inf-dsc-fcs-rbg"/>  -->
			<f-element id="fcs-rbg-ext-1e1">
				<title>The TSF shall perform all deterministic random bit generation services in
					accordance with ISO/IEC 18031:2011 using 
					<selectables>
						<selectable>Hash_DRBG (any)</selectable>
						<selectable>HMAC_DRBG (any)</selectable>
						<selectable>CTR_DRBG (AES)</selectable>
					</selectables>.
				</title>
			</f-element>
			<f-element id="fcs-rbg-ext-1e2">
				<title>The deterministic RBG shall be seeded by at least one entropy source in
					accordance with NIST SP 800-90B that accumulates entropy from 
					<selectables>
						<selectable><assignable>number of software-based sources</assignable>
							software-based noise source</selectable>
						<selectable><assignable>number of hardware-based sources</assignable>
							hardware-based noise source</selectable>
					</selectables> with a minimum of 
					<selectables>
						<selectable>128</selectable>
						<selectable>192</selectable>
						<selectable>256</selectable>
					</selectables> bits of entropy at least equal to the greatest security strength, 
					according to ISO/IEC 18031:2011, of the keys and CSPs that it will generate.
				</title>
				<note role="application">
					For the selection in FCS_RBG_EXT.1.2, the ST author selects the appropriate number 
					of bits of entropy that corresponds to the greatest security strength of the
					algorithms included in the ST. Security strength is defined in Tables 2 and 3 of 
					NIST SP 800-57A. For example, if the implementation includes 2048-bit RSA (security
					strength of 112 bits), AES 128 (security strength 128 bits), and HMAC-SHA-256
					(security strength 256 bits), then the ST author would select 256 bits.
				</note>
			</f-element>
			<f-element id="fcs-rbg-ext-1e3">
				<title>
					The TSF shall be capable of providing output of the RBG to applications running on the TSF
					that request random bits.
				</title>
				<note role="application">
					ISO/IEC 18031:2011 contains three different methods of generating random numbers. Each of
					these in turn depends on underlying cryptographic primitives (hash functions/ciphers). This cPP
					allows SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512 for Hash_DRBG or HMAC_DRBG
					and only AES-based implementations for CTR_DRBG. <h:p/>
					This requirement must be included in the ST only if the TOE generates keys for its
					own use, or if it provides RNG services for tenant software.
				</note>
				<aactivity>
					<TSS>
						The evaluator shall examine the TSS to determine that it specifies the DRBG type,
						identifies the entropy sources seeding the DRBG, and state the assumed or
						calculated min-entropy supplied either separately by each source or the min-entropy
						contained in the combined seed value.<h:p/>
						In addition to the materials below, documentation shall be produced—and the
						evaluator shall perform the activities—in accordance with Appendix D of
						[DSCcPP].<h:p/>
					</TSS>
					<Guidance>
						There are no AGD evaluation activities for this component.
					</Guidance>
					<KMD>
						There are no KMD evaluation activities for this component.
					</KMD>
					<Tests>
						The following tests require the developer to provide access to a test platform that
						provides the evaluator with tools that are typically not found on factory products.<h:p/>
						The evaluator shall perform 15 trials for the RNG implementation. If the RNG is
						configurable, the evaluator shall perform 15 trials for each configuration.<h:p/>
						If the RNG has prediction resistance enabled, each trial consists of (1) instantiate
						DRBG, (2) generate the first block of random bits (3) generate a second block of
						random bits (4) uninstantiate. The evaluator verifies that the second block of
						random bits is the expected value. The evaluator shall generate eight input values
						for each trial. The first is a count (0 – 14). The next three are entropy input, nonce,
						and personalization string for the instantiate operation. The next two are additional
						input and entropy input for the first call to generate. The final two are additional
						input and entropy input for the second call to generate. These values are randomly
						generated. “generate one block of random bits” means to generate random bits with
						number of returned bits equal to the Output Block Length (as defined in NIST
						SP800-90A).<h:p/>
						If the RNG does not have prediction resistance, each trial consists of (1) instantiate
						DRBG, (2) generate the first block of random bits (3) reseed, (4) generate a second
						block of random bits (5) uninstantiate. The evaluator verifies that the second block
						of random bits is the expected value. The evaluator shall generate eight input values
						for each trial. The first is a count (0 – 14). The next three are entropy input, nonce,
						and personalization string for the instantiate operation. The fifth value is additional
						input to the first call to generate. The sixth and seventh are additional input and
						entropy input to the call to reseed. The final value is additional input to the second
						generate call.<h:p/>
						The following paragraphs contain more information on some of the input values to
						be generated/selected by the evaluator. <h:ul>
						<h:li><h:b>Entropy input:</h:b> the length of the entropy input value must equal the seed length.</h:li>
						<h:li><h:b>Nonce:</h:b> If a nonce is supported (CTR_DRBG with no Derivation Function does
						not use a nonce), the nonce bit length is one-half the seed length.</h:li>
						<h:li><h:b>Personalization string:</h:b> The length of the personalization string must be &#8804;
						seed length. If the implementation only supports one personalization string
						length, then the same length can be used for both values. If more than one string
						length is support, the evaluator shall use personalization strings of two different
						lengths. If the implementation does not use a personalization string, no value
						needs to be supplied.</h:li>
						<h:li><h:b>Additional input:</h:b> the additional input bit lengths have the same defaults and
						restrictions as the personalization string lengths.</h:li></h:ul>
					</Tests>
				</aactivity>
			</f-element>
		</f-component>		
		
	<f-component cc-id="fcs_slt_ext.1" name="Cryptographic Salt Generation" status="optional">
		<f-element id="fcs-slt-ext-1e1">
			<title>The TSF shall use salts and nonces generated by an RBG as specified in
				FCS_RBG_EXT.1.
			</title>
			<aactivity>
				<TSS>
					The evaluator shall ensure the TSS describes how salts are generated using the
					RBG.
				</TSS>	
				<Guidance>
					There are no AGD evaluation activities for this component.
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>
				<Tests>
					The evaluator shall confirm by testing that the salts obtained in the cryptographic
					operations that use the salts are of the length specified in FCS_SLT_EXT.1, are
					obtained from the RBG, and are fresh on each invocation.<h:p/>
					Note: in general these tests may be carried out as part of the tests of the relevant
					cryptographic operations.<h:p/>
				</Tests>
			</aactivity>
		</f-element>
	</f-component>		

		
	<f-component cc-id="fcs_stg_ext.1" name="Protected Storage" status="optional">
		<f-element id="fcs-stg-ext-1e1">
			<title>
				The TSF shall provide 
				<selectables>
					<selectable>mutable hardware-based</selectable>
					<selectable>immutable hardware-based</selectable>
					<selectable>software-based</selectable>
				</selectables> protected storage for asymmetric private keys and 
				<selectables>
					<selectable>symmetric keys</selectable>
					<selectable>persistent secrets</selectable>
					<selectable>no other keys</selectable>
				</selectables>.
			</title>
			<note role="application">
				If the protected storage is implemented in software that is protected as required by
				FCS_STG_EXT.2, the ST author is expected to select "software-based." If "software-based" is selected,
				the ST author is expected to select all "software-based key storage" in FCS_STG_EXT.2.<h:p/>
				Support for protected storage for all symmetric keys and persistent secrets will be required in
				future revisions.<h:p/>
			</note>
		</f-element>
		<f-element id="fcs-stg-ext-1e2">
			<title>
				FCS_STG_EXT.1.2 The TSF shall support the capability of 
				<selectables>
					<selectable>importing keys/secrets into the TOE</selectable>
					<selectable>causing the TOE to generate keys/secrets</selectable>
				</selectables> upon request of 
				<selectables>
					<selectable>a client application</selectable>
					<selectable>an administrator</selectable>
				</selectables>.
			</title>
		</f-element>
		<f-element id="fcs-stg-ext-1e3">
			<title>
				The TSF shall be capable of destroying keys/secrets in the protected storage
				upon request of 
				<selectables>
					<selectable>a client application</selectable>
					<selectable>an administrator</selectable>
				</selectables>.
			</title>
		</f-element>
		<f-element id="fcs-stg-ext-1e4">
			<title>
				The TSF shall have the capability to allow only the user that 
				<selectables>
					<selectable>imported the key/secret</selectable>
					<selectable>caused the key/secret to be generated</selectable>
				</selectables> to use the key/secret. Exceptions
				may be explicitly authorized only by 
				<selectables>
					<selectable>the client application</selectable>
					<selectable>the administrator</selectable>
				</selectables>.
			</title>
		</f-element>
		<f-element id="fcs-stg-ext-1e5">
			<title>
				The TSF shall allow only the user that 
				<selectables>
					<selectable>imported the key/secret</selectable>
					<selectable>caused the key/secret to be generated</selectable>
				</selectables> to request that the key/secret be destroyed. Exceptions may
				only be explicitly authorized by 
				<selectables>
					<selectable>the client application</selectable>
					<selectable>the administrator</selectable>
				</selectables>.
			</title>
			<note role="application">
				Not all conformant TOEs will have the ability to import pre-generated keys into the TOE. In these
				cases, the TOE’s ability to receive commands to perform key generation is considered to be its
				implementation of the Parse service. A subject that caused a key to be generated is considered to
				be the ‘owner’ of that key in the same manner as they would be if they had imported it directly.
			</note>
			<aactivity>
				<TSS>
					The evaluator shall review the TSS to determine that the TOE implements the
					required protected storage. The evaluator shall ensure that the TSS contains a
					description of the protected storage mechanism that justifies the selection of
					mutable hardware-based or software-based.<h:p/>
				</TSS>
				<Guidance>
						The evaluator shall examine the operational guidance to ensure that it describes the
						process for generating keys, importing keys, or both, based on what is claimed by
						the ST. The evaluator shall also examine the operational guidance to ensure that it
						describes the process for destroying keys that have been imported or generated.<h:p/>
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>
				<Tests>
					The evaluator shall test the functionality of each security function as described
					below. If the TOE supports both import and generation of keys, the evaluator shall
					repeat the testing as needed to demonstrate that the keys resulting from both
					operations are treated in the same manner. The devices used with the tooling may
					need to be non-production devices in order to enable the execution and gathering of
					evidence.<h:p/>
					<testlist>
						<test>
							The evaluator shall import or generate keys/secrets of each supported type
							according to the operational guidance. The evaluator shall write, or the developer
							shall provide access to, an application that generates a key/secret of each supported
							type and calls the import functions. The evaluator shall verify that no errors occur
							during import.
						</test>
						<test>The evaluator shall write, or the developer shall provide access to, an
							application that uses a generated or imported key/secret:<h:ul>
								<h:li>For RSA, the secret shall be used to sign data.</h:li>
								<h:li>For ECDSA, the secret shall be used to sign data.</h:li></h:ul>
							The evaluator shall repeat this test with the application-imported or applicationgenerated keys/secrets and a different application’s imported keys/secrets or
							generated keys/secrets. The evaluator shall verify that the TOE requires approval
							before allowing the application to use the key/secret imported or generated by the
							user or by a different application:<h:ul>
							<h:li>The evaluator shall deny the approvals to verify that the application is not able
								to use the key/secret as described.</h:li>
							<h:li>The evaluator shall repeat the test, allowing the approvals to verify that the
								application is able to use the key/secret as described.</h:li></h:ul>
							If the ST author has selected common application developer, this test is performed
							by either using applications from different developers or appropriately (according
							to API documentation) not authorizing sharing.<h:p/>
						</test>
						<test>The evaluator shall destroy keys/secrets of each supported type according
							to the operational guidance. The evaluator shall write, or the developer shall provide
							access to, an application that destroys an imported or generated key/secret. The
							evaluator shall repeat this test with the application-imported or applicationgenerated keys/secrets and a different application’s imported or generated
							keys/secrets. The evaluator shall verify that the TOE requires approval before
							allowing the application to destroy the key/secret imported by the administrator or
							by a different application:<h:ul>
							<h:li>The evaluator shall deny the approvals and verify that the application is still
								able to use the key/secret as described.</h:li>
							<h:li>The evaluator shall repeat the test, allowing the approvals and verifying that
								the application is no longer able to use the key/secret as described.</h:li></h:ul>
							If the ST author has selected common application developer, this test is performed
							by either using applications from different developers or appropriately (according
							to API documentation) not authorizing sharing.<h:p/>
						</test>
					</testlist>
				</Tests>
			</aactivity>
		</f-element>
	</f-component>

	<f-component cc-id="fcs_stg_ext.2" name="Key Storage Encryption" status="optional">
		<f-element id="fcs-stg-ext-2e1">
			<title>
				The TSF shall encrypt [<h:i>AKs, SKs, KEKs, and 
				<selectables>
					<selectable>long-term trusted channel key material</selectable>
					<selectable>all software-based key storage</selectable>
					<selectable>no other keys</selectable>
				</selectables></h:i>] using one of the following
				methods: <assignable>key encryption methods as specified in FCS_COP.1/KeyEnc</assignable>.
					</title>
					<aactivity>
					<TSS>
						The evaluator shall review the TSS to determine that the TSS describes the
						protection of symmetric keys, KEKs, long-term trusted channel key material, and
						software-based key storage as claimed in FCS_STG_EXT.2.1. 
					</TSS>
					<Guidance>
						There are no AGD evaluation activities for this component.
					</Guidance>
					<KMD>
						There are no KMD evaluation activities for this component
					</KMD>
					<Tests>
						There are no test evaluation activities for this component.
					</Tests>
			</aactivity>
		</f-element>
	</f-component>
	
	<f-component cc-id="fcs_stg_ext.3" name="Key Integrity Protection" status="optional">
		<f-element id="fcs-stg-ext-3e1">
			<title>
				The TSF shall protect the integrity of any encrypted [<h:i>AKs, SKs, KEKs, and
				<selectables>
					<selectable>long-term trusted channel key material</selectable>
					<selectable>all software-based key storage</selectable>
					<selectable>no other keys</selectable>
				</selectables></h:i>] by using 
				<selectables linebreak="yes">
					<selectable>Symmetric encryption in 
						<selectables>
							<selectable>AES_CCM</selectable>
							<selectable>AES_GCM</selectable>
							<selectable>AES_KW</selectable>
							<selectable>AES_KWP</selectable>
							<selectable>CAM_CCM</selectable>
							<selectable>CAM_GCM</selectable>
						</selectables> mode in accordance with FCS_COP.1/SKC</selectable>
					<selectable>A hash of the stored key in accordance with FCS_COP.1/Hash</selectable>
					<selectable>A keyed hash of the stored key in accordance with FCS_COP.1/HMAC</selectable>
					<selectable>A digital signature of the stored key in accordance with FCS_COP.1/SigGen
						using an asymmetric key that is protected in accordance with FCS_STG_EXT.2</selectable>
					<selectable>An immediate application of the key for decrypting the protected data followed 
						by a successful verification of the decrypted data with previously known information</selectable>
				</selectables>.
			</title>
		</f-element>
		<f-element id="fcs-stg-ext-3e2">
			<title>
				The TSF shall verify the integrity of the 
					<selectables>
						<selectable>hash</selectable>
						<selectable>digital signature</selectable>
						<selectable>MAC</selectable>
					</selectables> of the stored key prior to use of the key.
			</title>
			<note role="application">
				This requirement is not applicable to derived keys that are not stored. It is not expected that a
				single key will be protected from corruption by multiple of these methods; however, a product may
				use one integrity-protection method for one type of key and a different method for other types of
				keys.<h:p/>
				The documentation of the product’s encryption key management should be detailed enough that,
				after reading, the evaluator will thoroughly understand the product’s key management and how it
				meets the requirements to ensure the keys are adequately protected. This documentation should
				include an essay and diagrams. This documentation is not required to be part of the TSS – it can
				be submitted as a separate document and marked as developer proprietary.
			</note>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS and ensure that it contains a description of
					how the TOE protects the integrity of its keys.
				</TSS>
				<Guidance>
					There are no AGD evaluation activities for this component.
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>
				<Tests>
					There are no test evaluation activities for this component.
				</Tests>
			</aactivity>
		</f-element>
	</f-component>
	</section>	 
	
	
	<section id="fdp" title="User Data Protection (FDP)">
	
		<f-component cc-id="fdp_tee_ext.1" name="Trusted execution environment for tenant software" status="optional">
			<f-element id="fdp-tee-ext-1e1">
				<title>
					The TSF shall implement a trusted execution environment that conforms to the following
					standard: [<h:i>Advanced Trusted Environment: OMTP TR1 v1.1</h:i>] 
					and make this TEE available to tenant software.
				</title>
				<aactivity>
					<no-tests/>
				</aactivity>
			</f-element>
		</f-component>
			
		
	
	</section>
	    
	<section id="fpt" title="Class: Protection of the TSF (FPT)">

	<f-component cc-id="fpt_rot_ext.1" name="Platform Integrity Root">
		<f-element id="fpt-rot-ext-1e1">
			<title>The integrity of platform firmware shall be rooted in 
				<selectables linebreak="yes">
					<selectable id="sel-rot-immutable-code">code or data written to immutable memory or storage</selectable>
					<selectable id="sel-rot-immutable-creds">credentials held in immutable storage on-platform or protected storage off-platform</selectable>
					<selectable id="sel-rot-mc">a separate management controller that is itself rooted in a mechanism that meets this requirement</selectable>
					<selectable id="sel-rot-dsc">integrity measurements held securely in an on-platform dedicated security component</selectable>
					<selectable id="sel-rot-offplat">integrity measurements held securely by an off-platform entity</selectable>
				</selectables>.
			</title>
			<note role="application">
				Roots of Trust are components that constitute a set of unconditionally trusted functions. The above are acceptable
				roots of trust for platform firmware integrity.<h:p/>
				The ST author must select the root of trust used to ensure the integrity of the first platform firmware that executes. The integrity
				of subsequently executed platform firmware must be traceable back to this root or to some other root as specified in FPT_ROT_EXT.2.
				This SFR should be iterated for additional TOE roots (for example, a management controller or firmware executed from 
				an add-in card).<h:p/>
			</note>
			<aactivity>
				<TSS>The evaluator shall verify that the TSS describes the Root of Trust on which initial integrity of platform firmware is anchored, consistent 
					with the selection above. The description shall include means by which the Root of Trust is protected from 
					modification.
				</TSS>
			</aactivity>				
		</f-element>
	</f-component>

	<f-component cc-id="fpt_rot_ext.2" name="Platform Integrity Extension">
		<f-element id="fpt-rot-ext-2e1">
			<title>The integrity of all mutable platform firmware outside of the platform integrity root specified in FPT_ROT_EXT.1 shall be verified 
				prior to execution or use through:
				<selectables linebreak="yes">
					<selectable>computation and verification of a hash by trusted code/data</selectable>
					<selectable>verification of a digital signature by trusted code/data</selectable>
					<selectable>measurement and verification by trusted code/data</selectable>
					<selectable>measurement and verification by an on-platform dedicated security component</selectable>
					<selectable>measurement and verification by an off-platform entity</selectable>
				</selectables>.
			</title>
			<note role="application">
				This requirement specifies the means for extending the initial integrity
				of platform firmware established by FPT_ROT_EXT.1.1 to subsequently executed
				platform firmware and data that is located in mutable storage.
				(Integrity of code and data written to immutable storage is assured).<h:p/>
				Otherwise, integrity must be extended through cryptographic means: either through hashes
				or digital signatures computed and verified by firmware that is trusted because it has  
				previously had its integrity verified or is itself a Root of Trust. Verification can be performed
				by TOE components such as management controllers or non-TOE trusted entities.<h:p/>				
			</note>
		</f-element>
		<f-element id="fpt-rot-ext-2e2">
			<title>The TOE shall take the following actions if an integrity check specified in FPT_ROT_EXT.2.1 fails:
				<h:ol type="1">
					<h:li>Halt,</h:li>
					<h:li>Notify an administrator/user by
						<selectables>
							<selectable id="sel-audit-integrity">generating an audit event</selectable>
							<selectable><assignable>other notification method(s)</assignable></selectable>
						</selectables>, and</h:li>
					<h:li><selectables linebreak="yes">
						<selectable>Stop all execution and shut down</selectable>
						<selectable id="sel-rot-recovery">Initiate a Recovery process as specified in FPT_RVR_EXT.1</selectable>
					</selectables></h:li>
				</h:ol> 
				<selectables linebreak="yes">
					<selectable>automatically</selectable>
					<selectable>in accordance with administrator-configurable policy</selectable>
					<selectable>by express determination of an administrator/user</selectable>
				</selectables>.	
			</title>				
			<note role="application">
				Notification of an administrator can take many forms. For server-class platforms, such notification could take the form 
				of administrator alerts or audit events. For platforms without management controllers, notification could be achieved, for
				example, by blinking lights, beep codes, screen indications, or local logging.<h:p/>
				If "<h:i>generating an audit event</h:i>" is selected then FAU_GEN.1 must be included in the ST.
			</note>
			<aactivity>
				<TSS>
					The evaluator shall verify that the TSS describes the means by which initial integrity of platform firmware is
					extended to other platform components, and that the means are consistent with the selection(s) made in FPT_ROT_EXT.2.
					The TSF shall also describe how the TOE responds to failure of verification consistent with the selections in
					FPT_ROT_EXT.2.2.
				</TSS>
				<Guidance>
					The evaluator shall examine the operational guidance to ensure that it describes the actions taken and notification
					methods used in case of failure to establish the integrity of the platform firmware root. If the actions are 
					configurable, the guidance shall explain how they are configured.
				</Guidance>
				<Tests>
					The evaluator shall modify the platform firmware in a way that should cause a failure of the integrity check. 
					The test passes if the mechanism specified in FPT_ROT_EXT.2.2 is triggered on the first subsequent boot 
					of the platform. <h:p/>
					Depending on the protections implemented, the evaluator may need a specially crafted update module from the vendor
					to perform this test. But note that this is not necessarily the same as a test of the update mechanism.
					The update mechanism can be tested either at boot time or at the time of the update. This verification 
					check must be done during boot.<h:p/>
					If modification of platform firmware <h:i>in situ</h:i> or using the update mechanism is deemed to be 
					not feasible within the time and cost constraints of the evaluation, then the evaluators shall make such
					an argument in the AAR, and with concurrence of the CC scheme, this test can be replaced by evidence of 
					vendor testing.<h:p/>
				</Tests>
			</aactivity>
		</f-element>
		<audit-event type="optional">
			<audit-event-descr>Failure of integrity verification.</audit-event-descr>
		</audit-event>
	</f-component>	
	
	<!-- FPT_PHP.1: Passive Detection of Physical Attack.
		 -->
	<f-component id="sfr-fpt-php-1" cc-id="fpt_php.1" name="Passive detection of physical attack" status="optional">
		<depends on-use="uc-clients-portable-enhanced"/>
		<depends on-use="uc-csfc-eud"/>
		<depends on-use="uc-iot-devices"/>
		<f-element id="fpt-php-1e1">
			<title>The TSF shall provide unambiguous detection of physical tampering
				that might compromise the TSF.
			</title>
		</f-element>
		<f-element id="fpt-php-1e2">
			<title>
				The TSF shall provide the capability to determine whether physical
				tampering with the TSF's devices or TSF's elements has occurred. 
			</title>
			<aactivity>
				<no-tests/>
			</aactivity>
		</f-element>
		<audit-event>
			<audit-event-descr>Detection of intrusion.</audit-event-descr>
		</audit-event>
	</f-component>
	
	<!-- FPT_PHP.2: Notification of physical attack
		 -->
	<f-component id="sfr-fpt-php-2" cc-id="fpt_php.2" name="Notification of physical attack" status="optional">
		<depends on-use="uc-server-enhanced"/>
		<depends on-use="uc-csfc-eud"/>
		<f-element id="fpt-php-2e1">
			<title>The TSF shall provide unambiguous detection of physical tampering that
				might compromise the TSF.
			</title>
		</f-element>
		<f-element id="fpt-php-2e2">
			<title>
				The TSF shall provide the capability to determine whether physical
				tampering with the TSF's devices or TSF's elements has occurred. 
			</title>
		</f-element>
		<f-element id="fpt-php-2e3">
			<title>
				For <assignable>list of TSF devices/elements for which active detection is
				required</assignable>, the TSF shall monitor the devices and elements and notify
				<assignable>a designated user or role</assignable> when physical tampering with the
				TSF's devices or TSF's elements has occurred. 
			</title>
		<aactivity>
			<no-tests/>
		</aactivity>
		</f-element>
		<audit-event>
			<audit-event-descr>Detection of intrusion.</audit-event-descr>
		</audit-event>
	</f-component>
	
	<!-- FPT_PHP.3: Resistance to physical attack
		 -->
	<f-component id="sfr-fpt-php-3" cc-id="fpt_php.3" name="Resistance to physical attack" status="optional">
		<depends on-use="uc-server-enhanced"/>
		<depends on-use="uc-tactical-eud"/>
		<f-element id="fpt-php-3e1">
			<title>The TSF shall resist <assignable>physical tampering scenarios</assignable> to the
				<assignable>list of TSF devices/elements</assignable> by responding automatically
				such that the SFRs are always enforced. 
			</title>
		<aactivity>
			<TSS>
				The evaluator shall examine the TSS to ensure it describes the methods used by the
				TOE to detect physical tampering and how the TOE will respond when physical
				tampering has been detected.<h:p/>
			</TSS>
			<Guidance>
				There are no AGD evaluation activities for this component.
			</Guidance>
			<KMD>
				There are no KMD evaluation activities for this component.
			</KMD>
			<Tests>
				Need to design a test to detect and resist tamper.
			</Tests>
		</aactivity>
		</f-element>
		<audit-event>
			<audit-event-descr>Detection of attempted intrusion.</audit-event-descr>
		</audit-event>
	</f-component>

	<!-- FPT_PHP_EXT.1: Hardware component integrity 	 -->
	<f-component cc-id="fpt_php_ext.1" name="Hardware component integrity" status="objective">
		<f-element id="fpt-php-ext-1e1">
			<title>
				Outside of the integrity root specified in FPT_ROT_EXT.1, the integrity of 
				<assignable>critical platform hardware components</assignable>shall be verified 
				prior to execution or use through: 
				<assignable>method for ensuring integrity of platform hardware components</assignable>. 
			</title>
			<note role="application">
				The purpose of this objective requirement is to encourage platform and component vendors to adopt mechanisms similar to those
				defined in upcoming NIST SP 1800-34 for ensuring the integrity of the hardware supply chain. The scope of SP 1800-34 is to cover 
				"manufacturing and OEM processes that protect against counterfeits, tampering, and insertion of 
				unexpected software and hardware, and the corresponding customer processes that verify that client and server computing devices and
				components have not been tampered with or otherwise modified. Manufacturing processes that cannot be verified by the customer are explicitly
				out of scope."<h:p/>
				As a basic step, critical platform components should include immutable hardware IDs that can be listed a hardware component  
				manifest that is provided to the purchaser and signed by the manufacturer. It should then be possible for the TOE to verify 
				the signature on the manifest and check that each hardware ID in the manifest matches the IDs in the actual hardware.<h:p/>
				For purposes of this requirement, hardware identities can be verified once on first boot, on every boot, when new hardware is detected, 
				or during normal operation of the platform - as long as the hardware integrity is verified before the component or device is used.<h:p/>
				The ST author lists the hardware components for which the integrity is checked, and the methods used for conducting the checks. 
				"Critical components" generally would include chassis, motherboards, CPUs, network cards, memory chips, hard drives, controllers, 
				graphics processors, and service controllers.
			</note>
		</f-element>
		<f-element id="fpt-php-ext-1e2">
			<title>
				The TOE shall take the following actions if an integrity check specified in FPT_PHP_EXT.1.1 fails:
				<h:ol type="1">
					<h:li>Halt,</h:li>
					<h:li>Notify an administrator/user by
						<selectables>
							<selectable id="sel-audit-hw-integrity">generating an audit event</selectable>
							<selectable><assignable>other notification method(s)</assignable></selectable>
						</selectables>, and</h:li>
					<h:li><selectables linebreak="yes">
						<selectable>Stop all execution and shut down</selectable>
						<selectable>Continue execution without the integrity-compromised component</selectable>
						<selectable>Continue execution</selectable>
					</selectables></h:li>
				</h:ol> 
				<selectables linebreak="yes">
					<selectable>in accordance with administrator-configurable policy</selectable>
					<selectable>by express determination of an administrator/user</selectable>
				</selectables>.	
			</title>				
			<note role="application">
				Notification of an administrator can take many forms. For server-class platforms, such notification could take the form 
				of administrator alerts or audit events. For platforms without management controllers, notification could be achieved, for
				example, by blinking lights, beep codes, screen indications, or local logging.<h:p/>
				If "<h:i>generating an audit event</h:i>" is selected then FAU_GEN.1 must be included in the ST.
			</note>
			<aactivity>
			<no-tests/>
			</aactivity>
		</f-element>
		<audit-event>
			<audit-event-descr>Detection of attempted intrusion.</audit-event-descr>
		</audit-event>
	</f-component>


		
	<!-- FPT_PPF_EXT.1 Protection of Platform Firmware -->
	<f-component cc-id="fpt_ppf_ext.1" name="Protection of Platform Firmware and Critical Data">
		<f-element id="fpt-ppf-ext-1e1">
			<title>The TSF shall allow modification of platform firmware only through the update mechanisms described in FPT_TUD_EXT.1.
			</title>
			<note role="application">
				Platform firmware must be modifiable only through one of the secure update mechanisms 
				specified in FPT_TUD_EXT.1. If the update mechanism itself is implemented in platform 
				firmware, then naturally, it must itself also be modifiable only through the secure update
				mechanism. Configuration data used by platform firmware that is stored in nonvolatile
				memory is not included in these protections. Software portions of TSF and data critical
				for ensuring the integrity of the TSF are included in these protections. Specifically,
				this includes the key store and the signature verification algorithm used by the update
				mechanisms. 
			</note>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS to ensure that it explains how the various areas of platform firmware and critical data 
					are protected from modification outside of the platform firmware update mechanism described in FPT_TUD_EXT.1. 
					If the TOE implements an authenticated update mechanism as specified in FPT_TUD_EXT.2, then the evauator shall ensure
					that the TSS describes specifically how the signature verification code and key store is protected from update
					outside of the secure platform firmware update mechanism.
				</TSS>
				<Guidance>
					The evaluator shall check the operational guidance to ensure that there are instructions for how to
					securely modify the platform firmware and critical data using a mechanism specified in 
					FPT_TUD_EXT.1.
				</Guidance>
				<Tests>
					<testlist>
						<test>The evaluator shall attempt to overwrite or modify the platform firmware without invoking one of
							the update mechanisms specified in FPT_TUD_EXT.1 (e.g., using a modified Linux boot loader such 
							as GRUB that attempts to write to the memory where platform firmware is stored). The test succeeds
							if the attempts to overwrite platform firmware fail. The evaluator shall attempt at least two 
							such tests--one that attempts to overwrite the first platform firmware that executes after boot,
							and one that targets the secure update mechanism (if implemented), and one that targets firmware that
							has been integrity-checked since the last boot.</test>
					</testlist>
				</Tests>
			</aactivity>
		</f-element>
		<audit-event/>
	</f-component>
	
	<!-- FPT_RVR_EXT.1 Platform Firmware Recovery -->
	<f-component cc-id="fpt_rvr_ext.1" name="Platform Firmware Recovery" status="sel-based">
		<depends on-sel="sel-rot-recovery"/>
		<f-element id="fpt-rvr-ext-1e1">
			<title>
				The TSF shall implement a mechanism for recovering from boot firmware failure consisting of 
				<selectables linebreak="yes">
					<selectable>the secure local update mechanism described in FPT_TUD_EXT.4</selectable>
					<selectable>installation of a known-good or recovery firmware image</selectable>
					<selectable>reversion to the prior firmware image</selectable>
					<selectable>installation of a recovery image that puts the TOE into a maintenance mode</selectable>
				</selectables>
			</title>
			<note role="application">
				This SFR must be included in the ST if:
				<h:ul>
					<h:li>"Initiate a Recovery process as specified in FPT_RVR_EXT.1" is selected in FPT_ROT_EXT.2.2,</h:li>
					<h:li>"Initiate a Recovery process as specified in FPT_RVR_EXT.1" is selected in FPT_TUD_EXT.2.5,</h:li>
					<h:li>The TOE implements a recovery mechanism for firmware corruption not necessarily related to 
						integrity or update failure.</h:li>
				</h:ul>
				As indicated above, in addition to integrity or update failure, the TOE may use a recovery 
				mechanism to deal with non-security-related failures, such as a power outage during update or a 
				power surge during normal operation.<h:p/>
				The recovery process may be initiated automatically on failure, as the result of physically present User
				action, or as the result of pre-configured policy. The action taken may depend on the nature of the
				failure as specified in FPT_ROT_EXT.2.2 and FPT_TUD_EXT.2.5.<h:p/>
			</note>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS section to confirm that it describes how the platform 
					firmware recovery mechanism works and the conditions under which it is invoked. 
				</TSS>
				<Guidance>
					The evaluator shall examine the guidance to ensure that is describes how to configure the 
					conditions under which the recovery mechanism is initiated (if configurable).
				</Guidance>
				<Tests>
					The evaluators shall perform the following tests:
					<testlist>
						<test>To test this requirement, the evaluator shall trigger the recovery process
							either by forcing an update error or a boot integrity failure and observing that 
							the recovery process has been initiated.</test>
						<test>The evaluator will engage with the recovery process as necessary, and after recovery
							will determine the version of the current firmware image. The test is passed 
							if the resultant image is as expected in accordance with policy and the selections
							in FPT_RVR_EXT.1.1. If the recovery process uses the secure
							local update process as specified in FPT_TUD_EXT.4, then this test is satisfied by
							testing of that requirement. </test>
					</testlist>
				</Tests>
			</aactivity>
		</f-element>
		<audit-event/>
	</f-component>
		
	<!-- FPT_TUD_EXT.1 Platform Firmware Update -->
	<f-component cc-id="fpt_tud_ext.1" name="TOE Firmware Update">
		<f-element id="fpt-tud-ext-1e1">
			<title>The TSF shall 
				<selectables linebreak="yes">
					<selectable>make no provision for platform firmware update</selectable>
					<selectable id="sel-auth-update">implement an authenticated platform firmware update mechanism as described in
						FPT_TUD_EXT.2</selectable>
					<selectable id="sel-unauth-update">implement an unauthenticated platform firmware update mechanism as described in
						FPT_TUD_EXT.3</selectable>					
					<selectable id="sel-local-update">implement a secure local platform firmware update mechanism
						described in FPT_TUD_EXT.4</selectable>
				</selectables>.
			</title>
			<note role="application">
				The purpose of the platform firmware update mechanism is to ensure the authenticity and integrity of
				platform firmware updates. <h:p/>
				If platform firmware is immutable (not updateable by any non-destructive means) then the ST author must select 
				"make no provision for platform firmware update."<h:p/>
				If platform firmware is modifiable only through a
				local update requiring physical presence at the platform, then the ST author must select "implement a secure
				local update process..." and include FPT_TUD_EXT.4 in the ST.<h:p/>
				If the platform implements an update mechanism 
				that does not require physical presence at the platform, and that authenticates firmware updates prior to installing them,
				then the ST author selects "implement an authenticated platform update mechanism..." and include FPT_TUD_EXT.2 in the ST.<h:p/>
				If the platform implements an update mechanism that does not require physical presence at the
				platform, and that does not authenticate firmware updates prior to installing them,
				then the ST author selects "implement an unauthenticated platform update mechanism..." and include FPT_TUD_EXT.3 in the ST.
			</note>
			<aactivity>
				<TSS>
					If the ST author selects "make no provision for platform firmware update," then the 
					evaluator shall examine the TSS to ensure that it explains all ways of modifying platform 
					firmware in the absence of any provided mechanism. For example, breaking open the case
					and prying a chip off the motherboard and then reprogramming the chip. The purpose of this
					activity is to ensure that the TOE does not implement a local update mechanism that does not
					meet the requirements of FPT_TUD_EXT.4.<h:p/>
					This requirement is met if the platform implements no means for updating platform firmware
					and the TSS describes a method for updating or replacing platform firmware that involves
					potentially destroying or damaging the TOE or some of its components.<h:p/>
					If the ST author selects "implement an authenticated platform firmware update mechanism..." then this requirement is 
					satisfied if FPT_TUD_EXT.2 is satisfied. <h:p/>
					If the ST author selects "implement an unauthenticated platform firmware update mechanism..." then this requirement is 
					satisfied if FPT_TUD_EXT.3 is satisfied. <h:p/>
					If the ST author selects "implement a secure local platform update mechanism..." then this requirement is 
					satisfied if FPT_TUD_EXT.4 is satisfied. <h:p/>
				</TSS>
			</aactivity>
		</f-element>
		<audit-event/>
	</f-component>			


	<!-- FPT_TUD_EXT.2 Platform Firmware Authenticated Update Mechanism -->
	<f-component cc-id="fpt_tud_ext.2" name="Platform Firmware Authenticated Update Mechanism" status="sel-based">
		<depends on-sel="sel-auth-update"/>
		<f-element id="fpt-tud-ext-2e1">
			<title>The TSF shall authenticate the source of all platform firmware updates using a 
				digital signature algorithm specified in FCS_COP.1/SigVer and using a key store 
				that contains 
				<selectables>
					<selectable>the public key</selectable>
					<selectable id="sel-tud2-hash">hash value of the public key</selectable>
				</selectables>.
			</title>
			<note role="application">
				The ST must include FCS_COP.1/Hash if "hash value of the public key" is selected.
			</note>
		</f-element>
		<f-element id="fpt-tud-ext-2e2">
			<title>
				The TSF shall allow installation of updates only if the digital signature has been
				successfully verified as specified in FCS_COP.1/SigVer and 
				<selectables>
					<selectable>the version number of the platform firmware update is more recent than 
						the version number of the current installed platform firmware</selectable>
					<selectable>no other conditions</selectable>
				</selectables>.
			</title>
			<note role="application">
				The ST author should make the selection above if the TSF supports rollback prevention. That is, the TSF
				does not allow "update" to an older version of the platform firmware. In general, rollback should be permitted
				only through a secure local update mechanism at the express direction of an Administrator/User.
			</note>
		</f-element>
		<f-element id="fpt-tud-ext-2e3">
			<title>
				The TSF shall include a platform firmware version identifier that is accessible by the update mechanism and
				includes information that enables the update mechanism to determine the relative order of updates.
			</title>
		</f-element>
		<f-element id="fpt-tud-ext-2e4">
			<title>
				The TSF shall provide an observable indication of the success or failure of the update operation.
			</title>
			<note role="application">
				For success, this indication should include the version number of the newly installed firmware. 
				Notification of failure could include generation of an audit event by a management subsystem, a 
				beep code, an updated version number on a splash screen, or simple failure to continue functioning.
			</note>
		</f-element>
		<f-element id="fpt-tud-ext-2e5">  
			<title>
				The TOE shall take the following actions if a platform firmware integrity, authenticity, 
				or rollback-prevention check fails, or a platform firmware update fails for any other reason: 
				<h:ul>
					<h:li>Do not install the update,</h:li>
					<h:li>Notify an administrator/user by 
						<selectables>
							<selectable id="sel-tud2-audit">generating an audit event</selectable>
							<selectable><assignable>notification method</assignable></selectable>
						</selectables>
					</h:li>
				</h:ul>, and
				<selectables linebreak="yes">
					<selectable>Continue execution</selectable>
					<selectable>Halt</selectable>
					<selectable>Stop all execution and shut down</selectable>
					<selectable>Initiate recovery as specified in FPT_RVR_EXT.1</selectable>
				</selectables>			
				<selectables linebreak="yes">
					<selectable>automatically</selectable>
					<selectable>in accordance with administrator-configurable policy</selectable>
					<selectable>by express determination of an administrator/user</selectable>
				</selectables>.
			</title>
			<note role="application">
				The platform firmware authenticated update mechanism employs digital signatures to ensure the authenticity of the
				firmware update image. The TSF includes a signature verification algorithm and a key
				store containing the public key needed to verify the signature on the firmware update image. <h:p/>
				A hash of the public key may be stored if a copy of the public key is provided with firmware
				update images. In this case, the update mechanism shall hash the public key provided with the update 
				image, and ensure that it matches a hash which appears in the key store before using the provided public 
				key to verify the signature of the update image. If the hash of the public key is selected, the ST author may
				iterate the FCS_COP.1/Hash requirement to specify the hashing functions used.<h:p/>
				An indication of success or failure can be generation of an audit event by a management subsystem, a beep code,
				an updated version number on a splash screen, or simple failure to continue functioning.<h:p/>
				If the update mechanism generates audit events, the ST author shall make the appropriate selections
				from the audit events table (<xref g="t-audit-sel-based"/>).
			</note>
			<aactivity>
				<h:p/><TSS>
					The evaluator shall ensure that the TSS includes a comprehensive description of how the 
					authentication of platform firmware updates is implemented by the TSF. The TSS should cover the 
					initialization process and the activities that are performed to ensure that the
					digital signature of the update image is verified before modification of the firmware. <h:p/>
					The evaluator shall examine the TSF to ensure that it describes the platform firmware version identifier
					and explains its meaning and encoding.<h:p/>
					The evaluator shall also ensure that the TSS describes the actions taken by the TSF is 
					an update image fails authentication.<h:p/>
				</TSS>
				<Guidance>
					The evaluator shall examine the operational guidance to ensure that it describes the process for 
					updating the platform firmware.<h:p/>
					The evaluator shall examine the operational guidance to ensure that it documents the observable indications
					of update success or failure, and that it describes how to access the platform firmware version indicators.<h:p/>
				</Guidance>
				<Tests>
					<testlist>
						<test>The evaluator determines the current version of the platform firmware, and obtains or 
							produces a valid, authentic, and permissible update image of platform firmware. The evaluator 
							initiates an update using this image through the process described in the operational guidance.
							After the process is complete, the evaluator checks the current firmware version to ensure
							that the new firmware version matches that of the update.</test>
						<test>The evaluator performs the same test, this time using a valid update image that is signed
							with an incorrect key. The update must fail.</test>
						<test>The evaluator performs the same test, this time using an update image that is corrupted
							but is signed with the correct key. The update must fail.</test>
						<test>The evaluator performs the same test, this time using a valid update image that is not signed.
							The update must fail.</test>
						<test>If the TSF implements rollback protections, the evaluator performs the same test, this time using 
							a valid, signed update image that is has an earlier version number than the currently installed
							firmware. The update must fail.</test>
					</testlist>
				</Tests>
			</aactivity>
		</f-element>
		<audit-event type="optional">
			<audit-event-descr>Failure of update authentication/integrity check/rollback</audit-event-descr>
			<audit-event-info>Version numbers of the current firmware and of the attempted update</audit-event-info>
		</audit-event>
		<audit-event type="optional">
			<audit-event-descr>Failure of update operation</audit-event-descr>
			<audit-event-info>Version numbers of the current firmware and of the attempted update</audit-event-info>
		</audit-event>
		<audit-event type="optional">
			<audit-event-descr>Success of update operation</audit-event-descr>
			<audit-event-info>Version numbers of the new and old firmware images.</audit-event-info>
		</audit-event>
	</f-component>
		
	<!-- FPT_TUD_EXT.3 Platform Firmware Delayed-Authentication Update Mechanism -->
	<!-- In this case, we install the update and then let the boot-time integrity check or 
		whatever do the check. As long as it is done before the code is executed it's okay...
		meaning all the other requirements are met. Especially FPT_ROT_EXT.2. -->
	<f-component cc-id="fpt_tud_ext.3" name="Platform Firmware Delayed-Authentication Update Mechanism" status="sel-based">
		<depends on-sel="sel-unauth-update"/>
		<f-element id="fpt-tud-ext-3e1">
			<title>
				The TSF shall allow execution or use of platform firmware updates only if new platform firmware
				is integrity- and authenticity-checked using the mechanism described in FPT_ROT_EXT.2 prior to its
				execution or use, and
				<selectables>
					<selectable>the version number of the platform firmware update is more recent than 
						the version number of the previously installed platform firmware</selectable>
					<selectable>no other conditions</selectable>
				</selectables>.
			</title>
			<note role="application">
				This update mechanism does not require an integrity or authenticity check prior to installation, but the
				newly installed platform firmware must have its integrity and authenticity verified prior to 
				being executed or used. This update mechanism takes advantage of the existing FPT_ROT_EXT.2
				requirement to avoid having to verify the integrity and authenticity of an update package
				at install time.<h:p/>
				The ST author should select "the version number of the platform firmware update is more recent than 
				the version number of the previously installed platform firmware" if the TSF supports rollback prevention.
			</note>
		</f-element>
		<f-element id="fpt-tud-ext-3e2">
			<title>
				The TSF shall include an observable platform firmware version identifier that is accessible by the
				update mechanism and includes information that enables the update mechanism to determine the relative
				order of updates.
			</title>
		</f-element>
		<f-element id="fpt-tud-ext-3e3">
			<title>
				The TSF shall provide an observable indication of the success or failure of the update operation.
			</title>
			<note role="application">
				For success, this should at least include an indication of the version number of the newly installed firmware. 
				Notification of failure could include generation of an audit event by a management subsystem, a 
				beep code, an updated version number on a splash screen, or simple failure to continue functioning.
			</note>
		</f-element>
		<f-element id="fpt-tud-ext-3e4"> 
			<title>
				The TOE shall take the following actions if a platform firmware update integrity, authentication, or
				rollback-prevention check fails, or a platform firmware update fails for any other reason:
				<h:ul>
					<h:li>Notify Notify an administrator/user by 
						<selectables>
							<selectable id="sel-tud3-audit">generating an audit event</selectable>
							<selectable><assignable>notification method</assignable></selectable>
						</selectables></h:li>
				</h:ul> and
				<selectables linebreak="yes">
					<selectable>Halt</selectable>
					<selectable>Stop all execution and shut down</selectable>
					<selectable>Initiate a recovery process as specified in FPT_RVR_EXT.1</selectable>
				</selectables>
				<selectables linebreak="yes">
					<selectable>automatically</selectable>
					<selectable>in accordance with administrator-configurable policy</selectable>
					<selectable>by express determination of an administrator/user</selectable>
				</selectables>.
			</title>
			<note role="application">
				The platform firmware unauthenticated update mechanism installs platform firmware updates without
				first checking their integrity or authenticity. Instead, this mechanism either invokes a 
				special authentication/integrity check on the firmware <h:i>in situ</h:i> after install or relies on the
				firmware checks required by FPT_ROT_EXT.2 to ensure the integrity and authenticity of the update 
				image. In either case, the integrity and authenticity of the update must be verified before the 
				updated firmware is executed or used.<h:p/>
				Likewise, if the TSF implement rollback prevention, this check must be made before the newly installed
				firmware is executed.
			</note>
			<aactivity>
				<h:p/><TSS>
					The evaluator shall ensure that the TSS includes a comprehensive description of how the 
					authentication of platform firmware updates is implemented by the TSF. The TSS should cover the 
					initialization process and the activities that are performed to ensure that the
					digital signature of the update image is verified before it is executed or used. <h:p/>
					The evaluator shall examine the TSF to ensure that it describes the platform firmware version identifier
					and explains its meaning and encoding.<h:p/>
					The evaluator shall also ensure that the TSS describes the actions taken by the TSF if 
					an update image fails authentication, integrity, or rollback-prevention checks.<h:p/>
				</TSS>
				<Guidance>
					The evaluator shall examine the operational guidance to ensure that it describes the process for 
					updating the platform firmware.<h:p/>
					The evaluator shall examine the operational guidance to ensure that it documents the observable indications
					of update success or failure, and that it describes how to access the platform firmware version indicators.<h:p/>
				</Guidance>
				<Tests>
					<testlist>
						<test>The evaluator determines the current version of the platform firmware, and obtains or 
							produces a valid, authentic, and permissible update image of platform firmware. The evaluator 
							initiates an update using this image through the process described in the operational guidance.
							After the process is complete, the evaluator checks the current firmware version to ensure
							that the new firmware version matches that of the update.</test>
						<test>The evaluator performs the same test, this time using a inauthentic update image. The update code
							must fail to execute.</test>
						<test>The evaluator performs the same test, this time using an update image that is corrupted
							but is otherwise authentic. The update code must fail to execute.</test>
						<test>If the TSF implements rollback protections, the evaluator performs the same test, this time using 
							a valid, signed update image that is has an earlier version number than the currently installed
							firmware. The update code must fail to execute.</test>
					</testlist>
				</Tests>
			</aactivity>
		</f-element>
		<audit-event type="optional">
			<audit-event-descr>Failure of update authentication/integrity/rollback check</audit-event-descr>
			<audit-event-info>Version numbers of the current firmware and of the attempted update</audit-event-info>
		</audit-event>
		<audit-event type="optional">
			<audit-event-descr>Failure of update operation</audit-event-descr>
			<audit-event-info>Version numbers of the current firmware and of the attempted update</audit-event-info>
		</audit-event>
		<audit-event type="optional">
			<audit-event-descr>Success of update operation</audit-event-descr>
			<audit-event-info>Version numbers of the new and old firmware images.</audit-event-info>
		</audit-event>
	</f-component>
		
	<!-- FPT_TUD_EXT.4 Secure Local Platform Firmware Update Mechanism -->	
	<f-component cc-id="fpt_tud_ext.4" title="Secure Local Platform Firmware Update Mechanism" status="sel-based">
		<depends on-sel="sel-local-update"/>
		<f-element id="fpt-tud-ext-4e1">
			<title>The TSF shall provide a secure local update mechanism that requires an assertion of physical access to the TOE
				before installation of an update.
			</title>
		</f-element>
		<f-element id="fpt-tud-ext-4e2">
			<title>
				The Administrator/User shall assert physical presence to the TSF through: 
				<selectables linebreak="yes">
					<selectable>login to the TOE from a physically connected console or terminal</selectable>
					<selectable>physical connection of a jumper or cable</selectable>
					<selectable>connection to a debug port</selectable>
					<selectable><assignable>description of other mechanism for asserting physical presence</assignable></selectable>
				</selectables>
			</title>
			<note role="application">
				This requirement pertains to platform firmware update mechanisms that do not use the 
				authentication-based update mechanism described in FPT_TUD_EXT.2 or the delayed-authentication
				described in FPT_TUD_EXT.3. The secure local update 
				mechanism ensures the authenticity and integrity of the firmware update image by requiring an
				Administrator/User to be physically present at the TOE. An assertion of physical presence can take the form, for example, of
				requiring entry of a password at a boot screen, unlocking of a physical lock (e.g., a motherboard
				jumper), or inserting a USB cable before permitting platform firmware to be updated. <h:p/>
				There is no requirement that the local update mechanism support rollback prevention.<h:p/>
				The local update mechanism must be a designed mechanism. If update can be accomplished only
				through the physical removal and replacement of a part, then that is not a secure local
				update mechanism--that is no update mechanism--and "make no provision for platform firmware update"
				should be selected in FPT_TUD_EXT.1.1.<h:p/>
			</note>
		</f-element>
			<f-element id="fpt-tud-ext-4e3">
			<title>
				The TSF shall include a platform firmware version identifier that is accessible by the update mechanism or
				to the Administrator/User who asserts physical presence.
			</title>
		</f-element>
		<f-element id="fpt-tud-ext-4e4">
			<title>
				The TSF shall provide an observable indication of the success or failure of the update operation.
			</title>
			<note role="application">
				For success, this indication should include the version number of the newly installed firmware. 
				Notification of failure could be through a beep code, an indication on a splash screen, or simple failure to 
				continue functioning.
			</note>
		<aactivity>
			<TSS>
				The evaluator shall check the TSS section to confirm that it clearly and thoroughly describes how the
				secure local update functionality is implemented.<h:p/>
			</TSS>
			<Guidance>
				The evaluator shall examine the operational guidance to ensure that it describes instructions for 
				using the local update mechanism, and how to validate that the update was succesful.<h:p/>		
			</Guidance>
			<Tests> 
				<testlist>
					<test>The evaluator tests the secure local update by following the instructions provided in the operational 
				guidance to update the platform firmware image. The update must succeed.<h:p/>
					</test>
					<test>
						The evaluator next tries to update the platform firmware image without 
						first asserting physical presence. The update must fail or be not possible.
				</test>
					</testlist>
			</Tests>
			</aactivity>
		</f-element>
		<audit-event/>
	</f-component>
		
    </section>				
	    
    </section>
	  
<!--   5.2 Security Assurance Requirements -->
	  
    <section title="Security Assurance Requirements" id="SARs">
      The Security Objectives in 
      <xref to="obj"/> were constructed to address threats identified in
      <xref to="threats"/>. The Security Functional Requirements (SFRs)
      in <xref to="SFRs"/> are a formal instantiation of the Security Objectives. The PP
      identifies the Security Assurance Requirements (SARs) to frame the extent to
      which the evaluator assesses the documentation applicable for the evaluation and performs
      independent testing. <h:br/> This section lists the set of SARs from CC part 3
      that are required in evaluations against this PP. Individual Assurance Activities
      <!--(AAs). Never use these again --> to be performed are specified both in <xref
        to="req"/> as well as in this section. <h:br/> The general model for evaluation of OSs
		against STs written to conform to this PP is as follows: <h:br/> After the
        ST has been approved for evaluation, the ITSEF will obtain the
        OS, supporting environmental IT, and the administrative/user guides for
      the OS. The ITSEF is expected to perform actions mandated by the Common Evaluation
      Methodology (CEM) for the ASE and ALC SARs. The ITSEF also performs the Assurance Activities
      contained within <xref to="req"/>, which are intended to be an interpretation of the
      other CEM assurance requirements as they apply to the specific technology instantiated in the
      OS. The Assurance Activities that are captured in <xref to="req"/> also provide
      clarification as to what the developer needs to provide to demonstrate the OS is compliant
      with the PP. 
	    <section title="Class ASE: Security Target" id="ase">As per ASE activities
        defined in <cite linkend="bibCEM"/>.</section>
      <section title="Class ADV: Development" id="adv">The information about the OS is contained in the guidance documentation available to the end user as
        well as the TSS portion of the ST. The OS developer must concur with the description of the product that is
        contained in the TSS as it relates to the functional requirements. The Assurance Activities
        contained in <xref to="SFRs"/> should provide the ST authors with
        sufficient information to determine the appropriate content for the TSS section.
          <a-component cc-id="adv_fsp.1" name="Basic Functional Specification (ADV_FSP.1)">The
          functional specification describes the TSFIs. It is not
          necessary to have a formal or complete specification of these interfaces. Additionally,
          because OSs conforming to this PP will necessarily have interfaces to
          the Operational Environment that are not directly invokable by OS
          users, there is little point specifying that such interfaces be described in and of
          themselves since only indirect testing of such interfaces may be possible. For this PP,
          the activities for this family should focus on understanding the interfaces presented in
          the TSS in response to the functional requirements and the interfaces
          presented in the AGD documentation. No additional “functional specification” documentation
          is necessary to satisfy the assurance activities specified. The interfaces that need to be
          evaluated are characterized through the information needed to perform the assurance
          activities listed, rather than as an independent, abstract list. 
            <a-element type="D">
              <title>The developer shall provide a functional specification.</title>
            </a-element>
            <a-element type="C">
              <title>The developer shall provide a tracing from the functional specification to the
              SFRs.</title>
              <note role="application">As indicated in the introduction to this section, the
              functional specification is comprised of the information contained in the AGD_OPE and
              AGD_PRE documentation. The developer may reference a website accessible to application
              developers and the evaluator. The assurance activities in the functional requirements
              point to evidence that should exist in the documentation and TSS
              section; since these are directly associated with the SFRs, the tracing in element
              ADV_FSP.1.2D is implicitly already done and no additional documentation is
              necessary.</note>
            </a-element>
	  
            <a-element type="C">
              <title>The functional specification shall describe the purpose and method of use for
              each SFR-enforcing and SFR-supporting TSFI.</title>
            </a-element>
            <a-element type="C">
              <title>The functional specification shall identify all parameters associated with each
              SFR-enforcing and SFR-supporting TSFI.</title>
            </a-element>
            <a-element type="C">
              <title>The functional specification shall provide rationale for the implicit
              categorization of interfaces as SFR-non-interfering.</title>
            </a-element>
            <a-element type="C">
              <title>
		The tracing shall demonstrate that the SFRs trace to TSFIs 
		in the functional specification.
	      </title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
            </a-element>
            <a-element type="E">
              <title>The evaluator shall determine that the functional specification is an accurate
              and complete instantiation of the SFRs.</title>
              <aactivity>There are no specific assurance activities associated with these SARs, except
              ensuring the information is provided. The functional specification documentation is
              provided to support the evaluation activities described in <xref to="SFRs"/>, and
              other activities described for AGD, ATE, and AVA SARs. The requirements on the content
              of the functional specification information is implicitly assessed by virtue of the
              other assurance activities being performed; if the evaluator is unable to perform an
              activity because there is insufficient interface information, then an adequate
              functional specification has not been provided.
	      </aactivity>
            </a-element>
	  
        </a-component>
      </section>
	    
      <section id="agd" title="Class AGD: Guidance Documentation">The guidance documents will be
        provided with the ST. Guidance must include a description of how the IT
        personnel verifies that the Operational Environment can fulfill its role for the security
        functionality. The documentation should be in an informal style and readable by the IT
        personnel. Guidance must be provided for every operational environment that the product
        supports as claimed in the ST. This guidance includes instructions to
        successfully install the TSF in that environment; and Instructions to
        manage the security of the TSF as a product and as a component of the
        larger operational environment. Guidance pertaining to particular security functionality is
        also provided; requirements on such guidance are contained in the assurance activities
        specified with each requirement. 
	<a-component cc-id="agd_ope.1" name="Operational User Guidance (AGD_OPE.1)">
	    <a-element type="D">
	      <title>The developer shall provide operational user guidance.</title>
	      <note role="application">The operational user guidance does not have to be contained in a
	      single document. Guidance to users, administrators and application developers can be
              spread among documents or web pages. 
	      Rather than repeat information here, the developer should
              review the assurance activities for this component to ascertain the specifics of the
              guidance that the evaluator will be checking for. This will provide the necessary
              information for the preparation of acceptable guidance.</note>
            </a-element>
          
            <a-element type="C">
              <title>The operational user guidance shall describe, for each user role, the
              user-accessible functions and privileges that should be controlled in a secure
              processing environment, including appropriate warnings.</title>
              <note role="application">User and administrator are to be considered in the definition
              of user role.</note>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall describe, for each user role, how to use the
              available interfaces provided by the OS in a secure manner.</title>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall describe, for each user role, the available
              functions and interfaces, in particular all security parameters under the control of
              the user, indicating secure values as appropriate.</title>
              <note role="application">
		This portion of the operational user guidance should be presented
		in the form of a checklist that can be quickly executed by IT personnel (or end-users, 
		when necessary) and suitable for use in compliance activities.
		When possible, this guidance is to be expressed in the eXtensible Configuration 
		Checklist Description Format (XCCDF) to
		support security automation.  
		Minimally, it should be presented in a structured 
		format which includes a title for each configuration item, 
		instructions for achieving the secure configuration, and any relevant rationale.  
              </note>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall, for each user role, clearly present each
              type of security-relevant event relative to the user-accessible functions that need to
              be performed, including changing the security characteristics of entities under the
              control of the TSF.</title>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall identify all possible modes of operation of
              the OS (including operation following failure or operational
              error), their consequences, and implications for maintaining secure operation.</title>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall, for each user role, describe the security
              measures to be followed in order to fulfill the security objectives for the
              operational environment as described in the ST.</title>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall be clear and reasonable.</title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence. </title>
              <aactivity>Some of the contents of the operational guidance are verified by the
              assurance activities in <xref to="SFRs"/> and evaluation of the OS according to the <cite linkend="bibCEM"/>. The following additional
              information is also required. If cryptographic functions are provided by the OS, the operational guidance shall contain instructions for configuring
              the cryptographic engine associated with the evaluated configuration of the OS. It shall provide a warning to the administrator that use of other
              cryptographic engines was not evaluated nor tested during the CC evaluation of the
              OS. The documentation must describe the process for verifying
              updates to the OS by verifying a digital signature – this may be
              done by the OS or the underlying platform. The evaluator will
              verify that this process includes the following steps: Instructions for obtaining the
              update itself. This should include instructions for making the update accessible to
              the OS (e.g., placement in a specific directory). Instructions for
              initiating the update process, as well as discerning whether the process was
              successful or unsuccessful. This includes generation of the hash/digital signature.
              The OS will likely contain security functionality that does not
              fall in the scope of evaluation under this PP. The operational guidance shall make it
              clear to an administrator which security functionality is covered by the evaluation
              activities. </aactivity>
          </a-element>
	  
        </a-component>
        <a-component cc-id="agd_pre.1" name="Preparative Procedures (AGD_PRE.1)">
            <a-element type="D">
              <title>The developer shall provide the OS, including its preparative
              procedures.</title>
              <note role="application">As with the operational guidance, the developer should look to
              the assurance activities to determine the required content with respect to preparative
              procedures.</note>
            </a-element>
	  
            <a-element type="C">
              <title>The preparative procedures shall describe all the steps necessary for secure
              acceptance of the delivered OS in accordance with the developer's
              delivery procedures.</title>
            </a-element>
            <a-element type="C">
              <title>The preparative procedures shall describe all the steps necessary for secure
              installation of the OS and for the secure preparation of the
              operational environment in accordance with the security objectives for the operational
              environment as described in the ST.</title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
            </a-element>
            <a-element type="E">
              <title>The evaluator shall apply the preparative procedures to confirm that the OS can be prepared securely for operation.</title>
              <aactivity>As indicated in the introduction above, there are significant expectations
              with respect to the documentation—especially when configuring the operational
              environment to support OS functional requirements. The evaluator
              shall check to ensure that the guidance provided for the OS
              adequately addresses all platforms claimed for the OS in the ST. </aactivity>
            </a-element>
	  
        </a-component>
      </section>
      <section id="alc" title="Class ALC: Life-cycle Support"> At the assurance level provided
        for OSs conformant to this PP, life-cycle support is limited to end-user-visible aspects of
        the life-cycle, rather than an examination of the OS vendor’s development and configuration
        management process. This is not meant to diminish the critical role that a developer’s
        practices play in contributing to the overall trustworthiness of a product; rather, it is a
        reflection on the information to be made available for evaluation at this assurance level.
          <a-component cc-id="alc_cmc.1" name="Labeling of the TOE (ALC_CMC.1)">This component is
          targeted at identifying the OS such that it can be distinguished from
          other products or versions from the same vendor and can be easily specified when being
          procured by an end user. 
            <a-element type="D">
              <title>The developer shall provide the OS and a reference for the
              OS.</title>
            </a-element>
	  
            <a-element type="C">
              <title>The OS shall be labeled with a unique reference.</title>
              <note role="application">Unique reference information includes: 
	      <h:ul>
		<h:li>OS Name</h:li>
		<h:li>OS Version</h:li>
		<h:li>OS Description</h:li>
		<h:li>Software Identification (SWID) tags, if available</h:li>
              </h:ul>
              </note>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
              <aactivity>The evaluator will check the ST to ensure that it contains
              an identifier (such as a product name/version number) that specifically identifies the
              version that meets the requirements of the ST. Further, the
              evaluator will check the AGD guidance and OS samples received for
              testing to ensure that the version number is consistent with that in the ST. If the vendor
			  maintains a web site advertising the OS, the evaluator will examine the information on the web site to
              ensure that the information in the ST is sufficient to distinguish
              the product.</aactivity>
            </a-element>
	  
        </a-component>
        <a-component cc-id="alc_cms.1" name="TOE CM Coverage (ALC_CMS.1)">
	  Given the scope of the OS and its associated evaluation 
	  evidence requirements, this component’s assurance activities are covered 
	  by the assurance activities listed for ALC_CMC.1.
            <a-element type="D">
              <title>
		The developer shall provide a configuration list for the  OS.
	      </title>
            </a-element>
	  
            <a-element type="C">
              <title>The configuration list shall include the following: the OS
              itself; and the evaluation evidence required by the SARs.</title>
            </a-element>
            <a-element type="C">
              <title>The configuration list shall uniquely identify the configuration items.</title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
              <aactivity>The "evaluation evidence required by the SARs" in this PP is limited to the
              information in the ST coupled with the guidance provided to
              administrators and users under the AGD requirements. By ensuring that the OS is specifically identified and that this identification is
              consistent in the ST and in the AGD guidance (as done in the
              assurance activity for ALC_CMC.1), the evaluator implicitly confirms the information
              required by this component. Life-cycle support is targeted aspects of the developer’s
              life-cycle and instructions to providers of applications for the developer’s devices,
              rather than an in-depth examination of the TSF manufacturer’s
              development and configuration management process. This is not meant to diminish the
              critical role that a developer’s practices play in contributing to the overall
              trustworthiness of a product; rather, it’s a reflection on the information to be made
              available for evaluation. <h:br/> The evaluator will ensure that the developer has
              identified (in guidance documentation for application developers concerning the
              targeted platform) one or more development environments appropriate for use in
              developing applications for the developer’s platform. For each of these development
              environments, the developer shall provide information on how to configure the
              environment to ensure that buffer overflow protection mechanisms in the environment(s)
              are invoked (e.g., compiler and linker flags). The evaluator will ensure that this documentation
              also includes an indication of whether such protections are on by default, or have to
              be specifically enabled. The evaluator will ensure that the TSF is
              uniquely identified (with respect to other products from the TSF
              vendor), and that documentation provided by the developer in association with the
              requirements in the ST is associated with the TSF
              using this unique identification.</aactivity>
          </a-element>
	  
        </a-component>
        <a-component cc-id="alc_tsu_ext.1" name="Timely Security Updates"> This component requires the
          OS developer, in conjunction with any other necessary parties, to provide information as
          to how the end-user devices are updated to address security issues in a timely manner. The
          documentation describes the process of providing updates to the public from the time a
          security flaw is reported/discovered, to the time an update is released. This description
          includes the parties involved (e.g., the developer, carriers(s)) and the steps that are
          performed (e.g., developer testing, carrier testing), including worst case time periods,
          before an update is made available to the public. 
            <a-element type="D">
              <title>The developer shall provide a description in the TSS of how timely security
              updates are made to the OS.</title>
            </a-element>
            <a-element type="D">
              <title> The developer shall provide a description in the TSS of how users are notified
              when updates change security properties or the configuration of the product. </title>
            </a-element>
	  
            <a-element type="C">
              <title>The description shall include the process for creating and deploying security
              updates for the OS software.</title>
            </a-element>
            <a-element type="C">
              <title>The description shall include the mechanisms publicly available for reporting
              security issues pertaining to the OS.</title>
              <note> The reporting mechanism could include web sites, email addresses, as well as a
              means to protect the sensitive nature of the report (e.g., public keys that could be
              used to encrypt the details of a proof-of-concept exploit). </note>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all
              requirements for content and presentation of evidence.</title>
              <aactivity> The evaluator will verify that the TSS contains a description of the timely
              security update process used by the developer to create and deploy security updates.
              The evaluator will verify that this description addresses the entire application. The
              evaluator will also verify that, in addition to the OS developer’s process, any
              third-party processes are also addressed in the description. The evaluator will also
              verify that each mechanism for deployment of security updates is described. <h:br/> The
              evaluator will verify that, for each deployment mechanism described for the update
              process, the TSS lists a time between public disclosure of a vulnerability and public
              availability of the security update to the OS patching this vulnerability, to include
              any third-party or carrier delays in deployment. The evaluator will verify that this
              time is expressed in a number or range of days. <h:br/> The evaluator will verify that
              this description includes the publicly available mechanisms (including either an email
              address or website) for reporting security issues related to the OS. The evaluator
              shall verify that the description of this mechanism includes a method for protecting
              the report either using a public key for encrypting email or a trusted channel for a
              website. </aactivity>
            </a-element>
	  
        </a-component>
      </section>
	    
      <section id="ate" title="Class ATE: Tests">Testing is specified for functional aspects of
        the system as well as aspects that take advantage of design or implementation weaknesses.
        The former is done through the ATE_IND family, while the latter is through the AVA_VAN
        family. At the assurance level specified in this PP, testing is based on advertised
        functionality and interfaces with dependency on the availability of design information. One
        of the primary outputs of the evaluation process is the test report as specified in the
        following requirements. 
		<a-component cc-id="ate_ind.1" name="Independent Testing – Conformance (ATE_IND.1)"> 
			Testing is performed to confirm the
          functionality described in the TSS as well as the administrative
          (including configuration and operational) documentation provided. The focus of the testing
          is to confirm that the requirements specified in <xref to="SFRs"/> being met,
          although some additional testing is specified for SARs in <xref to="SARs"/>. The
          Assurance Activities identify the additional testing activities associated with these
          components. The evaluator produces a test report documenting the plan for and results of
          testing, as well as coverage arguments focused on the platform/OS
          combinations that are claiming conformance to this PP. Given the scope of the OS and its associated evaluation evidence requirements, this component’s
          assurance activities are covered by the assurance activities listed for ALC_CMC.1.
            <a-element type="D">
              <title>The developer shall provide the OS for testing.</title>
            </a-element>
	  
            <a-element type="C">
              <title>The OS shall be suitable for testing.</title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator <h:i>shall confirm</h:i> that the information provided meets all
              requirements for content and presentation of evidence.</title>
            </a-element>
            <a-element type="E">
              <title>The evaluator shall test a subset of the TSF to confirm that
              the TSF operates as specified.</title>
              <note role="application">The evaluator will test the OS on the most current fully
              patched version of the platform.</note>
              <aactivity>The evaluator will prepare a test plan and report documenting the testing
              aspects of the system, including any application crashes during testing. The evaluator
              shall determine the root cause of any application crashes and include that information
              in the report. The test plan covers all of the testing actions contained in the <cite
                linkend="bibCEM"/> and the body of this PP’s Assurance Activities. <h:br/> While it is
              not necessary to have one test case per test listed in an Assurance Activity, the
              evaluator must document in the test plan that each applicable testing requirement in
              the ST is covered. The test plan identifies the platforms to be
              tested, and for those platforms not included in the test plan but included in the
                ST, the test plan provides a justification for not testing the
              platforms. This justification must address the differences between the tested
              platforms and the untested platforms, and make an argument that the differences do not
              affect the testing to be performed. It is not sufficient to merely assert that the
              differences have no affect; rationale must be provided. If all platforms claimed in
              the ST are tested, then no rationale is necessary. The test plan
              describes the composition of each platform to be tested, and any setup that is
              necessary beyond what is contained in the AGD documentation. It should be noted that
              the evaluator is expected to follow the AGD documentation for installation and setup
              of each platform either as part of a test or as a standard pre-test condition. This
              may include special test drivers or tools. For each driver or tool, an argument (not
              just an assertion) should be provided that the driver or tool will not adversely
              affect the performance of the functionality by the OS and its
              platform. <h:br/> This also includes the configuration of the cryptographic engine to be
              used. The cryptographic algorithms implemented by this engine are those specified by
              this PP and used by the cryptographic protocols being evaluated (IPsec, TLS). The test
              plan identifies high-level test objectives as well as the test procedures to be
              followed to achieve those objectives. These procedures include expected results. <h:br/>
              The test report (which could just be an annotated version of the test plan) details
              the activities that took place when the test procedures were executed, and includes
              the actual results of the tests. This shall be a cumulative account, so if there was a
              test run that resulted in a failure; a fix installed; and then a successful re-run of
              the test, the report would show a “fail” and “pass” result (and the supporting
              details), and not just the “pass” result.</aactivity>
            </a-element>
	  
        </a-component>
      </section>
      <section id="ava" title="Class AVA: Vulnerability Assessment">For the first generation of
        this protection profile, the evaluation lab is expected to survey open sources to discover
        what vulnerabilities have been discovered in these types of products. In most cases, these
        vulnerabilities will require sophistication beyond that of a basic attacker. Until
        penetration tools are created and uniformly distributed to the evaluation labs, the
        evaluator will not be expected to test for these vulnerabilities in the OS. The labs will be 
		expected to comment on the likelihood of these vulnerabilities given
        the documentation provided by the vendor. This information will be used in the development
        of penetration testing tools and for the development of future protection profiles.
        <a-component cc-id="ava_van.1" name="Vulnerability Survey (AVA_VAN.1)">
            <a-element type="D">
              <title>The developer shall provide the OS for testing.</title>
            </a-element>
	  
          <a-element type="C">
            <title>The OS shall be suitable for testing.</title>
          </a-element>
	  
          <a-element type="E">
            <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
          </a-element>
          <a-element type="E">
            <title>The evaluator shall perform a search of public domain sources to identify
              potential vulnerabilities in the OS.</title>
            <note role="application">Public domain sources include the Common Vulnerabilities 
              and Exposures (CVE) dictionary for publicly-known vulnerabilities.  Public domain
              sources also include sites which provide free checking of files for viruses.</note>
            <!-- their Usage statement does not permit us to mention VirusTotal by name without permission -->
          </a-element>
          <a-element type="E">
            <title>The evaluator shall conduct penetration testing, based on the identified
              potential vulnerabilities, to determine that the OS is resistant to
              attacks performed by an attacker possessing Basic attack potential.</title>
            <aactivity>The evaluator will generate a report to document their
              findings with respect to this requirement. This report could physically be part of the
              overall test report mentioned in ATE_IND, or a separate document. The evaluator
              performs a search of public information to find vulnerabilities that have been found
              in similar applications with a particular focus on network protocols the application
              uses and document formats it parses. 
              The evaluator documents the sources consulted and
              the vulnerabilities found in the report. 
              <h:br/>
              For each vulnerability found, the evaluator
              either provides a rationale with respect to its non-applicability, or the evaluator
              formulates a test (using the guidelines provided in ATE_IND) to confirm the
              vulnerability, if suitable. Suitability is determined by assessing the attack vector
              needed to take advantage of the vulnerability. If exploiting the vulnerability
              requires expert skills and an electron microscope, for instance, then a test would not
              be suitable and an appropriate justification would be formulated.</aactivity>
          </a-element>
	  
        </a-component>
      </section>      
    </section>
  </section>

	    
<!-- Appendix A and B are auto-generated. -->
<!-- Appendix A includes optional, objective, and implementation-dependent requirements -->
<!-- Appendix B is selection-based requirements -->
	    
	    
  <!-- 
       Do NOT put SFRs in this section. All SFR belong up above in SFR section. 
       To make an SFR optional tag it above as status="optional" 
  -->


  <appendix title="References" id="biblio">
    <bibliography>
      <entry id="bibCEM">
        <tag>CEM</tag>
        <description>
          <h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CEMV3.1R4.pdf">Common
            Evaluation Methodology for Information Technology Security - Evaluation Methodology</h:a>,
          CCMB-2012-09-004, Version 3.1, Revision 4, September 2012. </description>
      </entry>
      <entry id="bib-NIST-SP800-147">
        <tag>SP-800-147</tag>
        <description>
          <h:a href="https://www.nist.gov/publications/bios-protection-guidelines">
		  NIST SP800-147 BIOS Protection Guidelines</h:a>, NIST SP800-147, April 29, 2011.
        </description>
      </entry>
      <entry id="bib-NIST-SP800-147B">
        <tag>SP-800-147B</tag>
        <description>
          <h:a href="https://csrc.nist.gov/publications/detail/sp/800-147b/final">
		  NIST SP800-147B BIOS Protection Guidelines for Servers</h:a>, NIST SP800-147B, August 2014.
        </description>
      </entry>
      <entry id="bib-NIST-SP800-147B">
        <tag>SP-800-193</tag>
        <description>
          <h:a href="https://csrc.nist.gov/publications/detail/sp/800-193/final">
		  NIST SP800-193 Platform Firmware Resiliency Guidelines</h:a>, NIST SP800-193, May 2018.
        </description>
      </entry>	  
    </bibliography>
  </appendix>

  <appendix title="Acronyms" id="acronyms">
   <acronyms/>
  </appendix>

  <implements>
    <feature id="a-feature-id" title="Widget Thing">
      <description> If the TOE includes the widget thing, all of the following SFRs must be claimed: <h:ul><h:li> FQQ_QQQ.6</h:li></h:ul>
      </description>
    </feature>
  </implements>
</PP>

