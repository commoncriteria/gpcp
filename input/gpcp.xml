<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../transforms/pp2html.xsl"?>

<PP xmlns="https://niap-ccevs.org/cc/v1"
    xmlns:sec="https://niap-ccevs.org/cc/v1/section" name="Protection Profile for General-Purpose Computing Platforms"
    xmlns:h="http://www.w3.org/1999/xhtml" boilerplate='yes'>

  <!-- <inline-comment color='green'> Hello World QQQQ </inline-comment> -->
  <!-- <inline-comment color='blue' linebreak='yes'> Hello World QQQQ </inline-comment> -->
  <PPReference>
    <ReferenceTable>
      <PPTitle>Protection Profile for General-Purpose Computing Platforms</PPTitle>
      <PPVersion>1.0</PPVersion>
      <PPAuthor>National Information Assurance Partnership</PPAuthor>
      <PPPubDate>2021-02-17</PPPubDate>
      <Keywords>General-Purpose Computing Platforms</Keywords>
    </ReferenceTable>
  </PPReference>

  <RevisionHistory>
    <entry>
      <version>Round 1</version>
      <date>2020-11-09</date>
      <subject>Started</subject>
    </entry>
  </RevisionHistory>
  <RevisionHistory>
    <entry>
      <version>1.0</version>
      <date>2020-11-09</date>
      <subject>Initial release</subject>
    </entry>
  </RevisionHistory>

    <pp-preferences>
<!--        <pp-pref name="display-audit-with-sfrs">0</pp-pref> -->
    	<audit-events-in-sfrs/>
    </pp-preferences>

<!-- 1.0 Introduction   -->
<!--    1.1 Overview   -->
<section title="Introduction" id="int">
    <section title="Overview" id="ppoverview">
      
      	The scope of this Protection Profile (PP) is to
      	describe the security functionality of General-Purpose Computing Platforms in terms of <citeCC/>
      	and to define functional and assurance requirements for such products.<h:br/><h:br/>
  
	A platform is a collection of hardware devices and firmware that provide the functional capabilities and services needed by tenant
	software. Such components typically include embedded controllers, trusted platform modules, management controllers, host processors, network
	interface controllers, graphics processing units, flash memory, storage controllers, storage devices, boot firmware, runtime firmware,
	human interface devices, and a power supply.
    </section>
	
<!--   1.2 Terms   -->
<!--     1.2.1 Common Criteria Terms (auto-generated) -->
<!--     1.2.2 Technical Terms -->
	  
    <tech-terms>
      <term abbr='AES' full="Advanced Encryption Standard"/>
      <term abbr='API' full="Application Programming Interface"/>
      <term full="Address Space Layout Randomization" abbr="ASLR">
	An anti-exploitation feature which loads memory mappings into unpredictable
	locations. ASLR makes it more difficult for an attacker to redirect control to code
	that they have introduced into the address space of a process.
      </term>
      <term full="Administrator">
	An administrator is responsible for management activities, including setting policies that are 
	applied by the enterprise on the operating system.
	This administrator could be acting remotely through a management server, from which the system
	receives configuration policies.
	An administrator can enforce settings on the system which cannot be overridden by non-administrator users.
      </term>
      <term full="Application" abbr="app">
	Software that runs on a platform and performs tasks on behalf of the user
	or owner of the platform, as well as its supporting documentation. 
      </term>
      <term full="Application Programming Interface" abbr="API">
	A specification of routines, data structures, object classes, and variables
	that allows an application to make use of services provided by another software
	component, such as a library. APIs are often provided for a set of libraries included
	with the platform.
      </term>
      <term abbr='CESG' full="Communications-Electronics Security Group"/>
      <term abbr='CMC' full="Certificate Management over CMS"/>
      <term abbr='CMS' full="Cryptographic Message Syntax"/>
      <term abbr='CN' full="Common Names"/>
      <term full="Credential">
	Data that establishes the identity of a user, e.g. a cryptographic key or
	password.
      </term>
      <term abbr='CRL' full="Certificate Revocation List"/>
      <term abbr='CSA' full="Computer Security Act"/>
      <term full="Critical Security Parameters" abbr="CSP">
	Information that is either user or system defined and
	is used to operate a cryptographic module in processing encryption functions including
	cryptographic keys and authentication data, such as passwords, the disclosure or modification
	of which can compromise the security of a cryptographic module or the security of the
	information protected by the module.
      </term>
      <term full="Data At Rest" abbr="DAR" />
      <term full="DAR Protection">
	Countermeasures that prevent attackers, even those with physical access,
	from extracting data from non-volatile storage.
	Common techniques include data encryption and wiping.
      </term>
      <term full="Data Execution Prevention" abbr="DEP">
	An anti-exploitation feature of modern operating systems executing on
	modern computer hardware, which enforces a non-execute permission on pages of memory.
	DEP prevents pages of memory from containing both data and instructions, which makes
	it more difficult for an attacker to introduce and execute code.
      </term>
      <term abbr='DES' full="Data Encryption Standard"/>
      <term full="Developer">
	An entity that writes OS software. For the purposes of this document,
	vendors and developers are the same.
      </term>
      <term full="General Purpose Operating System">
	A class of OSes designed to support a wide-variety of workloads consisting of many concurrent applications or services.
	Typical characteristics for OSes in this class include support for third-party applications,
	support for multiple users, and security separation between users and their respective resources.
	General Purpose Operating Systems also lack the real-time constraint that defines Real Time Operating Systems (RTOS).
	RTOSes typically power routers, switches, and embedded devices.
      </term>
      <term abbr='DHE' full="Diffie-Hellman Ephemeral"/>
      <term abbr='DNS' full="Domain Name System"/>
      <term abbr='DRBG' full="Deterministic Random Bit Generator"/>
      <term abbr='DSS' full="Digital Signature Standard"/>
      <term abbr='DT' full="Date/Time Vector"/>
      <term abbr='DTLS' full="Datagram Transport Layer Security"/>
      <term abbr='EAP' full="Extensible Authentication Protocol"/>
      <term abbr='ECDHE' full="Elliptic Curve Diffie-Hellman Ephemeral"/>
      <term abbr='ECDSA' full="Elliptic Curve Digital Signature Algorithm"/>
      <term abbr='EST' full="Enrollment over Secure Transport"/>
      <term abbr='FIPS' full="Federal Information Processing Standards"/>
      <term abbr='HMAC' full="Hash-based Message Authentication Code"/>
      <term full="Host-based Firewall">
	A software-based firewall implementation running on the OS for filtering inbound and
	outbound network traffic to and from processes running on the OS.
      </term>
      <term abbr='HTTP' full="Hypertext Transfer Protocol"/>
      <term abbr='HTTPS' full="Hypertext Transfer Protocol Secure"/>
      <term abbr='DSS' full="Digital Signature Standard"/>
      <term abbr='IETF' full="Internet Engineering Task Force"/>
      <term abbr='IP' full="Internet Protocol"/>
      <term abbr='ISO' full="International Organization for Standardization"/>
      <term abbr='IT' full="Information Technology"/>
      <term abbr='ITSEF' full="Information Technology Security Evaluation Facility"/>
      <term abbr='NIAP' full="National Information Assurance Partnership"/>
      <term abbr='NIST' full="National Institute of Standards and Technology"/>
      <term abbr='OCSP' full="Online Certificate Status Protocol"/>
      <term abbr='OID' full="Object Identifier"/>
      <term abbr='OMB' full="Office of Management and Budget"/>
      <term full="Operating System" abbr="OS" plural="OSes">
	Software that manages physical and logical resources and provides services
	for applications. The terms <h:i>TOE</h:i> and <h:i>OS</h:i> are interchangeable in this
	document. 
      </term>
      <term abbr='PKI' full="Public Key Infrastructure"/>
      <term abbr='PP' full="Protection Profile"/>
      <term abbr='RBG' full="Random Bit Generator"/>
      <term abbr='RFC' full="Request for Comment"/>
      <term abbr='RNG' full="Random Number Generator"/>
      <term abbr='RNGVS' full="Random Number Generator Validation System"/>
      <term full="Personally Identifiable Information" abbr="PII">
	Any information about an individual maintained by an agency, including, but
	not limited to, education, financial transactions, medical history, and criminal or
	employment history and information which can be used to distinguish or trace an
	individual's identity, such as their name, social security number, date and place of
	birth, mother's maiden name, biometric records, etc., including any other personal
	information which is linked or linkable to an individual.<cite linkend="bibOMB"/>
      </term>
      <term abbr='SAN' full="Subject Alternative Name"/>
      <term abbr='SHA' full="Secure Hash Algorithm"/>
      <term abbr='S/MIME' full="Secure/Multi-purpose Internet Mail Extensions"/>
      <term full="Sensitive Data">
	Sensitive data may include all user or enterprise data or may be specific
	application data such as PII, emails, messaging, documents, calendar items, and contacts.
	Sensitive data must minimally include credentials and keys. Sensitive data shall
	be identified in the OS's TSS by the ST author. 
      </term>
      <term abbr='SIP' full="Session Initiation Protocol"/>
      <term abbr='SWID' full="Software Identification"/>
      <term abbr='TLS' full="Transport Layer Security"/>
      <term abbr='URI' full="Uniform Resource Identifier"/>
      <term abbr='URL' full="Uniform Resource Locator"/>
      <term abbr='USB' full="Universal Serial Bus"/>
      <term full="User">
	A user is subject to configuration policies applied
	to the operating system by administrators.  On some systems under certain
	configurations, a normal user can temporarily elevate privileges to that of an administrator.
	At that time, such a user should be considered an administrator.
      </term>
	  <term abbr="VM" full="Virtual Machine">Blah Blah Blah</term>
      <term abbr='XCCDF' full="eXtensible Configuration Checklist Description Format"/>
      <term abbr='XOR' full="Exclusive Or"/>
    </tech-terms>   
	
<!--   1.3 Compliant Targets of Evaluation -->
    <section title="Compliant Targets of Evaluation" id="TOEdescription">
  	A general-purpose computing platform is a hardware device that it capable
	of hosting more than one different operating system, virtualization system,
	or bare-metal application. Typical platform implementations include--but are not
	limited to--servers, PC clients, laptops, and tablets.<h:br/><h:br/>

<!--      1.3.1 TOE Boundary -->	    
      <section title="TOE Boundary" id="TOEboundary">
        <figure entity="images/Toe.png" title="General TOE " id="toe"/>
	TODO: Add a description of what is in the TOE ahd what is outside. 
	E.g. Tenant software is outside. Is everything else inside?
      </section>

<!--     1.3.2 TOE Operational Environment -->
      <section title="TOE Operational Environment" id="TOEopenv">
	      The TOE has no platform since it is itself a platform. But the TOE does have an operational environment. The OE consists of the 
	      physical environment in which the TOE operates (e.g., data center, vehicle, outdoors) and any networks to which the TOE may be connected.
      </section>
    </section>
	
<!--   1.4 Use Cases  -->
    <section title="Use Cases" id="usecases">
   	TODO: Requirements in this Protection Profile are designed to
      	address the security problems in at least the following use cases.
	Is the major distinction going to be related to physical protections?
<!--	    
-->
	    
	<!-- Physical protections are one of the major differences in use cases. There are probably 
	four levels of physical protections. 
	    1. None. Physical protection commensurate with the value of the information is assumed to be
		provided by the operational environment.
		2. Tamper Detect without Automatic Notification (FPT_PHP.1)
		3. Tamper Detect with Automtic Notification (FPT_PHP.2)
		4. Tamer Resistance (FPT_PHP.3)
		We just have to align these levels with the use cases.
	-->
	<usecases>
		<usecase title="Server-Class Platform, Data Center-based" id="server-dc">
        	  	<description>
				Server-class hardware in a data center is assumed to be physically protected by the operational environment. 
          		</description>
	        </usecase>
		<usecase title="Server-Class Platform, Field-based (Edge servers)" id="servers-edge">
        	  	<description>
				Field-based (edge) servers may be physically protected or not.
          		</description>
	        </usecase>
		<usecase title="Thin/Zero Clients" id="clients-thin">
        	  	<description>
				Client platforms that run thin client operating systems.
				It would be great if we could fold this into one or both of the client platform use cases. At the boot firmware level, are they really 
				any different.
          		</description>
	        </usecase>
		<usecase title="Portable Clients, (laptopns, tablets)" id="clients-portable">
        	  	<description>
				High-assurance, and normal. THe difference between high-assurance and normal would likely be the degree of physical protection 
				implemented by the platform.
          		</description>
	        </usecase>
		<usecase title="Desktop clients" id="clients-desktop">
        	  	<description>
				High-assurance, and normal
          		</description>
	        </usecase>
		<usecase title="IoT Devices" id="iot-device">
        	  	<description>
				IoT devices are field-located devices without human interfaces when in normal operation. In order to qualify for evaluation 
				under this PP, the device must meet the basic criteria for a general-purpose platform. 
          		</description>
	        </usecase>
		<usecase title="Network Devices" id="network-device">
        	  	<description>
				Network devices are not addressed by this PP. They are addressed by the collaborative Protection Profile for Network Devices.
				Server-class platforms that run virtualized network devices fall under one of the server-class platform use cases.
          		</description>
	        </usecase>
		<usecase title="Mobile Devices" id="mobile-device">
        	  	<description>
				Mobile devices, as defined by the Protection Profile for Mobile Device Fundamentals, are not addressed by this PP.
          		</description>
	        </usecase>	
      </usecases>
    </section>
  </section>

<!-- 2.0 Conformance Claims (this is all boilerplate) -->
  <section title="Conformance Claims" id="cclaims"/>
	
<!-- 3.0 Security Problem Description -->
  <section title="Security Problem Description" id="spd">
	The security problem is described in terms
    	of the threats that the GPCP is expected to address, assumptions about the
    	operational environment, and any organizational security policies that the GPCP
    	is expected to enforce.<h:br/><h:br/>
  	The platform has three major security responsibilities:
	<h:ul>
		<h:li>ensuring the integrity of its own firmware</h:li>
		<h:li>ensuring that it is resilient</h:li>
		<h:li>providing security services to tenant workloads</h:li>
	</h:ul>
	These responsibilities manifest as protecting: 
	<h:ul>
		<h:li>Platform firmware</h:li>
		<h:li>Platform firmware updates</h:li>
		<h:li>Tenant initialization (boot)</h:li>
	</h:ul>
	  

<!--    3.1 Threats -->
	  
    <section title="Threats" id="threats">
      <threats>
        <threat name="T.PHYSICAL">
          <description>An attacker with physical access might be able to compromise TOE integrity, subvert
		  TOE protections, or access tenant data through hardware attacks such as probing, physical
		  manipulation, fault-injection, side-channel analysis, environmental stress, or activating
		  disabled features or pre-delivery services.</description>
          <objective-refer ref="O.OBJECTIVE">
            <rationale>The threat T.PHYSICAL is countered by O.OBJECTIVE as this
              provides for integrity of transmitted data.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.SIDE_CHANNEL_LEAKAGE">
          <description>An attacker running in a tenant context might be able to leverage physical
		  effects caused by the operation of the TOE to derive sensitive information about
		  other tenants or the TOE.</description>
          <objective-refer ref="O.OBJECTIVE">
            <rationale>The threat T.SIDE_CHANNEL_LEAKAGE is countered by O.OBJECTIVE as this
              provides for integrity of transmitted data.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.PERSISTENCE">
          <description>An attacker might be able to establish a permanent presence on the TOE in
		  firmware. This could result in permanent compromise of tenant information, as
		  well as TOE updates. This threat does not encompass attacker presence in tenant
		  software, as tenant software is not part of the TOE. </description>
          <objective-refer ref="O.OBJECTIVE">
            <rationale>The threat T.PERSISTENCE is countered by O.OBJECTIVE as this
              provides for integrity of transmitted data.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.UPDATE_COMPROMISE">
          <description>An attacker may attempt to provide a compromised update of TOE firmware. 
		  Such updates can undermine the security functionality of the device if they are
		  unauthorized, unauthenticated, or are improperly validated using non-secure or
		  weak cryptography.</description>
          <objective-refer ref="O.OBJECTIVE">
            <rationale>The threat T.UPDATE_COMPROMISE is countered by O.OBJECTIVE as this
              provides for integrity of transmitted data.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.SECURITY_FUNCTIONALITY_FAILURE">
          <description>An attacker could leverage failed or compromised security functionality to 
		  access, change, or modify tenant data, TOE data, or other security functionality
		  of the device.</description>
          <objective-refer ref="O.OBJECTIVE">
            <rationale>The threat T.SECURITY_FUNCTIONALITY_FAILURE is countered by O.OBJECTIVE as this
              provides for integrity of transmitted data.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.TENANT-BASED_ATTACK">
          <description>An attacker running software as a tenant can attempt to access or modify
		  TOE firmware or functionality. Note that direct tenant attacks against other
		  tenants are not encompassed by this threat as they out of scope.</description>
          <objective-refer ref="O.OBJECTIVE">
            <rationale>The threat T.TENANT-BASED_ATTACK is countered by O.OBJECTIVE as this
              provides for integrity of transmitted data.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.REMOTE_ATTACK">
          <description>An attacker from off the TOE can attempt to compromise the TOE
		  through a network interface connected to an active TOE component, such
		  as a management subsystem.</description>
          <objective-refer ref="O.OBJECTIVE">
            <rationale>The threat T.REMOTE_ATTACK is countered by O.OBJECTIVE as this
              provides for integrity of transmitted data.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.UNAUTHORIZED_RECONFIGURATION">
          <description>An attacker might be able to modify the configuration of the TOE and alter its 
		  functionality. This might include, activating dormant subsystems, disabling hardware assists,
		  or altering boot-time behaviors.</description>
          <objective-refer ref="O.OBJECTIVE">
            <rationale>The threat T.UNAUTHORIZED_RECONFIGURATION is countered by O.OBJECTIVE as this
              provides for integrity of transmitted data.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.UNAUTHORIZED_PLATFORM_ADMINISTRATOR">
          <description>An attacker might be able to attain platform administrator status by defeating or bypassing
		  authentication measures.</description>
          <objective-refer ref="O.OBJECTIVE">
            <rationale>The threat T.UNAUTHORIZED_PLATFORM_ADMINISTRATOR is countered by O.OBJECTIVE as this
              provides for integrity of transmitted data.</rationale>
          </objective-refer>
        </threat>
      </threats>
    </section>
	  
<!--   3.2 Assumptions  -->
    <section title="Assumptions" id="assumptions">
      <assumptions>
        <assumption name="A.PHYSICAL_PROTECTION">
          <description>The TOE is assumed to be physically protected in its operational environment and
		  thus is not subject to physical attacks that could compromise its security or its ability
		  to support the security of tenant workloads. </description>
          <objective-refer ref="OE.PHYSICAL_PROTECTION">
            <rationale> The operational environment objective OE.PHYSICAL_PROTECTION is realized through
              A.PHYSICAL_PROTECTION. </rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.ROT_INTEGRITY">
          <description>The TOE includes one or more Roots of Trust composed of TOE firmware, hardware, and
		  pre-installed credentials. Roots of Trust are assumed to be free of malicious capabilities as
		  their integrity cannot be verified. </description>
          <objective-refer ref="OE.ROT_INTEGRITY">
            <rationale>The operational environment objective OE.SUPPLY_CHAIN is realized through
              A.ROT_INTEGRITY.</rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.TRUSTED_ADMIN">
          <description> The administrator of the TOE is not careless, willfully negligent or hostile.</description>
          <objective-refer ref="OE.TRUSTED_ADMIN">
            <rationale>The operational environment objective OE.TRUSTED_ADMIN is realized through
              A.TRUSTED_ADMIN.</rationale>
          </objective-refer>
        </assumption>
      </assumptions>
    </section>
	  
<!--   3.3 Organizational Security Policies -->
    <section title="Organizational Security Policies" id="OSPs">
      <OSPs>
        <OSP id="P.ENTERPRISE">
          <description>If the OS is bound to a directory or management server, the configuration of
            the OS software must be capable of adhering to the enterprise security policies
            distributed by them.</description>
          <objective-refer ref="O.MANAGEMENT">
            <rationale>The organizational security policy P.ENTERPRISE is enforced through the
              objective O.MANAGEMENT as this objective represents how the enterprise and user assert
              management over the OS.</rationale>
          </objective-refer>
        </OSP>
      </OSPs>
    </section>
  </section>
	    
<!-- 4.0 Security Objectives -->
  <section title="Security Objectives" id="obj">
	  
<!--   4.1 Security Objectives for the TOE -->
    <section title="Security Objectives for the TOE" id="SecurityObjectivesTOE">
      <SOs>
        <SO name="O.ACCOUNTABILITY">
          <description> Conformant OSes ensure that information exists that allows
            administrators to discover unintentional issues with the configuration and operation of
            the operating system and discover its cause.  Gathering event information and immediately
            transmitting it to another system can also enable incident response in the event
            of system compromise.</description>
          <addressed-by>FAU_GEN.1</addressed-by><rationale>'cause FAU_GEN.1 is awesome</rationale>
          <addressed-by>FTP_ITC_EXT.1</addressed-by><rationale>Cause FTP reasons </rationale>
        </SO>
        <SO name="O.INTEGRITY">
          <description>Conformant OSes ensure the integrity of their update
            packages. OSes are seldom if ever shipped without errors, and the
            ability to deploy patches and updates with integrity is critical to enterprise network
            security. Conformant OSes provide execution environment-based
            mitigations that increase the cost to attackers by adding complexity to the task of
            compromising systems. </description>
            <addressed-by>FPT_SBOP_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FPT_ASLR_EXT.1</addressed-by><rationale>ASLR For reasons </rationale>
            <addressed-by>FPT_TUD_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FPT_TUD_EXT.2</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FCS_COP.1/HASH</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FCS_COP.1/SIGN</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FCS_COP.1/KEYHMAC</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FPT_ACF_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FPT_SRP_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FIA_X509_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FPT_TST_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FTP_ITC_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FPT_W^X_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FIA_AFL.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FIA_UAU.5</addressed-by><rationale>For reasons </rationale>
        </SO>
        <SO name="O.MANAGEMENT">
          <description> To facilitate management by users and the enterprise, conformant OSes
	    provide consistent and supported interfaces for their
            security-relevant configuration and maintenance. This includes the deployment of
            applications and application updates through the use of platform-supported deployment
            mechanisms and formats, as well as providing mechanisms for configuration and
            application execution control. </description>
            <addressed-by>FMT_MOF_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FMT_SMF_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FTA_TAB.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FTP_TRP.1</addressed-by><rationale>For reasons </rationale>
        </SO>
        <SO name="O.PROTECTED_STORAGE">
          <description>
		To address the issue of loss of confidentiality of credentials in the event of
		loss of physical control of the storage medium, conformant OSes
		provide data-at-rest protection for credentials.
		Conformant OSes also provide access controls which allow users to keep their files private from other
		users of the same system.
          </description>
          <addressed-by>FCS_STO_EXT.1, FCS_RBG_EXT.1, FCS_COP.1/ENCRYPT, FDP_ACF_EXT.1</addressed-by>
          <rationale>Rationale for a big chunk</rationale>
        </SO>
        <SO name="O.PROTECTED_COMMS">
          <description> To address both passive (eavesdropping) and active (packet modification)
            network attack threats, conformant OSes provide mechanisms to create
            trusted channels for CSP and sensitive data. Both CSP and sensitive data
            should not be exposed outside of the platform. </description>
          <addressed-by>
            FCS_RBG_EXT.1, FCS_CKM.1, FCS_CKM.2, FCS_CKM_EXT.4, FCS_COP.1/ENCRYPT,
            FCS_COP.1/HASH, FCS_COP.1/SIGN, FCS_COP.1/HMAC, FDP_IFC_EXT.1, FIA_X509_EXT.1,
            FIA_X509_EXT.2, FTP_ITC_EXT.1
          </addressed-by>
          <rationale>Rationale for a big chunk</rationale>
        </SO>
      </SOs>
    </section>
	  
<!--   4.2 Security Objectives for the Operational Environment -->
    <section title="Security Objectives for the Operational Environment"
      id="SecurityObjectivesTOEorEnvironment">The following security objectives for the operational
      environment assist the OS in correctly providing its security functionality.
      These track with the assumptions about the environment. <SOEs>
        <SOE name="OE.PLATFORM">
          <description>The OS relies on being installed on trusted
            hardware.</description>
        </SOE>
        <SOE name="OE.PROPER_USER">
          <description> The user of the OS is not willfully negligent or hostile,
            and uses the software within compliance of the applied enterprise security policy.
            Standard user accounts are provisioned in accordance with the least privilege model.
            Users requiring higher levels of access should have a separate account dedicated for
            that use. </description>
        </SOE>
        <SOE name="OE.PROPER_ADMIN">
          <description> The administrator of the OS is not careless, willfully
            negligent or hostile, and administers the OS within compliance of the applied enterprise
            security policy. </description>
        </SOE>
      </SOEs></section>
	  
<!--   4.3 Security Objectives Rationale -->
    <section title="Security Objectives Rationale" id="SOR">
      <!-- This section is populated by boilerplates.xsl in transforms. -->
      </section>
  </section>

<!-- 5.0 Security Requirements -->
  <section title="Security Requirements" id="req">
	  
<!--   5.1 Security Functional Requirements -->
    <section title="Security Functional Requirements" id="SFRs">

	<section id="fau" title="Security Audit (FAU)">
		
	<!-- FAU_GEN.1 Audit Data Generation-->
		<f-component cc-id="fau_gen.1" name="Audit Data Generation" status="sel-based">
			<depends on-sel="sel-audit-integrity"/>
			<depends on-sel="sel-audit-update"/>
			<depends on-sel="sel-tud2-audit"/>
			<depends on-sel="sel-tud3-audit"/>
			<f-element id="fau-gen-1e1">
				<title>The TSF shall be able to generate an audit record of the following auditable events:<h:br/>
					<h:ol type="1">
						<h:li>Start-up and shutdown of the audit functions</h:li>
						<h:li>All auditable events for the [not selected] level of audit</h:li>
						<h:li>All administrative actions</h:li>
						<h:li>Start-up, shutdown, and reboot of the platform</h:li>
						<h:li>Specifically defined auditable events in Table 1</h:li>
						<h:li>[selection: Audit records reaching [assignment: integer value less than 100] percentage of audit capacity, [assignment: other auditable events derived from this profile]]</h:li>
						<h:li>[selection: Specifically defined auditable event in Table 2, no additional auditable events]</h:li>
					</h:ol>
				</title>
			</f-element>
			<note role="application">
				The ST Author should include this SFR in the ST if the TOE generates audit events for integrity verification or boot failures
				as indicated by the appropriate selections in FPT_ROT_EXT.1.2 and FPR_ROT_EXT.2.2.
			</note>
			<audit-event/>
		</f-component>
    	</section>

	<section id="fcs" title="Cryptographic Support (FCS)">
		
		<f-component cc-id="fcs_ckm.1" iteration="AK" name="Cryptographic Key Generation (Asymmetric Keys)" status="optional">
			<!--			<exportable id="inf-gpcp-fcs-ckm-ak"/>  -->
			<!-- 			<importable inf-id="inf-dsc-fcs-ckm-ak"/>  -->
			<f-element id="fcs-ckm-1e1-ak">
				<title>The TSF shall generate <h:b>asymmetric</h:b> cryptographic keys using the methods defined by 
					the following rows in <xref to="fcs-ckm-1-ak-sels"/>:
					<!-- [selection: identifier from Supported Methods for Asymmetric Key Generation table] --> 
					<selectables>
						<selectable id="sel-fcs-ckm-ak-ak1">AK1</selectable>
						<selectable id="sel-fcs-ckm-ak-ak2">AK2</selectable>
						<selectable id="sel-fcs-ckm-ak-ak3">AK3</selectable>
						<selectable id="sel-fcs-ckm-ak-ak4">AK4</selectable>
						<selectable id="sel-fcs-ckm-ak-ak5">AK5</selectable>
					</selectables>.<h:p/>
					<h:b><ctr ctr-type='Table' id="fcs-ckm-1-ak-sels">: Supported Methods for Asymmetric Key Generation</ctr></h:b><h:br/>	
					<h:table>
						<h:tr class="header"><h:td>Identifier</h:td><h:td>Key Type</h:td><h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-ak-ak1"/>
						<h:td>AK1</h:td>
						<h:td>RSA</h:td>
						<h:td><selectables>
							<selectable id="sel-exp-ak-rsa-2048">2048 bit</selectable>
							<selectable id="sel-exp-ak-rsa-3072">3072-bit</selectable></selectables></h:td>
						<h:td>FIPS PUB 186-4 (Section B.3)</h:td></h:tr>
						
						<h:tr><depends on-sel="sel-fcs-ckm-ak-ak2"/>
						<h:td>AK2</h:td>
						<h:td>ECC-N</h:td>
						<h:td><selectables>
							<selectable id="sel-exp-ak-eccn-P256">256 (P-256)</selectable>
							<selectable id="sel-exp-ak-eccn-P384">384 (P-384)</selectable>
							<selectable id="sel-exp-ak-eccn-P521">521 (P-521)</selectable></selectables></h:td>
						<h:td>FIPS PUB 186-4 (Section B.4 &amp; D.1.2)</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-ak-ak3"/>
						<h:td>AK3</h:td>
						<h:td>ECC-B</h:td>
						<h:td><selectables>
							<selectable id="sel-exp-ak-ecc-bpP256r1">256 (brainpoolP256r1)</selectable>
							<selectable id="sel-exp-ak-ecc-bpP384r1">384 (brainpoolP384r1)</selectable>
							<selectable id="sel-exp-ak-ecc-bpP512r1">512 (brainpoolP512r1)</selectable></selectables></h:td>
						<h:td>RFC5639 (Section 3) (Brainpool Curves)</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-ak-ak4"/>
						<h:td>AK4</h:td>
						<h:td>DSA</h:td>
						<h:td>DSA Bit lengths of p and q respectively (L, N) 
							<selectables>
								<selectable id="sel-exp-ak-dsa-1024-160">(1024, 160)</selectable>
								<selectable id="sel-exp-ak-dsa-2048-224">(2048, 224)</selectable>
								<selectable id="sel-exp-ak-dsa-2048-256">(2048, 256)</selectable>
								<selectable id="sel-exp-ak-dsa-3027-256">(3027, 256)</selectable></selectables></h:td>
						<h:td>FIPS 186-4 Appendix B.1</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-ak-ak5"/>
						<h:td>AK5</h:td>
						<h:td>Curve25519</h:td>
						<h:td>256 bits</h:td>
						<h:td>RFC 7748</h:td></h:tr>
					</h:table>
				</title>
				<note role="application">					
					This requirement is included for the purposes of encryption and decryption operations only. To
					support ITE protected communications requirement for the transfer of encrypted data, this 
					requirement mandates implementation compliance to FIPS 186-4 only. Implementations
					according to FIPS 186-2 or FIPS 186-3 will not be accepted.<h:p/>
					This requirement must be claimed by the TOE if at least one of FCS_CKM.1 or FCS_CKM.1/KEK
					chooses a selection related to generation of asymmetric keys.
				</note>
				<aactivity>
					<no-tests/>
				</aactivity>
			</f-element>
		</f-component>
	  
		<f-component cc-id="fcs_ckm.1" iteration="SK" name="Cryptographic Key Generation (Symmetric Encryption Key)" status="optional">
<!--			<exportable id="inf-gpcp-fcs-ckm-sk"/> -->
<!--			<importable inf-id="inf-dsc-fcs-ckm-sk"/> -->
			<f-element id="fcs-ckm-1e1-sk">
				<title>The TSF shall generate <h:b>symmetric</h:b> cryptographic keys using the methods defined by 
					the following rows in <xref to="fcs-ckm-1-sk-sels"/>:
				<!-- [selection: identifier from Supported Methods for Symmetric Encryption Key Generation table] -->
					<selectables>
						<selectable id="sel-fcs-ckm-sk-rsk">RSK</selectable>
						<selectable id="sel-fcs-ckm-sk-dsk">DSK</selectable>
						<selectable id="sel-fcs-ckm-sk-pbk">PBK</selectable>
					</selectables>.<h:p/>
					<h:b><ctr ctr-type='Table' id="fcs-ckm-1-sk-sels">: Supported Methods for Symmetric Key Generation</ctr></h:b><h:br/>	
					<h:table>
						<h:tr class="header"><h:td>Identifier</h:td><h:td>Key Type</h:td>
							<h:td>Cryptographic Key Generation Algorithm</h:td><h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-sk-rsk"/>
							<h:td>RSK</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>submask</selectable>
							<selectable>authorization value</selectable></selectables></h:td>
						<h:td>Direct Generation from a Random Bit Generator as specified in FCS_RBG_EXT.1</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							<selectable>512</selectable></selectables> bits</h:td>
						<h:td>NIST SP 800-133 (Section 7.1) with ISO 18031 as an approved RBG in addition
							to those in NIST SP 800-133 (Section 5).</h:td></h:tr>
							
						<h:tr><depends on-sel="sel-fcs-ckm-sk-dsk"/>
							<h:td>DSK <selectables> 
							<selectable>identifier from Table 16: Key Derivation Functions</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>Key Type from Table 16: Key Derivation Functions</selectable></selectables></h:td>
						<h:td>Derived from a Key Derivation Function as specified in FCS_CKM_EXT.5 
							<selectables>
								<selectable>Key Derivation Algorithm from Table 16: Key Derivation Function</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>key sizes from Table 16: Key Derivation Functions</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>List of Standards from Table 16: Key Derivation Functions</selectable></selectables></h:td></h:tr>
						
						<h:tr><depends on-sel="sel-fcs-ckm-sk-pbk"/>
							<h:td>PBK</h:td>
						<h:td><selectables>
							<selectable>submask</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable></selectables></h:td>
						<h:td>Derived from a Password Based Key Derivation Function as specified in FCS_COP.1/PBKDF</h:td>
						<h:td><selectables>
							<selectable>key sizes as specified in FCS_COP.1/PBKDF</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>standards as specified in FCS_COP.1/PBKDF</selectable></selectables></h:td></h:tr>
					</h:table>
				</title>
				<note role="application">
					The selection of key size 512 bits is for the case of XTS-AES using AES-256. In the case of XTSAES
					for both AES-128 and AES-256, the developer is expected to ensure that the full key is
					generated using direct generation from the RBG as in NIST SP 800-133 section.<h:p/>
					The ST author selects at least one algorithm from the RSK row if the ST supports creating keys
					directly from the output of the RBG without further conditioning, at least one algorithm from the
					DSK row should be selected if the ST supports key derivation functions which are usually seeded
					from RBG and then further conditioned to the appropriate key size, and at least one algorithm
					from the PBK row should be selected if the ST supports keys derived from passwords.<h:p/>
					If DSK is selected, the selection-based SFR FCS_CKM_EXT.5 must be claimed by the TOE.<h:p/>
					If PBK is selected, the selection-based SFR FCS_COP.1/PBKDF must be claimed by the TOE.<h:p/>
					This requirement must be claimed by the TOE if at least one of FCS_CKM.1 or FCS_CKM.1/KEK
					chooses a selection related to generation of symmetric keys.<h:p/>
				</note>
				<aactivity>
					<no-tests/>
				</aactivity>
			</f-element>
		</f-component>
		
	<!-- FCS_CKM.1/KEK Cryptographic Key Generation (Key Encryption Key)  -->
	<f-component cc-id="fcs_ckm.1" iteration="KEK" name="Cryptographic Key Generation (Key Encryption Key)" status="optional">
<!--			<exportable id="inf-gpcp-fcs-ckm-kek"/>  -->
<!--			<importable inf-id="inf-dsc-fcs-ckm-kek"/>  -->
		<f-element id="fcs-ckm-1e1-kek">
			<title>The TSF shall generate key encryption keys in accordance with a specified
				cryptographic key generation algorithm corresponding to 
				<selectables linebreak="yes">
					<selectable>Asymmetric KEKs generated in accordance with FCS_CKM.1/AK identifier AK1</selectable>
					<selectable>Symmetric KEKs generated in accordance with FCS_CKM.1/SK</selectable>
					<selectable>Derived KEKs generated in accordance with FCS_CKM_EXT.5</selectable>
				</selectables>
				and specified cryptographic key sizes <assignable>cryptographic key sizes</assignable> that meet the
				following: <assignable>list of standards</assignable>.
			</title>
			<note role="application">
				KEKs protect KEKs and Symmetric Keys (SKs). DSCs should use key strengths commensurate
				with protecting the chosen symmetric encryption key strengths.<h:p/>
				If Asymmetric KEKs generated in accordance with FCS_CKM.1/AK is selected, the selection-based
				SFR FCS_CKM.1/AK must be claimed by the TOE.<h:p/>
				If Symmetric KEKs generated in accordance with FCS_CKM.1/SK is selected, the selection-based
				SFR FCS_CKM.1/SK must be claimed by the TOE.<h:p/>
				If Derived KEKs generated in accordance with FCS_CKM_EXT.5 is selected, the selection-based
				SFR FCS_CKM_EXT.5 must be claimed by the TOE.<h:p/>
			</note>
			<aactivity>
				<no-tests>Test test test</no-tests>
			</aactivity>
		</f-element>
		<audit-event/>		
	</f-component>

	<f-component cc-id="fcs_ckm.2" name="Cryptographic Key Establishment" status="optional">
<!--			<exportable id="inf-gpcp-fcs-ckm-est"/>   -->
<!--			<importable inf-id="inf-dsc-fcs-ckm-est"/>   -->
			<f-element id="fcs-ckm-2e1">
				<title>The TSF shall establish cryptographic keys in accordance with a specified
					cryptographic key establishment method: 
					<selectables linebreak="yes">
						<selectable>RSA-based key establishment schemes that meet the following: NIST Special
							Publication 800-56B Revision 2, “Recommendation for Pair-Wise Key Establishment
							Schemes Using Integer Factorization Cryptography”</selectable>
						<selectable>RSA-based key establishment schemes that meet the following: RSAES-PKCS1-v1_5
							as specified in Section 7.2 of RFC 8017, “Public-Key Cryptography Standards
							(PKCS) #1: RSA Cryptography Specifications Version 2.2”</selectable>
						<selectable>Elliptic curve-based key establishment schemes that meet the following: 
							<selectables linebreak="yes">
								<selectable>NIST Special Publication 800-56A Revision 3, “Recommendation for Pair-Wise
									Key Establishment Schemes Using Discrete Logarithm Cryptography”</selectable>
								<selectable>RFC 7748, “Elliptic Curves for Security”</selectable>
							</selectables></selectable>
						<selectable>Finite field-based key establishment schemes that meet the following: NIST Special
							Publication 800-56A Revision 3, “Recommendation for Pair-Wise Key Establishment
							Schemes Using Discrete Logarithm Cryptography”</selectable>
						<selectable>Elliptic Curve Integrated Encryption Scheme (ECIES) that meets the following:
							<selectables linebreak="yes">
								<selectable>ANSI X9.63 - Public Key Cryptography for the Financial Services Industry
									Key Agreement and Key Transport Using Elliptic Curve Cryptography</selectable>
								<selectable>IEEE 1363a - Standard Specification for Public-Key Cryptography -
									Amendment 1: Additional Techniques</selectable>
								<selectable>ISO/IEC 18033-2 - Information Technology - Security Techniques -
									Encryption Algorithms - Part 2: Asymmetric Ciphers</selectable>
								<selectable>SECG SEC1 - Standards for Efficient Cryptography Group Elliptic Curve
									Cryptography, section 5.1 Elliptic Curve Integrated Encryption Scheme</selectable>
							</selectables></selectable>
					</selectables> <h:s>that meets the following: [<h:i>assignment: list of standards</h:i>]</h:s>.
				</title>
				<note role="application">
					This is a refinement of the SFR FCS_CKM.2 to deal with key establishment rather than key
					distribution.<h:p/>
					The ST author selects all key establishment schemes used for the selected cryptographic protocols.<h:p/>
					The RSA-based key establishment schemes are described in Section 8 of NIST SP 800-56B Revision
					2 [NIST-RSA]; however, Section 8 relies on implementation of other sections in SP 800-56B Revision 2.<h:p/>
					The elliptic curves used for the key establishment scheme correlate with the curves specified in
					FCS_CKM.1/AK.<h:p/>
					The selections in this SFR must be consistent with those for FCS_COP.1/KAT.<h:p/>
				</note>
				<aactivity>
					<no-tests/>
				</aactivity>
			</f-element>
		</f-component>

		<f-component cc-id="fcs_ckm_ext.5" name="Cryptographic Key Derivation" status="optional">
		<!-- <exportable id="inf-gpcp-fcs-ckm-derv"/> -->
		<!-- <exportable inf-id="inf-dsc-fcs-ckm-derv"/> -->
			<f-element id="fcs-ckm-ext-5e1">
				<title>The TSF shall generate cryptographic keys using the Key Derivation Functions defined by the following 
					rows of <xref to="fcs-ckm-keydrv-sels"/>:
					<selectables>
						<selectable id="sel-fcs-ckm-keydrv-1">KeyDrv1</selectable>
						<selectable id="sel-fcs-ckm-keydrv-2">KeyDrv2</selectable>
						<selectable id="sel-fcs-ckm-keydrv-3">KeyDrv3</selectable>
						<selectable id="sel-fcs-ckm-keydrv-4">KeyDrv4</selectable>
						<selectable id="sel-fcs-ckm-keydrv-5">KeyDrv5</selectable>
						<selectable id="sel-fcs-ckm-keydrv-6">KeyDrv6</selectable>
						<selectable id="sel-fcs-ckm-keydrv-7">KeyDrv7</selectable>
						<selectable id="sel-fcs-ckm-keydrv-8">KeyDrv8</selectable>
					</selectables>.<h:p/>
					<h:b><ctr ctr-type='Table' id="fcs-ckm-keydrv-sels">: Key Derivation Functions</ctr></h:b><h:br/>	
					<h:table>
						<h:tr class="header"><h:td>Identifier</h:td><h:td>Key Type</h:td><h:td>Input Parameters</h:td>
						<h:td>Key Derivation Algorithm</h:td><h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-1"/>
							<h:td>KeyDrv1</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Direct Generation from a Random Bit Generator as specified in FCS_RBG_EXT.1 </h:td>
						<h:td>KDF in Counter Mode using <selectables>
								<selectable>CMAC-AES-128</selectable>
								<selectable>CMAC-AES-192</selectable>
								<selectable>CMAC-AES-256</selectable>
								<selectable>HMAC-SHA-1</selectable>
								<selectable>HMAC-SHA-256</selectable>
								<selectable>HMAC-SHA-512</selectable>
							</selectables>as the PRF</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>NIST SP 800-108 (Section 5.1) (KDF in Counter Mode)<h:p/>
							<selectables>
								<selectable>ISO-CMAC</selectable>
								<selectable>NIST-CMAC</selectable>
								<selectable>ISO-CIPH</selectable>
								<selectable>ISO-HMAC</selectable> 
								<selectable>FIPS-HMAC</selectable>
								<selectable>ISO-HASH</selectable>
								<selectable>FIPS-SHA</selectable>
								</selectables></h:td>
						</h:tr>
		
						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-2"/>
						<h:td>KeyDrv2</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Direct Generation from a Random Bit Generator as specified in FCS_RBG_EXT.1 </h:td>
						<h:td>KDF in Feedback Mode using <selectables>
								<selectable>CMAC-AES-128</selectable>
								<selectable>CMAC-AES-192</selectable>
								<selectable>CMAC-AES-256</selectable>
								<selectable>HMAC-SHA-1</selectable>
								<selectable>HMAC-SHA-256</selectable>
								<selectable>HMAC-SHA-512</selectable>
							</selectables>as the PRF</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>NIST SP 800-108 (Section 5.2) (KDF in Feedback Mode)<h:p/>
							<selectables>
								<selectable>ISO-CMAC</selectable>
								<selectable>NIST-CMAC</selectable>
								<selectable>ISO-CIPH</selectable>
								<selectable>ISO-HMAC</selectable> 
								<selectable>FIPS-HMAC</selectable>
								<selectable>ISO-HASH</selectable>
								<selectable>FIPS-SHA</selectable>
								</selectables></h:td>
						</h:tr>
		
						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-3"/>
						<h:td>KeyDrv3</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Direct Generation from a Random Bit Generator as specified in FCS_RBG_EXT.1 </h:td>
						<h:td>KDF in Double Pipeline Iteration Mode using <selectables>
								<selectable>CMAC-AES-128</selectable>
								<selectable>CMAC-AES-192</selectable>
								<selectable>CMAC-AES-256</selectable>
								<selectable>HMAC-SHA-1</selectable>
								<selectable>HMAC-SHA-256</selectable>
								<selectable>HMAC-SHA-512</selectable>
							</selectables>as the PRF</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>NIST SP 800-108 (Section 5.3) (KDF in n Double Pipeline Iteration Mode)<h:p/>
							<selectables>
								<selectable>ISO-CMAC</selectable>
								<selectable>NIST-CMAC</selectable>
								<selectable>ISO-CIPH</selectable>
								<selectable>ISO-HMAC</selectable> 
								<selectable>FIPS-HMAC</selectable>
								<selectable>ISO-HASH</selectable>
								<selectable>FIPS-SHA</selectable>
								</selectables></h:td>
						</h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-4"/>
						<h:td>KeyDrv4</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Intermediary keys</h:td>
						<h:td><selectables>
							<selectable>exclusive OR (XOR)</selectable>
							<selectable>SHA256</selectable>
							<selectable>SHA-512</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td><selectables>
							<selectable>ISO-HASH</selectable>
							<selectable>FIPSSHA</selectable>
							</selectables></h:td>
						</h:tr>
		
						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-5"/>
						<h:td>KeyDrv5</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Concatenated keys</h:td>
						<h:td>KDF in <selectables>
							<selectable>Counter Mode</selectable>
							<selectable>Feedback Mode</selectable>
							<selectable>Double Pipeline Iteration Mode</selectable>
							</selectables> using <selectables>
							<selectable>CMAC-AES-128</selectable>
							<selectable>CMAC-AES-192</selectable>
							<selectable>CMAC-AES-256</selectable>
							<selectable>HMAC-SHA-1</selectable>
							<selectable>HMAC-SHA-256</selectable>
							<selectable>HMAC-SHA-512</selectable>
							</selectables>as the PRF</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>NIST SP 800-108 [selection: (Section 5.1) (KDF in Counter Mode);<h:p/>
							(Section 5.2) (KDF in Feedback Mode);<h:p/>
							(Section 5.3) (KDF in Double-Pipeline Iteration Mode)]<h:p/>
							<selectables>
								<selectable>ISO-CMAC</selectable>
								<selectable>NIST-CMAC</selectable>
								<selectable>ISO-CIPH</selectable>
								<selectable>ISO-HMAC</selectable> 
								<selectable>FIPS-HMAC</selectable>
								<selectable>ISO-HASH</selectable>
								<selectable>FIPS-SHA</selectable>
								</selectables></h:td>
						</h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-6"/>
						<h:td>KeyDrv6</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Two keys</h:td>
						<h:td><selectables>
							<selectable>AES-CCM</selectable>
							<selectable>AES-GCM</selectable>
							<selectable>AES-CBC</selectable>
							<selectable>AES-KWP</selectable>
							<selectable>AES-KW</selectable>
							<selectable>CAM-CBC</selectable> 
							<selectable>CAM-CCM</selectable>
							<selectable>CAM-GCM</selectable></selectables> from FCS_COP.1/SKC Symmetric Key table</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>[selection: see List of Standards in FCS_COP.1/SKC Symmetric Key table]</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-7"/>
						<h:td>KeyDrv7</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>secret IV</selectable>
							<selectable>seed</selectable>
							</selectables></h:td>
						<h:td>Shared secret, salt, output length, fixed information</h:td>
						<h:td><selectables>
							<selectable>hash function from FCS_COP.1/Hash</selectable>
							<selectable>keyed hash from FCS_COP.1/HMAC</selectable>
							</selectables></h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>(NIST-KDRV) sec 4<h:p/>
							<selectables>
								<selectable>see List of Standards in FCS_COP.1/Hash and FCS_COP.1/HMAC</selectable>
								</selectables></h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-8"/>
						<h:td>KeyDrv8</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>secret IV</selectable>
							<selectable>seed</selectable>
							</selectables></h:td>
						<h:td>Shared secret, salt, IV, output length, fixed information</h:td>
						<h:td><selectables>
							<selectable>keyed hash from FCS_COP.1/HMAC</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>(NIST-KDRV) sec 5<h:p/>
							<selectables>
								<selectable>see List of Standards in FCS_COP.1/Hash and FCS_COP.1/HMAC</selectable>
								</selectables></h:td></h:tr>
					</h:table>
				</title>
				<note role="application">
					Note that Camellia algorithms do not support 192-bit key sizes.<h:p/>
					The interface referenced in the requirement could take different forms, the most likely of which is
					an application programming interface to an OS kernel. There may be various levels of abstraction.
					For Authorization Factor Submasks, the key size to be used in the HMAC falls into a range between
					L1 and L2 defined in ISO/IEC 10118 for the appropriate hash function (for example for SHA-256
					L1 = 512, L2 =256) where L2 = k = L1.<h:p/>
					General note: in order to use a NIST SP 800-108 conformant method of key derivation, the TOE
					is permitted to implement this with keys as derived as indicated in Key Derivation Functions table
					above, and with the algorithms as indicated in the same table.<h:p/>
					NIST SP 800-131A Rev 1 allows the use of SHA-1 in these use cases.<h:p/>
					KeyDrv5, KeyDrv6, and the XOR option in KeyDrv4 will create an “inverted key hierarchy” in
					which the TSF will combine two or more keys to create a third key. These same KDFs may also
					use a submask key as input, which could be an authorization factor or derived from a PBKDF. In
					these cases the ST author must explicitly declare this option and should present a reasonable
					argument that the entropy of the inputs to the KDFs will result in full entropy of the expected
					output.<h:p/>
					If keys are combined, the ST author shall describe which method of combination is used in order
					to justify that the effective entropy of each factor is preserved.<h:p/>
					The documentation of the product’s encryption key management should be detailed enough that,
					after reading, the evaluator will thoroughly understand the product’s key management and how it
					meets the requirements to ensure the keys are adequately protected. This documentation should
					include an essay and diagrams. This documentation is not required to be part of the TSS; it can be
					submitted as a separate document and marked as developer proprietary.<h:p/>
					SP 800-56C specifies a two-step key derivation procedure that employs an extraction-thenexpansion technique for deriving keying material from a shared secret generated during a key
					establishment scheme. The Randomness Extraction step as described in Section 5 of SP 800-56C
					is followed by Key Expansion using the key derivation functions defined in SP 800-108.<h:p/>
					This requirement must be claimed by the TOE if at least one of FCS_CKM.1/KEK,
					FCS_CKM.1/SK, or FCS_COP.1/KeyEnc chooses a selection related to key derivation.<h:p/>
					If at least one of KeyDrv4, KeyDrv5, or KeyDrv6 is selected AND password-based key derivation
					is used to create at least one of the inputs, the selection-based SFR FCS_COP.1/PBKDF must also
					be claimed.<h:p/>
				</note>
				<aactivity>
					<no-tests/>
				</aactivity>
			</f-element>
		</f-component>


		
	<!-- FCS_COP.1/Hash Cryptographic Operation (Hashing)-->
	<f-component cc-id="fcs_cop.1" iteration="Hash" name="Cryptographic Operation (Hashing)" status="sel-based">
<!-- 		<exportable id="inf-gpcp-fcs-cop-hash"/> -->
<!-- 		<importable inf-id="inf-dsc-fcs-cop-hash"/> -->
		<selection-depends req="fpt-tud-ext-2e1" ids="sel-tud2-hash"/>
                <f-element id="fcs-cop-1e1-hash">
                    <title>The TSF shall perform [<h:i>cryptographic hashing</h:i>] in accordance with a specified cryptographic algorithm
                        <selectables>
                            <selectable id="sel-cop1-sha1">SHA-1</selectable>
                            <selectable id="sel-cop1-sha256">SHA-256</selectable>
                            <selectable id="sel-cop1-sha384">SHA-384</selectable>
                            <selectable id="sel-cop1-sha512">SHA-512</selectable>
							<selectable id="sel-cop1-sha3-224">SHA-3-224</selectable>
							<selectable id="sel-cop1-sha3-256">SHA-3-256</selectable>
							<selectable id="sel-cop1-sha3-384">SHA-3-384</selectable>
							<selectable id="sel-cop1-sha3-512">SHA-3-512</selectable>		    
                        </selectables> that meet the following:
					<selectables>
						<selectable>ISO/IEC 10118-3:2018</selectable>
						<selectable>FIPS 180-4</selectable>
					</selectables>   
                    </title>
                    <note role="application">
				The hash selection should be consistent with the overall strength of the algorithm used for
				signature generation. For example, the ST Author should choose SHA-256 for 2048-bit RSA or ECC 
				with P-256, SHA-384 for 3072-bit RSA, 4096-bit RSA, or ECC with P-384, and SHA-512 for ECC
				with P-521. The ST author selects the standard based on the algorithms selected.<h:p/>
				SHA-1 may be used for the following applications: generating and verifying hash-based message
				authentication codes (HMACs), key derivation functions (KDFs), and random bit/number
				generation (In certain cases, SHA-1 may also be used for verifying old digital signatures and time
				stamps, provided that this is explicitly allowed by the application domain).
                    </note>
                    <aactivity>  <!-- QQQQ: This evaluation activity must be checked against DSC -->
                        <TSS>
                            The evaluator shall check that the association of the hash function with other TSF 
                            cryptographic functions (for example, the digital signature verification function) is documented 
                            in the TSS.<h:p/>
                        </TSS>
                        <Guidance>
                            The evaluator checks the AGD documents to determine that any configuration that is required to 
                            be done to configure the functionality for the required hash sizes is present. <h:p/>
                        </Guidance>
                        <Tests>
							<h:b><h:u>SHA-1 and SHA-2 Tests</h:u></h:b><h:br/>
                            The TSF hashing functions can be implemented in one of two modes. The first mode is the byte-oriented
							mode. In this mode the TSF only hashes messages that are an integral number of bytes in length;
							i.e., the length (in bits) of the message to be hashed is divisible by 8. The second mode is the
							bit-oriented mode. In this mode the TSF hashes messages of arbitrary length. As there are different
							tests for each mode, an indication is given in the following sections for the bit-oriented vs. the
							byte-oriented testmacs.
                            <h:p/>
                            The evaluator shall perform all of the following tests for each hash algorithm implemented by the TSF
							and used to satisfy the requirements of this PP.
                            <h:p/>
                            <h:b>Assurance Activity Note:</h:b><h:br /> The following tests require the developer to provide access
							to a test platform that provides the evaluator with tools that are typically not found on factory 
							products.
                            <h:p/>
                            <h:b>Short Messages Test Bit-oriented Mode</h:b><h:br/>
                            The evaluators devise an input set consisting of m+1 messages, where m is the block length of the hash
							algorithm. The length of the messages range sequentially from 0 to m bits. The message text shall
							be pseudo-randomly generated. The evaluators compute the message digest for each of the messages
							and ensure that the correct result is produced when the messages are provided to the TSF.
                            <h:p/>
                            <h:b>Short Messages Test Byte-oriented Mode</h:b><h:br/>
                            The evaluators devise an input set consisting of m/8+1 messages, where m is the block length of the 
							hash algorithm. The length of the messages range sequentially from 0 to m/8 bytes, with each 
							message being an integral number of bytes. The message text shall be pseudo-randomly generated.
							The evaluators compute the message digest for each of the messages and ensure that the correct
							result is produced when the messages are provided to the TSF.
                            <h:p/>
                            <h:b>Selected Long Messages Test Bit-oriented Mode</h:b><h:br/>
                            The evaluators devise an input set consisting of m messages, where m is the block length
                            of the hash algorithm. The length of the ith message is 512 + 99*i, where
                            1 &lt;= i &lt;= m. The message text shall be pseudo-randomly
                            generated. The evaluators compute the message digest for each of the messages and ensure
                            that the correct result is produced when the messages are provided to the TSF.
                            <h:p/>
                            <h:b>Selected Long Messages Test Byte-oriented Mode</h:b><h:br/>
                            The evaluators devise an input set consisting of m/8 messages,
                            where m is the block length of the hash algorithm. The length of the ith message
                            is 512 + 8*99*i, where 1 &lt;= i &lt;= m/8.
                            The message text shall be pseudo-randomly generated. The evaluators compute the message
                            digest for each of the messages and ensure that the correct result is produced when
                            the messages are provided to the TSF.
                            <h:p/>
                            <h:b>Pseudo-randomly Generated Messages Test</h:b><h:br/>
                            This test is for byte-oriented implementations only. The evaluators randomly generate a
                            seed that is n bits long, where n is the length of the message digest produced by the
                            hash function to be tested. The evaluators then formulate a set of 100 messages and
                            associated digests by following the algorithm provided in Figure 1 of [SHAVS]. The
                            evaluators then ensure that the correct result is produced when the messages are
                            provided to the TSF.<h:p/>
							<h:b><h:u>SHA-3 Tests</h:u></h:b><h:br/>
							The tests below are derived from the The Secure Hash Algorithm-3 Validation System (SHA3VS), 
							Updated: April 7, 2016, from the National Institute of Standards and Technology.<h:p/>
							For each SHA-3-XXX implementation, XXX represents d, the digest length in bits. The capacity, c,
							is equal to 2d bits. The rate is equal to 1600-c bits.  <h:p/>
							The TSF hashing functions can be implemented with one of two orientations. The first is a bit-oriented
							mode that hashes messages of arbitrary length. The second is a byte-oriented mode that hashes messages 
							that are an integral number of bytes in length (i.e., the length (in bits) of the message to be
							hashed is divisible by 8). Separate tests for each orientation are given below. <h:p/>
							The evaluator shall perform all of the following tests for each hash algorithm and orientation
							implemented by the TSF and used to satisfy the requirements of this PP. The evaluator shall
							compare digest values produced by a known-good SHA-3 implementation against those generated by
							running the same values through the TSF.<h:p/>
							<h:b>Short Messages Test, Bit-oriented Mode</h:b><h:br/>
							The evaluators devise an input set consisting of rate+1 short messages. The length of the messages
							ranges sequentially from 0 to rate bits. The message text shall be pseudo-randomly generated. The
							evaluators compute the message digest for each of the messages and ensure that the correct result
							is produced when the messages are provided to the TSF. The message of length 0 is omitted if the
							TOE does not support zero-length messages.<h:p/>
							<h:b>Short Messages Test, Byte-oriented Mode</h:b><h:br/>
							The evaluators devise an input set consisting of rate/8+1 short messages. The length of the
							messages ranges sequentially from 0 to rate/8 bytes, with each message being an integral number of 
							bytes. The message text shall be pseudo-randomly generated. The evaluators compute the message
							digest for each of the messages and ensure that the correct result is produced when the messages
							are provided to the TSF. The message of length 0 is omitted if the TOE does not support zero-length
							messages.<h:br/><h:p/>
							<h:b>Selected Long Messages Test, Bit-oriented Mode</h:b><h:br/>
							The evaluators devise an input set consisting of 100 long messages ranging in size from 
							rate+(rate+1) to rate+(100*(rate+1)), incrementing by rate+1. (For example, SHA-3-256 has a rate
							of 1088 bits. Therefore, 100 messages will be generated with lengths 2177, 3266, …, 109988 bits.)
							The message text shall be pseudo-randomly generated. The evaluators compute the message digest for
							each of the messages and ensure that the correct result is produced when the messages are provided
							to the TSF.<h:p/>
							<h:b>Selected Long Messages Test, Byte-oriented Mode</h:b><h:br/>
							The evaluators devise an input set consisting of 100 messages ranging in size from (rate+(rate+8))
							to (rate+100*(rate+8)), incrementing by rate+8. (For example, SHA-3-256 has a rate of 1088 bits.
							Therefore 100 messages will be generated of lengths 2184, 3280, 4376, …, 110688 bits.) The message
							text shall be pseudo-randomly generated. The evaluators compute the message digest for each of the
							messages and ensure that the correct result is produced when the messages are provided to the TSF.<h:p/>
							<h:b>Pseudo-randomly Generated Messages Monte Carlo) Test, Byte-oriented Mode</h:b><h:p/>
							The evaluators supply a seed of d bits (where d is the length of the message digest produced by
							the hash function to be tested. This seed is used by a pseudorandom function to generate 100,000 
							message digests. One hundred of the digests (every 1000th digest) are recorded as checkpoints. The
							TOE then uses the same procedure to generate the same 100,000 message digests and 100 checkpoint
							values. The evaluators then compare the results generated ensure that the correct result is
							produced when the messages are generated by the TSF.<h:br/><h:br/>
                        </Tests>
                    </aactivity>
                </f-element>
				<audit-event />
            </f-component>
		
	<f-component cc-id="fcs_cop.1" iteration="HMAC" name="Cryptographic Operation (Keyed Hash)" status="optional">
<!--			<exportable id="inf-gpcp-fcs-cop-hmac"/> -->
<!--			<exportable inf-id="inf-dsc-fcs-cop-hmac"/> -->
			<f-element id="fcs-cop-1e1-hmac">
				<title>The TSF shall perform [<h:i>keyed hash message authentication</h:i>] in accordance
					with a specified cryptographic algorithm 
					<selectables>
						<selectable>HMAC-SHA-1</selectable>
						<selectable>HMAC-SHA-256</selectable>
						<selectable>HMAC-SHA-384</selectable>
						<selectable>HMAC-SHA-512</selectable>
						<selectable>KMAC128</selectable>
						<selectable>KMAC256</selectable>
					</selectables> and cryptographic key sizes <assignable>key size (in bits)</assignable>
					that meet the following: 
					<selectables>
						<selectable>ISO/IEC 9797-2:2011 Section 7 “MAC Algorithm 2”</selectable>
						<selectable>[NIST-KDV] section 4 “KMAC”</selectable>
					</selectables>.
				</title>
				<note role="application">
					The HMAC key size falls into a range between L1 and L2 defined in ISO/IEC 10118 for the
					appropriate hash function (for example for SHA-256 L1 = 512, L2 = 256) where L2 ≤ k ≤ L1.
				</note>
				<aactivity>
					<no-tests/>
				</aactivity>
			</f-element>
		</f-component>

		<f-component cc-id="fcs_cop.1" iteration="KeyEnc" name="Cryptographic Operation (Key Encryption)" status="optional">
<!--			<exportable id="inf-gpcp-fcs-cop-keyenc"/>  -->
<!--			<importable inf-id="inf-dsc-fcs-cop-keyenc"/>  -->
			<f-element id="fcs-cop-1e1-keyenc">
				<title>
					The TSF shall perform [<h:i>key encryption and decryption</h:i>] using the methods defined in the
					following rows of <xref to="fcs-cop-keyenc-sels"/>:
					<selectables>
						<selectable id="sel-fcs-cop-keyenc-se1">SE1</selectable>
						<selectable id="sel-fcs-cop-keyenc-ae1">AE1</selectable>
						<selectable id="sel-fcs-cop-keyenc-se2">SE2</selectable>
						<selectable id="sel-fcs-cop-keyenc-xor">XOR</selectable>
					</selectables><h:p/>
					<h:b><ctr ctr-type='Table' id="fcs-cop-keyenc-sels">: Supported Methods for Key Encryption Operation</ctr></h:b><h:br/>	
					<h:table>
						<h:tr class="header"><h:td>Identifier</h:td><h:td>Cryptographic Algorithm</h:td>
						<h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-cop-keyenc-se1"/>
						<h:td>SE1</h:td>
						<h:td>Symmetric <selectables>
							<selectable>AES-CCM</selectable>
							<selectable>AES-GCM</selectable>
							<selectable>AES-CBC</selectable>
							<selectable>AES-CTR</selectable>
							<selectable>AES-KWP</selectable>
							<selectable>AESKW</selectable>
							</selectables></h:td>
							<h:td><selectables>
								<selectable>128</selectable>
								<selectable>192</selectable>
								<selectable>256</selectable></selectables> bits</h:td>
						<h:td>See FCS_COP.1/SKC</h:td></h:tr>
					
						<h:tr><depends on-sel="sel-fcs-cop-keyenc-ae1"/>
						<h:td>AE1</h:td>
						<h:td>Asymmetric KTS-OAEP</h:td>
						<h:td><selectables>
							<selectable>2048</selectable>
							<selectable>3072</selectable></selectables> bits</h:td>
						<h:td>See FCS_COP.1/SKC</h:td></h:tr>
		
						<h:tr><depends on-sel="sel-fcs-cop-keyenc-se2"/>
						<h:td>SE2</h:td>
						<h:td>Symmetric <selectables>
							<selectable>CAM-CBC</selectable>
							<selectable>CAM-CCM</selectable>
							<selectable>CAM-GCM</selectable>
							</selectables></h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>256</selectable></selectables> bits</h:td>
						<h:td>See FCS_COP.1/KAT</h:td></h:tr>
						
						<h:tr><depends on-sel="sel-fcs-cop-keyenc-xor"/>
						<h:td>XOR</h:td>
						<h:td>Exclusive OR operation</h:td>
							<h:td><selectables>
								<selectable>128</selectable>
								<selectable>192</selectable>
								<selectable>256</selectable></selectables> bits</h:td>
						<h:td>See FCS_CKM_EXT.5</h:td></h:tr>
					</h:table>
				</title>
				<note role="application">
					A TOE will use this requirement to specify how the Key Encryption Key (KEK) wraps a
					symmetric encryption key. A TOE will always need this requirement in order to capture the last
					stage of the key chain in which the Key Encryption Key (KEK) wraps the symmetric encryption
					key.<h:p/>
					If XOR is selected, the selection-based SFR FCS_CKM_EXT.5 must be claimed by the TOE.<h:p/>
				</note>
				<aactivity>
					<no-tests/>
				</aactivity>
			</f-element>
		</f-component>

 
		<!-- FCS_COP.1/SigVer Cryptographic Operation (Signature Verification) --> 
		<f-component cc-id="fcs_cop.1" iteration="SigVer" name="Cryptographic Operation (Signature Verification)" status="sel-based">
			<selection-depends req="fpt-tud-ext-1e1" ids="sel-tud-update"/>
			<f-element id="fcs-cop-1e1-sigver">
				<title><refinement>Refinement:</refinement> The TSF shall perform  
					<refinement>cryptographic signature verification for a platform
					firmware update image</refinement>
					in accordance with a specified cryptographic algorithm
					<selectables linebreak="yes">
						<selectable><h:b>RSA Schemes</h:b> using cryptographic key sizes of 2048-bits or
							greater that meet the following: 
							FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Section 4</selectable>
						<selectable><h:b>ECDSA Schemes</h:b> using "NIST Curves" P-256, P-384 and
							<selectables>
								<selectable>P-521</selectable>
								<selectable>no other curves</selectable>
							</selectables> that meet the following:
							FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Section 5
						</selectable>
					</selectables>
				</title>
				<note role="application">
					The ST author should choose the algorithm implemented to perform vertification of digital signatures. 
					if more than one algorithm is available, this requirement should be iterated to specify the functionality. 
					For the algorithm chosen, the ST author should make the appropriate assignments/selections to specify the 
					parameters that are implemented for that algorithm. In particular, if ECDSA is selected as one of the signature
					algorithms, the key size specified must match the selection for the curve used in the algorithm.<h:p/>
					For elliptic curve-based schemes, the key size refers to the binary logarithm (log2) of the order of the
					base point. As the preferred approach for digital signatures, elliptic curves will be required after all the
					necessary standards and other supporting information are fully established.<h:p/>
					If cryptographic signature vertification services are provided to the TOE or to tenant software by a local DSC, 
					then the ST should include an instance of this SFR with instance identifier "(DSC)." 
				</note>
				<aactivity>
					<Tests>
						The following tests require the developer to provide access to a test
						application that provides the evaluator with tools that are typically not found
						in the production application.<h:p/>
						<h:b>ECDSA Algorithm Tests</h:b><h:p/>
						<testlist>
							<test><h:i>ECDSA FIPS 186-4 Signature Generation Test.</h:i> For each 
								supported NIST curve (i.e., P-256, P-384 and P-521) and SHA 
								function pair, the evaluator shall generate ten 1024-bit long
								messages and obtain for each message a public key and the 
								resulting signature values R and S. To determine correctness,
								the evaluator shall use the signature verification function of a 
								known good implementation.</test>
							<test><h:i>ECDSA FIPS 186-4 Signature Verification Test.</h:i> For each
								supported NIST curve (i.e., P-256, P-384 and P-521) and SHA
								function pair, the evaluator shall generate a set of ten 1024-bit
								message, public key and signature tuples and modify one of the 
								values (message, public key or signature) in five of the 10
								tuples. The evaluator shall obtain in response a set of 10
								PASS/FAIL values.</test>
						</testlist>
						<h:b>RSA Signature Algorithm Tests</h:b><h:p/>
						<testlist>
							<test><h:i>Signature Generation Test.</h:i> The evaluator shall verify
								the implementation of RSA Signature Generation by the TOE using 
								the Signature Generation Test. To conduct this test the
								evaluator must generate or obtain 10 messages from a trusted
								reference implementation for each modulus size/SHA combination
								supported by the TSF. The evaluator shall have the TOE use their
								private key and modulus value to sign these messages. The
								evaluator shall verify the correctness of the TSF’s signature
								using a known good implementation and the associated public keys
								to verify the signatures.</test>
							<test><h:i>Signature Verification Test.</h:i> The evaluator shall
								perform the Signature Verification test to verify the ability of 
								the TOE to recognize another party’s valid and invalid
								signatures. The evaluator shall inject errors into the test 
								vectors produced during the Signature Verification Test by
								introducing errors in some of the public keys, e, messages, IR
								format, and/or signatures. The TOE attempts to verify the 
								signatures and returns success or failure.</test>
						</testlist>
					</Tests>
				</aactivity>
			</f-element>
			<audit-event/>
		</f-component>	
		
		<!-- FCS_ENT_EXT.1 -->
        <f-component cc-id="fcs_ent_ext.1" name="Entropy for Tenant Software">
            <f-element id="fcs-ent-ext-1e1">
                <title>The TSF shall provide one or more mechanisms to make entropy suitable for use in FCS_RBG_EXT.1
					available to tenant software.
                </title>
                <note role="application">
                    This requirement ensures that the TOE makes available sufficient entropy to any tenant
					that requires it. Every entropy source need not provide high-quality entropy, but tenant
					software must have a means of acquiring sufficient entropy.<h:p/>
					A hardware noise source is a component that produces data that cannot be explained
					by a deterministic rule, due to its physical nature. In other words, a hardware based
					noise source generates sequences of random numbers from a physical process that
					cannot be predicted. For example, a sampled ring oscillator consists of an odd number
					of inverter gates chained into a loop, with an electrical pulse traveling from 
					inverter to inverter around the loop. The inverters are not clocked, so the precise 
					time required for a complete circuit around the loop varies slightly as various
					physical effects modify the small delay time at each inverter on the line to the
					next inverter. This variance results in an approximate natural frequency that 
					contains drift and jitter over time. The output of the ring oscillator consists 
					of the oscillating binary value sampled at a constant rate from one of the 
					inverters – a rate that is significantly slower than the oscillator’s natural 
					frequency.
                </note>
                <aactivity>
                    <TSS>
                        The evaluator shall verify that the TSS documents the entropy sources implemented by the TOE.
						It is not necessary to document all the platform features that can be used by tenant software to 
						contribute to entropy, rather only those features expressly provided as entropy sources. 
                    </TSS>
					<Guidance>
						The evaluator shall examine the AGD to ensure that it describes how to configure 
						entropy sources (if applicable) and how tenant software can access the sources. 
					</Guidance>
                    <Tests>
                        The evaluator shall perform the following tests:
                        <testlist>
                            <test>
                                The evaluator shall invoke the entropy source(s) from tenant software.
								The evaluator shall verify that the tenant acquires values from the 
								interface.
                            </test>
                        </testlist>
                    </Tests>
                </aactivity>
            </f-element>
        </f-component>

		
		<f-component cc-id="fcs_rbg_ext.1" name="Random Bit Generation" status="optional">
<!--			<exportable id="inf-gpcp-fcs-rbg"/>  -->
<!--			<importable inf-id="inf-dsc-fcs-rbg"/>  -->
			<f-element id="fcs-rbg-ext-1e1">
				<title>The TSF shall perform all deterministic random bit generation services in
					accordance with ISO/IEC 18031:2011 using 
					<selectables>
						<selectable>Hash_DRBG (any)</selectable>
						<selectable>HMAC_DRBG (any)</selectable>
						<selectable>CTR_DRBG (AES)</selectable>
					</selectables>.
				</title>
			</f-element>
			<f-element id="fcs-rbg-ext-1e2">
				<title>The deterministic RBG shall be seeded by at least one entropy source in
					accordance with NIST SP 800-90B that accumulates entropy from 
					<selectables>
						<selectable><assignable>number of software-based sources</assignable>
							software-based noise source</selectable>
						<selectable><assignable>number of hardware-based sources</assignable>
							hardware-based noise source</selectable>
					</selectables> with a minimum of 
					<selectables>
						<selectable>128</selectable>
						<selectable>192</selectable>
						<selectable>256</selectable>
					</selectables> bits of entropy at least equal to the greatest security strength, 
					according to ISO/IEC 18031:2011, of the keys and CSPs that it will generate.
				</title>
				<note role="application">
					For the selection in FCS_RBG_EXT.1.2, the ST author selects the appropriate number 
					of bits of entropy that corresponds to the greatest security strength of the
					algorithms included in the ST. Security strength is defined in Tables 2 and 3 of 
					NIST SP 800-57A. For example, if the implementation includes 2048-bit RSA (security
					strength of 112 bits), AES 128 (security strength 128 bits), and HMAC-SHA-256
					(security strength 256 bits), then the ST author would select 256 bits.
				</note>
			</f-element>
			<f-element id="fcs-rbg-ext-1e3">
				<title>
					The TSF shall be capable of providing output of the RBG to applications running on the TSF
					that request random bits.
				</title>
				<note role="application">
					ISO/IEC 18031:2011 contains three different methods of generating random numbers. Each of
					these in turn depends on underlying cryptographic primitives (hash functions/ciphers). This cPP
					allows SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512 for Hash_DRBG or HMAC_DRBG
					and only AES-based implementations for CTR_DRBG. <h:p/>
					This requirement must be included in the ST only if the TOE generates keys for its
					own use, or if it provides RNG services for tenant software.
				</note>
			</f-element>
		</f-component>		
		
		
	</section>	 
	    
	<section id="fpt" title="Class: Protection of the TSF (FPT)">

	<f-component cc-id="fpt_rot_ext.1" name="Platform Integrity Root">
		<f-element id="fpt-rot-ext-1e1">
			<title>The integrity of platform firmware shall be rooted in 
				<selectables linebreak="yes">
					<selectable id="sel-rot-immutable-code">code or data written to immutable memory or storage</selectable>
					<selectable id="sel-rot-immutable-creds">credentials held in immutable storage on-platform or protected storage off-platform</selectable>
					<selectable id="sel-rot-mc">a separate management controller that is itself rooted in a mechanism that meets this requirement</selectable>
					<selectable id="sel-rot-dsc">integrity measurements held securely in an on-platform dedicated security component</selectable>
					<selectable id="sel-rot-offplat">integrity measurements held securely by an off-platform entity</selectable>
				</selectables>.
			</title>
			<note role="application">
				Roots of Trust are components that constitute a set of unconditionally trusted functions. The above are acceptable
				roots of trust for platform firmware integrity.<h:p/>
				The ST author must select the root of trust used to ensure the integrity of the first platform firmware that executes. The integrity
				of subsequently executed platform firmware must be traceable back to this root or to some other root as specified in FPT_ROT_EXT.2.
				This SFR should be iterated for additional TOE roots (for example, a management controller or firmware executed from 
				an add-in card).<h:p/>
			</note>
			<aactivity>
				<TSS>The evaluator shall verify that the TSS describes the Root of Trust on which initial integrity of platform firmware is anchored, consistent 
					with the selection above. The description shall include means by which the Root of Trust is protected from 
					modification.
				</TSS>
			</aactivity>				
		</f-element>
	</f-component>

	<f-component cc-id="fpt_rot_ext.2" name="Platform Integrity Extension">
		<f-element id="fpt-rot-ext-2e1">
			<title>The integrity of all mutable platform firmware outside of the platform integrity root specified in FPT_ROT_EXT.1 shall be verified 
				prior to execution or use through:
				<selectables linebreak="yes">
					<selectable>computation and verification of a hash by trusted code/data</selectable>
					<selectable>verification of a digital signature by trusted code/data</selectable>
					<selectable>measurement and verification by trusted code/data</selectable>
					<selectable>measurement and verification by an on-platform dedicated security component</selectable>
					<selectable>measurement and verification by an off-platform entity</selectable>
				</selectables>.
			</title>
			<note role="application">
				This requirement specifies the means for extending the initial integrity
				of platform firmware established by FPT_ROT_EXT.1.1 to subsequently executed
				platform firmware and data that is located in mutable storage.
				(Integrity of code and data written to immutable storage is assured).<h:p/>
				Otherwise, integrity must be extended through cryptographic means: either through hashes
				or digital signatures computed and verified by firmware that is trusted because it has  
				previously had its integrity verified or is itself a Root of Trust. Verification can be performed
				by TOE components such as management controllers or non-TOE trusted entities.<h:p/>				
			</note>
		</f-element>
		<f-element id="fpt-rot-ext-2e2">
			<title>The TOE shall take the following actions if an integrity check specified in FPT_ROT_EXT.2.1 fails:
				<h:ol type="1">
					<h:li>Halt,</h:li>
					<h:li>Notify an administrator/user by
						<selectables>
							<selectable id="sel-audit-integrity">generating an audit event</selectable>
							<selectable><assignable>other notification method(s)</assignable></selectable>
						</selectables>, and</h:li>
					<h:li><selectables linebreak="yes">
						<selectable>Stop all execution and shut down</selectable>
						<selectable id="sel-rot-recovery">Initiate a Recovery process as specified in FPT_RVR_EXT.1</selectable>
					</selectables></h:li>
				</h:ol> 
				<selectables linebreak="yes">
					<selectable>automatically</selectable>
					<selectable>in accordance with administrator-configurable policy</selectable>
					<selectable>by express determination of an administrator/user</selectable>
				</selectables>.	
			</title>				
			<note role="application">
				Notification of an administrator can take many forms. For server-class platforms, such notification could take the form 
				of administrator alerts or audit events. For platforms without management controllers, notification could be achieved, for
				example, by blinking lights, beep codes, screen indications, or local logging.<h:p/>
				If "<h:i>generating an audit event</h:i>" is selected then FAU_GEN.1 must be included in the ST.
			</note>
			<aactivity>
				<TSS>
					The evaluator shall verify that the TSS describes the means by which initial integrity of platform firmware is
					extended to other platform components, and that the means are consistent with the selection(s) made in FPT_ROT_EXT.2.
					The TSF shall also describe how the TOE responds to failure of verification consistent with the selections in
					FPT_ROT_EXT.2.2.
				</TSS>
				<Guidance>
					The evaluator shall examine the operational guidance to ensure that it describes the actions taken and notification
					methods used in case of failure to establish the integrity of the platform firmware root. If the actions are 
					configurable, the guidance shall explain how they are configured.
				</Guidance>
				<Tests>
					The evaluator shall modify the platform firmware in a way that should cause a failure of the integrity check. 
					The test passes if the mechanism specified in FPT_ROT_EXT.2.2 is triggered on the first subsequent boot 
					of the platform. <h:p/>
					Depending on the protections implemented, the evaluator may need a specially crafted update module from the vendor
					to perform this test. But note that this is not necessarily the same as a test of the update mechanism.
					The update mechanism can be tested either at boot time or at the time of the update. This verification 
					check must be done during boot.<h:p/>
					If modification of platform firmware <h:i>in situ</h:i> or using the update mechanism is deemed to be 
					not feasible within the time and cost constraints of the evaluation, then the evaluators shall make such
					an argument in the AAR, and with concurrence of the CC scheme, this test can be replaced by evidence of 
					vendor testing.<h:p/>
				</Tests>
			</aactivity>
		</f-element>
		<audit-event type="optional">
			<audit-event-descr>Failure of integrity verification.</audit-event-descr>
		</audit-event>
	</f-component>	
	
	<!-- FPT_PHP.1: Passive Detection of Physical Attack.
		 -->
	<f-component cc-id="fpt_php.1" name="Passive detection of physical attack" status="optional">
		<f-element id="fpt-php-1e1">
			<title>The TSF shall provide unambiguous detection of physical tampering
				that might compromise the TSF.
			</title>
		</f-element>
		<f-element id="fpt-php-1e2">
			<title>
				The TSF shall provide the capability to determine whether physical
				tampering with the TSF's devices or TSF's elements has occurred. 
			</title>
			<aactivity>
				<no-tests/>
			</aactivity>
		</f-element>
		<audit-event>
			<audit-event-descr>Detection of intrusion.</audit-event-descr>
		</audit-event>
	</f-component>
	
	<!-- FPT_PHP.2: Notification of physical attack
		 -->
	<f-component cc-id="fpt_php.2" name="Notification of physical attack" status="optional">
		<f-element id="fpt-php-2e1">
			<title>The TSF shall provide unambiguous detection of physical tampering that
				might compromise the TSF.
			</title>
		</f-element>
		<f-element id="fpt-php-2e2">
			<title>
				The TSF shall provide the capability to determine whether physical
				tampering with the TSF's devices or TSF's elements has occurred. 
			</title>
		</f-element>
		<f-element id="fpt-php-2e3">
			<title>
				For <assignable>list of TSF devices/elements for which active detection is
				required</assignable>, the TSF shall monitor the devices and elements and notify
				<assignable>a designated user or role</assignable> when physical tampering with the
				TSF's devices or TSF's elements has occurred. 
			</title>
		<aactivity>
			<no-tests/>
		</aactivity>
		</f-element>
		<audit-event>
			<audit-event-descr>Detection of intrusion.</audit-event-descr>
		</audit-event>
	</f-component>
	
	<!-- FPT_PHP.3: Resistance to physical attack
		 -->
	<f-component cc-id="fpt_php.3" name="Resistance to physical attack" status="optional">
		<f-element id="fpt-php-3e1">
			<title>The TSF shall resist <assignable>physical tampering scenarios</assignable> to the
				<assignable>list of TSF devices/elements</assignable> by responding automatically
				such that the SFRs are always enforced. 
			</title>
		<aactivity>
			<no-tests/>
		</aactivity>
		</f-element>
		<audit-event>
			<audit-event-descr>Detection of attempted intrusion.</audit-event-descr>
		</audit-event>
	</f-component>

	<!-- FPT_PHP_EXT.1: Hardware component integrity
		 -->
	<f-component cc-id="fpt_php_ext.1" name="Hardware component integrity" status="optional">
		<f-element id="fpt-php-ext-1e1">
			<title>
				The integrity of all platform hardware components outside of the platform integrity root
				specified in FPT_ROT_EXT.1 shall be verified 
				prior to execution or use through: 
				<assignable>method for ensuring integrity of platform hardware components</assignable>. 
			</title>
			<note role="application">
				The scope of the project is limited to manufacturing and OEM processes that protect against counterfeits, tampering, and insertion of unexpected software and hardware, and the corresponding customer processes that verify that client and server computing devices and components have not been tampered with or otherwise modified. Manufacturing processes that cannot be verified by the customer are explicitly out of scope.
			</note>
		</f-element>
		<f-element id="fpt-php-ext-1e2">
			<title>
				The TOE shall take the following actions if an integrity check specified in FPT_PHP_EXT.1.1 fails:
				<h:ol type="1">
					<h:li>Halt,</h:li>
					<h:li>Notify an administrator/user by
						<selectables>
							<selectable id="sel-audit-integrity">generating an audit event</selectable>
							<selectable><assignable>other notification method(s)</assignable></selectable>
						</selectables>, and</h:li>
					<h:li><selectables linebreak="yes">
						<selectable>Stop all execution and shut down</selectable>
						<selectable>Continue execution without the integrity-compromised component</selectable>
					</selectables></h:li>
				</h:ol> 
				<selectables linebreak="yes">
					<selectable>automatically</selectable>
					<selectable>in accordance with administrator-configurable policy</selectable>
					<selectable>by express determination of an administrator/user</selectable>
				</selectables>.	
			</title>				
			<note role="application">
				Notification of an administrator can take many forms. For server-class platforms, such notification could take the form 
				of administrator alerts or audit events. For platforms without management controllers, notification could be achieved, for
				example, by blinking lights, beep codes, screen indications, or local logging.<h:p/>
				If "<h:i>generating an audit event</h:i>" is selected then FAU_GEN.1 must be included in the ST.
			</note>
			<aactivity>
			<no-tests/>
			</aactivity>
		</f-element>
		<audit-event>
			<audit-event-descr>Detection of attempted intrusion.</audit-event-descr>
		</audit-event>
	</f-component>


		
	<!-- FPT_PPF_EXT.1 Protection of Platform Firmware -->
	<f-component cc-id="fpt_ppf_ext.1" name="Protection of Platform Firmware and Critical Data">
		<f-element id="fpt-ppf-ext-1e1">
			<title>The TSF shall allow modification of platform firmware only through the update mechanisms described in FPT_TUD_EXT.1.
			</title>
			<note role="application">
				Platform firmware must be modifiable only through one of the secure update mechanisms 
				specified in FPT_TUD_EXT.1. If the update mechanism itself is implemented in platform 
				firmware, then naturally, it must itself also be modifiable only through the secure update
				mechanism. Configuration data used by platform firmware that is stored in nonvolatile
				memory is not included in these protections. Software portions of TSF and data critical
				for ensuring the integrity of the TSF are included in these protections. Specifically,
				this includes the key store and the signature verification algorithm used by the update
				mechanisms. 
			</note>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS to ensure that it explains how the various areas of platform firmware and critical data 
					are protected from modification outside of the platform firmware update mechanism described in FPT_TUD_EXT.1. 
					If the TOE implements an authenticated update mechanism as specified in FPT_TUD_EXT.2, then the evauator shall ensure
					that the TSS describes specifically how the signature verification code and key store is protected from update
					outside of the secure platform firmware update mechanism.
				</TSS>
				<Guidance>
					The evaluator shall check the operational guidance to ensure that there are instructions for how to
					securely modify the platform firmware and critical data using a mechanism specified in 
					FPT_TUD_EXT.1.
				</Guidance>
				<Tests>
					<testlist>
						<test>The evaluator shall attempt to overwrite or modify the platform firmware without invoking one of
							the update mechanisms specified in FPT_TUD_EXT.1 (e.g., using a modified Linux boot loader such 
							as GRUB that attempts to write to the memory where platform firmware is stored). The test succeeds
							if the attempts to overwrite platform firmware fail. The evaluator shall attempt at least two 
							such tests--one that attempts to overwrite the first platform firmware that executes after boot,
							and one that targets the secure update mechanism (if implemented), and one that targets firmware that
							has been integrity-checked since the last boot.</test>
					</testlist>
				</Tests>
			</aactivity>
		</f-element>
		<audit-event/>
	</f-component>
	
	<!-- FPT_RVR_EXT.1 Platform Firmware Recovery -->
	<f-component cc-id="fpt_rvr_ext.1" name="Platform Firmware Recovery" status="sel-based">
		<depends on-sel="sel-rot-recovery"/>
		<f-element id="fpt-rvr-ext-1e1">
			<title>
				The TSF shall implement a mechanism for recovering from boot firmware failure consisting of 
				<selectables linebreak="yes">
					<selectable>the secure local update mechanism described in FPT_TUD_EXT.4</selectable>
					<selectable>installation of a known-good or recovery firmware image</selectable>
					<selectable>reversion to the prior firmware image</selectable>
					<selectable>installation of a recovery image that puts the TOE into a maintenance mode</selectable>
				</selectables>
			</title>
			<note role="application">
				This SFR must be included in the ST if:
				<h:ul>
					<h:li>"Initiate a Recovery process as specified in FPT_RVR_EXT.1" is selected in FPT_ROT_EXT.2.2,</h:li>
					<h:li>"Initiate a Recovery process as specified in FPT_RVR_EXT.1" is selected in FPT_TUD_EXT.2.5,</h:li>
					<h:li>The TOE implements a recovery mechanism for firmware corruption not necessarily related to 
						integrity or update failure.</h:li>
				</h:ul>
				As indicated above, in addition to integrity or update failure, the TOE may use a recovery 
				mechanism to deal with non-security-related failures, such as a power outage during update or a 
				power surge during normal operation.<h:p/>
				The recovery process may be initiated automatically on failure, as the result of physically present User
				action, or as the result of pre-configured policy. The action taken may depend on the nature of the
				failure as specified in FPT_ROT_EXT.2.2 and FPT_TUD_EXT.2.5.<h:p/>
			</note>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS section to confirm that it describes how the platform 
					firmware recovery mechanism works and the conditions under which it is invoked. 
				</TSS>
				<Guidance>
					The evaluator shall examine the guidance to ensure that is describes how to configure the 
					conditions under which the recovery mechanism is initiated (if configurable).
				</Guidance>
				<Tests>
					The evaluators shall perform the following tests:
					<testlist>
						<test>To test this requirement, the evaluator shall trigger the recovery process
							either by forcing an update error or a boot integrity failure and observing that 
							the recovery process has been initiated.</test>
						<test>The evaluator will engage with the recovery process as necessary, and after recovery
							will determine the version of the current firmware image. The test is passed 
							if the resultant image is as expected in accordance with policy and the selections
							in FPT_RVR_EXT.1.1. If the recovery process uses the secure
							local update process as specified in FPT_TUD_EXT.4, then this test is satisfied by
							testing of that requirement. </test>
					</testlist>
				</Tests>
			</aactivity>
		</f-element>
		<audit-event/>
	</f-component>
		
	<!-- FPT_TUD_EXT.1 Platform Firmware Update -->
	<f-component cc-id="fpt_tud_ext.1" name="TOE Firmware Update">
		<f-element id="fpt-tud-ext-1e1">
			<title>The TSF shall 
				<selectables linebreak="yes">
					<selectable>make no provision for platform firmware update</selectable>
					<selectable id="sel-auth-update">implement an authenticated platform firmware update mechanism as described in
						FPT_TUD_EXT.2</selectable>
					<selectable id="sel-unauth-update">implement an unauthenticated platform firmware update mechanism as described in
						FPT_TUD_EXT.3</selectable>					
					<selectable id="sel-local-update">implement a secure local platform firmware update mechanism
						described in FPT_TUD_EXT.4</selectable>
				</selectables>.
			</title>
			<note role="application">
				The purpose of the platform firmware update mechanism is to ensure the authenticity and integrity of
				platform firmware updates. <h:p/>
				If platform firmware is immutable (not updateable by any non-destructive means) then the ST author must select 
				"make no provision for platform firmware update."<h:p/>
				If platform firmware is modifiable only through a
				local update requiring physical presence at the platform, then the ST author must select "implement a secure
				local update process..." and include FPT_TUD_EXT.4 in the ST.<h:p/>
				If the platform implements an update mechanism 
				that does not require physical presence at the platform, and that authenticates firmware updates prior to installing them,
				then the ST author selects "implement an authenticated platform update mechanism..." and include FPT_TUD_EXT.2 in the ST.<h:p/>
				If the platform implements an update mechanism that does not require physical presence at the
				platform, and that does not authenticate firmware updates prior to installing them,
				then the ST author selects "implement an unauthenticated platform update mechanism..." and include FPT_TUD_EXT.3 in the ST.
			</note>
			<aactivity>
				<TSS>
					If the ST author selects "make no provision for platform firmware update," then the 
					evaluator shall examine the TSS to ensure that it explains all ways of modifying platform 
					firmware in the absence of any provided mechanism. For example, breaking open the case
					and prying a chip off the motherboard and then reprogramming the chip. The purpose of this
					activity is to ensure that the TOE does not implement a local update mechanism that does not
					meet the requirements of FPT_TUD_EXT.4.<h:p/>
					This requirement is met if the platform implements no means for updating platform firmware
					and the TSS describes a method for updating or replacing platform firmware that involves
					potentially destroying or damaging the TOE or some of its components.<h:p/>
					If the ST author selects "implement an authenticated platform firmware update mechanism..." then this requirement is 
					satisfied if FPT_TUD_EXT.2 is satisfied. <h:p/>
					If the ST author selects "implement an unauthenticated platform firmware update mechanism..." then this requirement is 
					satisfied if FPT_TUD_EXT.3 is satisfied. <h:p/>
					If the ST author selects "implement a secure local platform update mechanism..." then this requirement is 
					satisfied if FPT_TUD_EXT.4 is satisfied. <h:p/>
				</TSS>
			</aactivity>
		</f-element>
		<audit-event/>
	</f-component>			


	<!-- FPT_TUD_EXT.2 Platform Firmware Authenticated Update Mechanism -->
	<f-component cc-id="fpt_tud_ext.2" name="Platform Firmware Authenticated Update Mechanism" status="sel-based">
		<depends on-sel="sel-auth-update"/>
		<f-element id="fpt-tud-ext-2e1">
			<title>The TSF shall authenticate the source of all platform firmware updates using a 
				digital signature algorithm specified in FCS_COP.1/SigVer and using a key store 
				that contains 
				<selectables>
					<selectable>the public key</selectable>
					<selectable id="sel-tud2-hash">hash value of the public key</selectable>
				</selectables>.
			</title>
			<note role="application">
				The ST must include FCS_COP.1/Hash if "hash value of the public key" is selected.
			</note>
		</f-element>
		<f-element id="fpt-tud-ext-2e2">
			<title>
				The TSF shall allow installation of updates only if the digital signature has been
				successfully verified as specified in FCS_COP.1/SigVer and 
				<selectables>
					<selectable>the version number of the platform firmware update is more recent than 
						the version number of the current installed platform firmware</selectable>
					<selectable>no other conditions</selectable>
				</selectables>.
			</title>
			<note role="application">
				The ST author should make the selection above if the TSF supports rollback prevention. That is, the TSF
				does not allow "update" to an older version of the platform firmware. In general, rollback should be permitted
				only through a secure local update mechanism at the express direction of an Administrator/User.
			</note>
		</f-element>
		<f-element id="fpt-tud-ext-2e3">
			<title>
				The TSF shall include a platform firmware version identifier that is accessible by the update mechanism and
				includes information that enables the update mechanism to determine the relative order of updates.
			</title>
		</f-element>
		<f-element id="fpt-tud-ext-2e4">
			<title>
				The TSF shall provide an observable indication of the success or failure of the update operation.
			</title>
			<note role="application">
				For success, this indication should include the version number of the newly installed firmware. 
				Notification of failure could include generation of an audit event by a management subsystem, a 
				beep code, an updated version number on a splash screen, or simple failure to continue functioning.
			</note>
		</f-element>
		<f-element id="fpt-tud-ext-2e5">  
			<title>
				The TOE shall take the following actions if a platform firmware integrity, authenticity, 
				or rollback-prevention check fails, or a platform firmware update fails for any other reason: 
				<h:ul>
					<h:li>Do not install the update,</h:li>
					<h:li>Notify an administrator/user by 
						<selectables>
							<selectable id="sel-tud2-audit">generating an audit event</selectable>
							<selectable><assignable>notification method</assignable></selectable>
						</selectables>
					</h:li>
				</h:ul>, and
				<selectables linebreak="yes">
					<selectable>Continue execution</selectable>
					<selectable>Halt</selectable>
					<selectable>Stop all execution and shut down</selectable>
					<selectable>Initiate recovery as specified in FPT_RVR_EXT.1</selectable>
				</selectables>			
				<selectables linebreak="yes">
					<selectable>automatically</selectable>
					<selectable>in accordance with administrator-configurable policy</selectable>
					<selectable>by express determination of an administrator/user</selectable>
				</selectables>.
			</title>
			<note role="application">
				The platform firmware authenticated update mechanism employs digital signatures to ensure the authenticity of the
				firmware update image. The TSF includes a signature verification algorithm and a key
				store containing the public key needed to verify the signature on the firmware update image. <h:p/>
				A hash of the public key may be stored if a copy of the public key is provided with firmware
				update images. In this case, the update mechanism shall hash the public key provided with the update 
				image, and ensure that it matches a hash which appears in the key store before using the provided public 
				key to verify the signature of the update image. If the hash of the public key is selected, the ST author may
				iterate the FCS_COP.1/Hash requirement to specify the hashing functions used.<h:p/>
				An indication of success or failure can be generation of an audit event by a management subsystem, a beep code,
				an updated version number on a splash screen, or simple failure to continue functioning.<h:p/>
				If the update mechanism generates audit events, the ST author shall make the appropriate selections
				from the audit events table (<xref g="t-audit-sel-based"/>).
			</note>
			<aactivity>
				<h:p/><TSS>
					The evaluator shall ensure that the TSS includes a comprehensive description of how the 
					authentication of platform firmware updates is implemented by the TSF. The TSS should cover the 
					initialization process and the activities that are performed to ensure that the
					digital signature of the update image is verified before modification of the firmware. <h:p/>
					The evaluator shall examine the TSF to ensure that it describes the platform firmware version identifier
					and explains its meaning and encoding.<h:p/>
					The evaluator shall also ensure that the TSS describes the actions taken by the TSF is 
					an update image fails authentication.<h:p/>
				</TSS>
				<Guidance>
					The evaluator shall examine the operational guidance to ensure that it describes the process for 
					updating the platform firmware.<h:p/>
					The evaluator shall examine the operational guidance to ensure that it documents the observable indications
					of update success or failure, and that it describes how to access the platform firmware version indicators.<h:p/>
				</Guidance>
				<Tests>
					<testlist>
						<test>The evaluator determines the current version of the platform firmware, and obtains or 
							produces a valid, authentic, and permissible update image of platform firmware. The evaluator 
							initiates an update using this image through the process described in the operational guidance.
							After the process is complete, the evaluator checks the current firmware version to ensure
							that the new firmware version matches that of the update.</test>
						<test>The evaluator performs the same test, this time using a valid update image that is signed
							with an incorrect key. The update must fail.</test>
						<test>The evaluator performs the same test, this time using an update image that is corrupted
							but is signed with the correct key. The update must fail.</test>
						<test>The evaluator performs the same test, this time using a valid update image that is not signed.
							The update must fail.</test>
						<test>If the TSF implements rollback protections, the evaluator performs the same test, this time using 
							a valid, signed update image that is has an earlier version number than the currently installed
							firmware. The update must fail.</test>
					</testlist>
				</Tests>
			</aactivity>
		</f-element>
		<audit-event type="optional">
			<audit-event-descr>Failure of update authentication/integrity check/rollback</audit-event-descr>
			<audit-event-info>Version numbers of the current firmware and of the attempted update</audit-event-info>
		</audit-event>
		<audit-event type="optional">
			<audit-event-descr>Failure of update operation</audit-event-descr>
			<audit-event-info>Version numbers of the current firmware and of the attempted update</audit-event-info>
		</audit-event>
		<audit-event type="optional">
			<audit-event-descr>Success of update operation</audit-event-descr>
			<audit-event-info>Version numbers of the new and old firmware images.</audit-event-info>
		</audit-event>
	</f-component>
		
	<!-- FPT_TUD_EXT.3 Platform Firmware Delayed-Authentication Update Mechanism -->
	<!-- In this case, we install the update and then let the boot-time integrity check or 
		whatever do the check. As long as it is done before the code is executed it's okay...
		meaning all the other requirements are met. Especially FPT_ROT_EXT.2. -->
	<f-component cc-id="fpt_tud_ext.3" name="Platform Firmware Delayed-Authentication Update Mechanism" status="sel-based">
		<depends on-sel="sel-unauth-update"/>
		<f-element id="fpt-tud-ext-3e1">
			<title>
				The TSF shall allow execution or use of platform firmware updates only if new platform firmware
				is integrity- and authenticity-checked using the mechanism described in FPT_ROT_EXT.2 prior to its
				execution or use, and
				<selectables>
					<selectable>the version number of the platform firmware update is more recent than 
						the version number of the previously installed platform firmware</selectable>
					<selectable>no other conditions</selectable>
				</selectables>.
			</title>
			<note role="application">
				This update mechanism does not require an integrity or authenticity check prior to installation, but the
				newly installed platform firmware must have its integrity and authenticity verified prior to 
				being executed or used. This update mechanism takes advantage of the existing FPT_ROT_EXT.2
				requirement to avoid having to verify the integrity and authenticity of an update package
				at install time.<h:p/>
				The ST author should select "the version number of the platform firmware update is more recent than 
				the version number of the previously installed platform firmware" if the TSF supports rollback prevention.
			</note>
		</f-element>
		<f-element id="fpt-tud-ext-3e2">
			<title>
				The TSF shall include an observable platform firmware version identifier that is accessible by the
				update mechanism and includes information that enables the update mechanism to determine the relative
				order of updates.
			</title>
		</f-element>
		<f-element id="fpt-tud-ext-3e3">
			<title>
				The TSF shall provide an observable indication of the success or failure of the update operation.
			</title>
			<note role="application">
				For success, this should at least include an indication of the version number of the newly installed firmware. 
				Notification of failure could include generation of an audit event by a management subsystem, a 
				beep code, an updated version number on a splash screen, or simple failure to continue functioning.
			</note>
		</f-element>
		<f-element id="fpt-tud-ext-3e4"> 
			<title>
				The TOE shall take the following actions if a platform firmware update integrity, authentication, or
				rollback-prevention check fails, or a platform firmware update fails for any other reason:
				<h:ul>
					<h:li>Notify Notify an administrator/user by 
						<selectables>
							<selectable id="sel-tud3-audit">generating an audit event</selectable>
							<selectable><assignable>notification method</assignable></selectable>
						</selectables></h:li>
				</h:ul> and
				<selectables linebreak="yes">
					<selectable>Halt</selectable>
					<selectable>Stop all execution and shut down</selectable>
					<selectable>Initiate a recovery process as specified in FPT_RVR_EXT.1</selectable>
				</selectables>
				<selectables linebreak="yes">
					<selectable>automatically</selectable>
					<selectable>in accordance with administrator-configurable policy</selectable>
					<selectable>by express determination of an administrator/user</selectable>
				</selectables>.
			</title>
			<note role="application">
				The platform firmware unauthenticated update mechanism installs platform firmware updates without
				first checking their integrity or authenticity. Instead, this mechanism either invokes a 
				special authentication/integrity check on the firmware <h:i>in situ</h:i> after install or relies on the
				firmware checks required by FPT_ROT_EXT.2 to ensure the integrity and authenticity of the update 
				image. In either case, the integrity and authenticity of the update must be verified before the 
				updated firmware is executed or used.<h:p/>
				Likewise, if the TSF implement rollback prevention, this check must be made before the newly installed
				firmware is executed.
			</note>
			<aactivity>
				<h:p/><TSS>
					The evaluator shall ensure that the TSS includes a comprehensive description of how the 
					authentication of platform firmware updates is implemented by the TSF. The TSS should cover the 
					initialization process and the activities that are performed to ensure that the
					digital signature of the update image is verified before it is executed or used. <h:p/>
					The evaluator shall examine the TSF to ensure that it describes the platform firmware version identifier
					and explains its meaning and encoding.<h:p/>
					The evaluator shall also ensure that the TSS describes the actions taken by the TSF if 
					an update image fails authentication, integrity, or rollback-prevention checks.<h:p/>
				</TSS>
				<Guidance>
					The evaluator shall examine the operational guidance to ensure that it describes the process for 
					updating the platform firmware.<h:p/>
					The evaluator shall examine the operational guidance to ensure that it documents the observable indications
					of update success or failure, and that it describes how to access the platform firmware version indicators.<h:p/>
				</Guidance>
				<Tests>
					<testlist>
						<test>The evaluator determines the current version of the platform firmware, and obtains or 
							produces a valid, authentic, and permissible update image of platform firmware. The evaluator 
							initiates an update using this image through the process described in the operational guidance.
							After the process is complete, the evaluator checks the current firmware version to ensure
							that the new firmware version matches that of the update.</test>
						<test>The evaluator performs the same test, this time using a inauthentic update image. The update code
							must fail to execute.</test>
						<test>The evaluator performs the same test, this time using an update image that is corrupted
							but is otherwise authentic. The update code must fail to execute.</test>
						<test>If the TSF implements rollback protections, the evaluator performs the same test, this time using 
							a valid, signed update image that is has an earlier version number than the currently installed
							firmware. The update code must fail to execute.</test>
					</testlist>
				</Tests>
			</aactivity>
		</f-element>
		<audit-event type="optional">
			<audit-event-descr>Failure of update authentication/integrity/rollback check</audit-event-descr>
			<audit-event-info>Version numbers of the current firmware and of the attempted update</audit-event-info>
		</audit-event>
		<audit-event type="optional">
			<audit-event-descr>Failure of update operation</audit-event-descr>
			<audit-event-info>Version numbers of the current firmware and of the attempted update</audit-event-info>
		</audit-event>
		<audit-event type="optional">
			<audit-event-descr>Success of update operation</audit-event-descr>
			<audit-event-info>Version numbers of the new and old firmware images.</audit-event-info>
		</audit-event>
	</f-component>
		
	<!-- FPT_TUD_EXT.4 Secure Local Platform Firmware Update Mechanism QQQQ -->	
	<f-component cc-id="fpt_tud_ext.4" title="Secure Local Platform Firmware Update Mechanism" status="sel-based">
		<depends on-sel="sel-local-update"/>
		<f-element id="fpt-tud-ext-4e1">
			<title>The TSF shall provide a secure local update mechanism that requires an assertion of physical access to the TOE
				before installation of an update.
			</title>
		</f-element>
		<f-element id="fpt-tud-ext-4e2">
			<title>
				The Administrator/User shall assert physical presence to the TSF through: 
				<selectables linebreak="yes">
					<selectable>login to the TOE from a physically connected console or terminal</selectable>
					<selectable>physical connection of a jumper or cable</selectable>
					<selectable>connection to a debug port</selectable>
					<selectable><assignable>description of other mechanism for asserting physical presence</assignable></selectable>
				</selectables>
			</title>
			<note role="application">
				This requirement pertains to platform firmware update mechanisms that do not use the 
				authentication-based update mechanism described in FPT_TUD_EXT.2 or the delayed-authentication
				described in FPT_TUD_EXT.3. The secure local update 
				mechanism ensures the authenticity and integrity of the firmware update image by requiring an
				Administrator/User to be physically present at the TOE. An assertion of physical presence can take the form, for example, of
				requiring entry of a password at a boot screen, unlocking of a physical lock (e.g., a motherboard
				jumper), or inserting a USB cable before permitting platform firmware to be updated. <h:p/>
				There is no requirement that the local update mechanism support rollback prevention.<h:p/>
				The local update mechanism must be a designed mechanism. If update can be accomplished only
				through the physical removal and replacement of a part, then that is not a secure local
				update mechanism--that is no update mechanism--and "make no provision for platform firmware update"
				should be selected in FPT_TUD_EXT.1.1.<h:p/>
			</note>
		</f-element>
			<f-element id="fpt-tud-ext-4e3">
			<title>
				The TSF shall include a platform firmware version identifier that is accessible by the update mechanism or
				to the Administrator/User who asserts physical presence.
			</title>
		</f-element>
		<f-element id="fpt-tud-ext-4e4">
			<title>
				The TSF shall provide an observable indication of the success or failure of the update operation.
			</title>
			<note role="application">
				For success, this indication should include the version number of the newly installed firmware. 
				Notification of failure could be through a beep code, an indication on a splash screen, or simple failure to 
				continue functioning.
			</note>
		<aactivity>
			<TSS>
				The evaluator shall check the TSS section to confirm that it clearly and thoroughly describes how the
				secure local update functionality is implemented.<h:p/>
			</TSS>
			<Guidance>
				The evaluator shall examine the operational guidance to ensure that it describes instructions for 
				using the local update mechanism, and how to validate that the update was succesful.<h:p/>		
			</Guidance>
			<Tests> 
				<testlist>
					<test>The evaluator tests the secure local update by following the instructions provided in the operational 
				guidance to update the platform firmware image. The update must succeed.<h:p/>
					</test>
					<test>
						The evaluator next tries to update the platform firmware image without 
						first asserting physical presence. The update must fail or be not possible.
				</test>
					</testlist>
			</Tests>
			</aactivity>
		</f-element>
		<audit-event/>
	</f-component>
		
    </section>				
	    
    </section>
	  
<!--   5.2 Security Assurance Requirements -->
	  
    <section title="Security Assurance Requirements" id="SARs">
      The Security Objectives in 
      <xref to="obj"/> were constructed to address threats identified in
      <xref to="threats"/>. The Security Functional Requirements (SFRs)
      in <xref to="SFRs"/> are a formal instantiation of the Security Objectives. The PP
      identifies the Security Assurance Requirements (SARs) to frame the extent to
      which the evaluator assesses the documentation applicable for the evaluation and performs
      independent testing. <h:br/> This section lists the set of SARs from CC part 3
      that are required in evaluations against this PP. Individual Assurance Activities
      <!--(AAs). Never use these again --> to be performed are specified both in <xref
        to="req"/> as well as in this section. <h:br/> The general model for evaluation of OSs
		against STs written to conform to this PP is as follows: <h:br/> After the
        ST has been approved for evaluation, the ITSEF will obtain the
        OS, supporting environmental IT, and the administrative/user guides for
      the OS. The ITSEF is expected to perform actions mandated by the Common Evaluation
      Methodology (CEM) for the ASE and ALC SARs. The ITSEF also performs the Assurance Activities
      contained within <xref to="req"/>, which are intended to be an interpretation of the
      other CEM assurance requirements as they apply to the specific technology instantiated in the
      OS. The Assurance Activities that are captured in <xref to="req"/> also provide
      clarification as to what the developer needs to provide to demonstrate the OS is compliant
      with the PP. 
	    <section title="Class ASE: Security Target" id="ase">As per ASE activities
        defined in <cite linkend="bibCEM"/>.</section>
      <section title="Class ADV: Development" id="adv">The information about the OS is contained in the guidance documentation available to the end user as
        well as the TSS portion of the ST. The OS developer must concur with the description of the product that is
        contained in the TSS as it relates to the functional requirements. The Assurance Activities
        contained in <xref to="SFRs"/> should provide the ST authors with
        sufficient information to determine the appropriate content for the TSS section.
          <a-component cc-id="adv_fsp.1" name="Basic Functional Specification (ADV_FSP.1)">The
          functional specification describes the TSFIs. It is not
          necessary to have a formal or complete specification of these interfaces. Additionally,
          because OSs conforming to this PP will necessarily have interfaces to
          the Operational Environment that are not directly invokable by OS
          users, there is little point specifying that such interfaces be described in and of
          themselves since only indirect testing of such interfaces may be possible. For this PP,
          the activities for this family should focus on understanding the interfaces presented in
          the TSS in response to the functional requirements and the interfaces
          presented in the AGD documentation. No additional “functional specification” documentation
          is necessary to satisfy the assurance activities specified. The interfaces that need to be
          evaluated are characterized through the information needed to perform the assurance
          activities listed, rather than as an independent, abstract list. 
            <a-element type="D">
              <title>The developer shall provide a functional specification.</title>
            </a-element>
            <a-element type="C">
              <title>The developer shall provide a tracing from the functional specification to the
              SFRs.</title>
              <note role="application">As indicated in the introduction to this section, the
              functional specification is comprised of the information contained in the AGD_OPE and
              AGD_PRE documentation. The developer may reference a website accessible to application
              developers and the evaluator. The assurance activities in the functional requirements
              point to evidence that should exist in the documentation and TSS
              section; since these are directly associated with the SFRs, the tracing in element
              ADV_FSP.1.2D is implicitly already done and no additional documentation is
              necessary.</note>
            </a-element>
	  
            <a-element type="C">
              <title>The functional specification shall describe the purpose and method of use for
              each SFR-enforcing and SFR-supporting TSFI.</title>
            </a-element>
            <a-element type="C">
              <title>The functional specification shall identify all parameters associated with each
              SFR-enforcing and SFR-supporting TSFI.</title>
            </a-element>
            <a-element type="C">
              <title>The functional specification shall provide rationale for the implicit
              categorization of interfaces as SFR-non-interfering.</title>
            </a-element>
            <a-element type="C">
              <title>
		The tracing shall demonstrate that the SFRs trace to TSFIs 
		in the functional specification.
	      </title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
            </a-element>
            <a-element type="E">
              <title>The evaluator shall determine that the functional specification is an accurate
              and complete instantiation of the SFRs.</title>
              <aactivity>There are no specific assurance activities associated with these SARs, except
              ensuring the information is provided. The functional specification documentation is
              provided to support the evaluation activities described in <xref to="SFRs"/>, and
              other activities described for AGD, ATE, and AVA SARs. The requirements on the content
              of the functional specification information is implicitly assessed by virtue of the
              other assurance activities being performed; if the evaluator is unable to perform an
              activity because there is insufficient interface information, then an adequate
              functional specification has not been provided.
	      </aactivity>
            </a-element>
	  
        </a-component>
      </section>
	    
      <section id="agd" title="Class AGD: Guidance Documentation">The guidance documents will be
        provided with the ST. Guidance must include a description of how the IT
        personnel verifies that the Operational Environment can fulfill its role for the security
        functionality. The documentation should be in an informal style and readable by the IT
        personnel. Guidance must be provided for every operational environment that the product
        supports as claimed in the ST. This guidance includes instructions to
        successfully install the TSF in that environment; and Instructions to
        manage the security of the TSF as a product and as a component of the
        larger operational environment. Guidance pertaining to particular security functionality is
        also provided; requirements on such guidance are contained in the assurance activities
        specified with each requirement. 
	<a-component cc-id="agd_ope.1" name="Operational User Guidance (AGD_OPE.1)">
	    <a-element type="D">
	      <title>The developer shall provide operational user guidance.</title>
	      <note role="application">The operational user guidance does not have to be contained in a
	      single document. Guidance to users, administrators and application developers can be
              spread among documents or web pages. 
	      Rather than repeat information here, the developer should
              review the assurance activities for this component to ascertain the specifics of the
              guidance that the evaluator will be checking for. This will provide the necessary
              information for the preparation of acceptable guidance.</note>
            </a-element>
          
            <a-element type="C">
              <title>The operational user guidance shall describe, for each user role, the
              user-accessible functions and privileges that should be controlled in a secure
              processing environment, including appropriate warnings.</title>
              <note role="application">User and administrator are to be considered in the definition
              of user role.</note>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall describe, for each user role, how to use the
              available interfaces provided by the OS in a secure manner.</title>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall describe, for each user role, the available
              functions and interfaces, in particular all security parameters under the control of
              the user, indicating secure values as appropriate.</title>
              <note role="application">
		This portion of the operational user guidance should be presented
		in the form of a checklist that can be quickly executed by IT personnel (or end-users, 
		when necessary) and suitable for use in compliance activities.
		When possible, this guidance is to be expressed in the eXtensible Configuration 
		Checklist Description Format (XCCDF) to
		support security automation.  
		Minimally, it should be presented in a structured 
		format which includes a title for each configuration item, 
		instructions for achieving the secure configuration, and any relevant rationale.  
              </note>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall, for each user role, clearly present each
              type of security-relevant event relative to the user-accessible functions that need to
              be performed, including changing the security characteristics of entities under the
              control of the TSF.</title>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall identify all possible modes of operation of
              the OS (including operation following failure or operational
              error), their consequences, and implications for maintaining secure operation.</title>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall, for each user role, describe the security
              measures to be followed in order to fulfill the security objectives for the
              operational environment as described in the ST.</title>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall be clear and reasonable.</title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence. </title>
              <aactivity>Some of the contents of the operational guidance are verified by the
              assurance activities in <xref to="SFRs"/> and evaluation of the OS according to the <cite linkend="bibCEM"/>. The following additional
              information is also required. If cryptographic functions are provided by the OS, the operational guidance shall contain instructions for configuring
              the cryptographic engine associated with the evaluated configuration of the OS. It shall provide a warning to the administrator that use of other
              cryptographic engines was not evaluated nor tested during the CC evaluation of the
              OS. The documentation must describe the process for verifying
              updates to the OS by verifying a digital signature – this may be
              done by the OS or the underlying platform. The evaluator will
              verify that this process includes the following steps: Instructions for obtaining the
              update itself. This should include instructions for making the update accessible to
              the OS (e.g., placement in a specific directory). Instructions for
              initiating the update process, as well as discerning whether the process was
              successful or unsuccessful. This includes generation of the hash/digital signature.
              The OS will likely contain security functionality that does not
              fall in the scope of evaluation under this PP. The operational guidance shall make it
              clear to an administrator which security functionality is covered by the evaluation
              activities. </aactivity>
          </a-element>
	  
        </a-component>
        <a-component cc-id="agd_pre.1" name="Preparative Procedures (AGD_PRE.1)">
            <a-element type="D">
              <title>The developer shall provide the OS, including its preparative
              procedures.</title>
              <note role="application">As with the operational guidance, the developer should look to
              the assurance activities to determine the required content with respect to preparative
              procedures.</note>
            </a-element>
	  
            <a-element type="C">
              <title>The preparative procedures shall describe all the steps necessary for secure
              acceptance of the delivered OS in accordance with the developer's
              delivery procedures.</title>
            </a-element>
            <a-element type="C">
              <title>The preparative procedures shall describe all the steps necessary for secure
              installation of the OS and for the secure preparation of the
              operational environment in accordance with the security objectives for the operational
              environment as described in the ST.</title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
            </a-element>
            <a-element type="E">
              <title>The evaluator shall apply the preparative procedures to confirm that the OS can be prepared securely for operation.</title>
              <aactivity>As indicated in the introduction above, there are significant expectations
              with respect to the documentation—especially when configuring the operational
              environment to support OS functional requirements. The evaluator
              shall check to ensure that the guidance provided for the OS
              adequately addresses all platforms claimed for the OS in the ST. </aactivity>
            </a-element>
	  
        </a-component>
      </section>
      <section id="alc" title="Class ALC: Life-cycle Support"> At the assurance level provided
        for OSs conformant to this PP, life-cycle support is limited to end-user-visible aspects of
        the life-cycle, rather than an examination of the OS vendor’s development and configuration
        management process. This is not meant to diminish the critical role that a developer’s
        practices play in contributing to the overall trustworthiness of a product; rather, it is a
        reflection on the information to be made available for evaluation at this assurance level.
          <a-component cc-id="alc_cmc.1" name="Labeling of the TOE (ALC_CMC.1)">This component is
          targeted at identifying the OS such that it can be distinguished from
          other products or versions from the same vendor and can be easily specified when being
          procured by an end user. 
            <a-element type="D">
              <title>The developer shall provide the OS and a reference for the
              OS.</title>
            </a-element>
	  
            <a-element type="C">
              <title>The OS shall be labeled with a unique reference.</title>
              <note role="application">Unique reference information includes: 
	      <h:ul>
		<h:li>OS Name</h:li>
		<h:li>OS Version</h:li>
		<h:li>OS Description</h:li>
		<h:li>Software Identification (SWID) tags, if available</h:li>
              </h:ul>
              </note>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
              <aactivity>The evaluator will check the ST to ensure that it contains
              an identifier (such as a product name/version number) that specifically identifies the
              version that meets the requirements of the ST. Further, the
              evaluator will check the AGD guidance and OS samples received for
              testing to ensure that the version number is consistent with that in the ST. If the vendor
			  maintains a web site advertising the OS, the evaluator will examine the information on the web site to
              ensure that the information in the ST is sufficient to distinguish
              the product.</aactivity>
            </a-element>
	  
        </a-component>
        <a-component cc-id="alc_cms.1" name="TOE CM Coverage (ALC_CMS.1)">
	  Given the scope of the OS and its associated evaluation 
	  evidence requirements, this component’s assurance activities are covered 
	  by the assurance activities listed for ALC_CMC.1.
            <a-element type="D">
              <title>
		The developer shall provide a configuration list for the  OS.
	      </title>
            </a-element>
	  
            <a-element type="C">
              <title>The configuration list shall include the following: the OS
              itself; and the evaluation evidence required by the SARs.</title>
            </a-element>
            <a-element type="C">
              <title>The configuration list shall uniquely identify the configuration items.</title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
              <aactivity>The "evaluation evidence required by the SARs" in this PP is limited to the
              information in the ST coupled with the guidance provided to
              administrators and users under the AGD requirements. By ensuring that the OS is specifically identified and that this identification is
              consistent in the ST and in the AGD guidance (as done in the
              assurance activity for ALC_CMC.1), the evaluator implicitly confirms the information
              required by this component. Life-cycle support is targeted aspects of the developer’s
              life-cycle and instructions to providers of applications for the developer’s devices,
              rather than an in-depth examination of the TSF manufacturer’s
              development and configuration management process. This is not meant to diminish the
              critical role that a developer’s practices play in contributing to the overall
              trustworthiness of a product; rather, it’s a reflection on the information to be made
              available for evaluation. <h:br/> The evaluator will ensure that the developer has
              identified (in guidance documentation for application developers concerning the
              targeted platform) one or more development environments appropriate for use in
              developing applications for the developer’s platform. For each of these development
              environments, the developer shall provide information on how to configure the
              environment to ensure that buffer overflow protection mechanisms in the environment(s)
              are invoked (e.g., compiler and linker flags). The evaluator will ensure that this documentation
              also includes an indication of whether such protections are on by default, or have to
              be specifically enabled. The evaluator will ensure that the TSF is
              uniquely identified (with respect to other products from the TSF
              vendor), and that documentation provided by the developer in association with the
              requirements in the ST is associated with the TSF
              using this unique identification.</aactivity>
          </a-element>
	  
        </a-component>
        <a-component cc-id="alc_tsu_ext.1" name="Timely Security Updates"> This component requires the
          OS developer, in conjunction with any other necessary parties, to provide information as
          to how the end-user devices are updated to address security issues in a timely manner. The
          documentation describes the process of providing updates to the public from the time a
          security flaw is reported/discovered, to the time an update is released. This description
          includes the parties involved (e.g., the developer, carriers(s)) and the steps that are
          performed (e.g., developer testing, carrier testing), including worst case time periods,
          before an update is made available to the public. 
            <a-element type="D">
              <title>The developer shall provide a description in the TSS of how timely security
              updates are made to the OS.</title>
            </a-element>
            <a-element type="D">
              <title> The developer shall provide a description in the TSS of how users are notified
              when updates change security properties or the configuration of the product. </title>
            </a-element>
	  
            <a-element type="C">
              <title>The description shall include the process for creating and deploying security
              updates for the OS software.</title>
            </a-element>
            <a-element type="C">
              <title>The description shall include the mechanisms publicly available for reporting
              security issues pertaining to the OS.</title>
              <note> The reporting mechanism could include web sites, email addresses, as well as a
              means to protect the sensitive nature of the report (e.g., public keys that could be
              used to encrypt the details of a proof-of-concept exploit). </note>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all
              requirements for content and presentation of evidence.</title>
              <aactivity> The evaluator will verify that the TSS contains a description of the timely
              security update process used by the developer to create and deploy security updates.
              The evaluator will verify that this description addresses the entire application. The
              evaluator will also verify that, in addition to the OS developer’s process, any
              third-party processes are also addressed in the description. The evaluator will also
              verify that each mechanism for deployment of security updates is described. <h:br/> The
              evaluator will verify that, for each deployment mechanism described for the update
              process, the TSS lists a time between public disclosure of a vulnerability and public
              availability of the security update to the OS patching this vulnerability, to include
              any third-party or carrier delays in deployment. The evaluator will verify that this
              time is expressed in a number or range of days. <h:br/> The evaluator will verify that
              this description includes the publicly available mechanisms (including either an email
              address or website) for reporting security issues related to the OS. The evaluator
              shall verify that the description of this mechanism includes a method for protecting
              the report either using a public key for encrypting email or a trusted channel for a
              website. </aactivity>
            </a-element>
	  
        </a-component>
      </section>
	    
      <section id="ate" title="Class ATE: Tests">Testing is specified for functional aspects of
        the system as well as aspects that take advantage of design or implementation weaknesses.
        The former is done through the ATE_IND family, while the latter is through the AVA_VAN
        family. At the assurance level specified in this PP, testing is based on advertised
        functionality and interfaces with dependency on the availability of design information. One
        of the primary outputs of the evaluation process is the test report as specified in the
        following requirements. 
		<a-component cc-id="ate_ind.1" name="Independent Testing – Conformance (ATE_IND.1)"> 
			Testing is performed to confirm the
          functionality described in the TSS as well as the administrative
          (including configuration and operational) documentation provided. The focus of the testing
          is to confirm that the requirements specified in <xref to="SFRs"/> being met,
          although some additional testing is specified for SARs in <xref to="SARs"/>. The
          Assurance Activities identify the additional testing activities associated with these
          components. The evaluator produces a test report documenting the plan for and results of
          testing, as well as coverage arguments focused on the platform/OS
          combinations that are claiming conformance to this PP. Given the scope of the OS and its associated evaluation evidence requirements, this component’s
          assurance activities are covered by the assurance activities listed for ALC_CMC.1.
            <a-element type="D">
              <title>The developer shall provide the OS for testing.</title>
            </a-element>
	  
            <a-element type="C">
              <title>The OS shall be suitable for testing.</title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator <h:i>shall confirm</h:i> that the information provided meets all
              requirements for content and presentation of evidence.</title>
            </a-element>
            <a-element type="E">
              <title>The evaluator shall test a subset of the TSF to confirm that
              the TSF operates as specified.</title>
              <note role="application">The evaluator will test the OS on the most current fully
              patched version of the platform.</note>
              <aactivity>The evaluator will prepare a test plan and report documenting the testing
              aspects of the system, including any application crashes during testing. The evaluator
              shall determine the root cause of any application crashes and include that information
              in the report. The test plan covers all of the testing actions contained in the <cite
                linkend="bibCEM"/> and the body of this PP’s Assurance Activities. <h:br/> While it is
              not necessary to have one test case per test listed in an Assurance Activity, the
              evaluator must document in the test plan that each applicable testing requirement in
              the ST is covered. The test plan identifies the platforms to be
              tested, and for those platforms not included in the test plan but included in the
                ST, the test plan provides a justification for not testing the
              platforms. This justification must address the differences between the tested
              platforms and the untested platforms, and make an argument that the differences do not
              affect the testing to be performed. It is not sufficient to merely assert that the
              differences have no affect; rationale must be provided. If all platforms claimed in
              the ST are tested, then no rationale is necessary. The test plan
              describes the composition of each platform to be tested, and any setup that is
              necessary beyond what is contained in the AGD documentation. It should be noted that
              the evaluator is expected to follow the AGD documentation for installation and setup
              of each platform either as part of a test or as a standard pre-test condition. This
              may include special test drivers or tools. For each driver or tool, an argument (not
              just an assertion) should be provided that the driver or tool will not adversely
              affect the performance of the functionality by the OS and its
              platform. <h:br/> This also includes the configuration of the cryptographic engine to be
              used. The cryptographic algorithms implemented by this engine are those specified by
              this PP and used by the cryptographic protocols being evaluated (IPsec, TLS). The test
              plan identifies high-level test objectives as well as the test procedures to be
              followed to achieve those objectives. These procedures include expected results. <h:br/>
              The test report (which could just be an annotated version of the test plan) details
              the activities that took place when the test procedures were executed, and includes
              the actual results of the tests. This shall be a cumulative account, so if there was a
              test run that resulted in a failure; a fix installed; and then a successful re-run of
              the test, the report would show a “fail” and “pass” result (and the supporting
              details), and not just the “pass” result.</aactivity>
            </a-element>
	  
        </a-component>
      </section>
      <section id="ava" title="Class AVA: Vulnerability Assessment">For the first generation of
        this protection profile, the evaluation lab is expected to survey open sources to discover
        what vulnerabilities have been discovered in these types of products. In most cases, these
        vulnerabilities will require sophistication beyond that of a basic attacker. Until
        penetration tools are created and uniformly distributed to the evaluation labs, the
        evaluator will not be expected to test for these vulnerabilities in the OS. The labs will be 
		expected to comment on the likelihood of these vulnerabilities given
        the documentation provided by the vendor. This information will be used in the development
        of penetration testing tools and for the development of future protection profiles.
        <a-component cc-id="ava_van.1" name="Vulnerability Survey (AVA_VAN.1)">
            <a-element type="D">
              <title>The developer shall provide the OS for testing.</title>
            </a-element>
	  
          <a-element type="C">
            <title>The OS shall be suitable for testing.</title>
          </a-element>
	  
          <a-element type="E">
            <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
          </a-element>
          <a-element type="E">
            <title>The evaluator shall perform a search of public domain sources to identify
              potential vulnerabilities in the OS.</title>
            <note role="application">Public domain sources include the Common Vulnerabilities 
              and Exposures (CVE) dictionary for publicly-known vulnerabilities.  Public domain
              sources also include sites which provide free checking of files for viruses.</note>
            <!-- their Usage statement does not permit us to mention VirusTotal by name without permission -->
          </a-element>
          <a-element type="E">
            <title>The evaluator shall conduct penetration testing, based on the identified
              potential vulnerabilities, to determine that the OS is resistant to
              attacks performed by an attacker possessing Basic attack potential.</title>
            <aactivity>The evaluator will generate a report to document their
              findings with respect to this requirement. This report could physically be part of the
              overall test report mentioned in ATE_IND, or a separate document. The evaluator
              performs a search of public information to find vulnerabilities that have been found
              in similar applications with a particular focus on network protocols the application
              uses and document formats it parses. 
              The evaluator documents the sources consulted and
              the vulnerabilities found in the report. 
              <h:br/>
              For each vulnerability found, the evaluator
              either provides a rationale with respect to its non-applicability, or the evaluator
              formulates a test (using the guidelines provided in ATE_IND) to confirm the
              vulnerability, if suitable. Suitability is determined by assessing the attack vector
              needed to take advantage of the vulnerability. If exploiting the vulnerability
              requires expert skills and an electron microscope, for instance, then a test would not
              be suitable and an appropriate justification would be formulated.</aactivity>
          </a-element>
	  
        </a-component>
      </section>      
    </section>
  </section>

	    
<!-- Appendix A and B are auto-generated. -->
<!-- Appendix A includes optional, objective, and implementation-dependent requirements -->
<!-- Appendix B is selection-based requirements -->
	    
	    
  <!-- 
       Do NOT put SFRs in this section. All SFR belong up above in SFR section. 
       To make an SFR optional tag it above as status="optional" 
  -->


  <appendix title="References" id="biblio">
    <bibliography>
      <entry id="bibCEM">
        <tag>CEM</tag>
        <description>
          <h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CEMV3.1R4.pdf">Common
            Evaluation Methodology for Information Technology Security - Evaluation Methodology</h:a>,
          CCMB-2012-09-004, Version 3.1, Revision 4, September 2012. </description>
      </entry>
      <entry id="bibCESG">
        <tag>CESG</tag>
        <description>CESG - <h:a
            href="https://www.gov.uk/government/collections/end-user-devices-security-guidance"> End
            User Devices Security and Configuration Guidance</h:a></description>
      </entry>
      <entry id="bibCSA">
        <tag>CSA</tag>
        <description>
          <h:a href="http://csrc.nist.gov/groups/SMA/ispab/documents/csa_87.txt">Computer Security Act
            of 1987</h:a>, H.R. 145, June 11, 1987. </description>
      </entry>
      <entry id="bibOMB">
        <tag>OMB</tag>
        <description>
          <h:a href="http://www.whitehouse.gov/sites/default/files/omb/memoranda/fy2006/m06-19.pdf"
            >Reporting Incidents Involving Personally Identifiable Information and Incorporating the
            Cost for Security in Agency Information Technology Investments</h:a>, OMB M-06-19, July
          12, 2006. </description>
      </entry>
    </bibliography>
  </appendix>

  <appendix title="Acronyms" id="acronyms">
   <acronyms/>
  </appendix>

  <implements>
    <feature id="a-feature-id" title="Widget Thing">
      <description> If the TOE includes the widget thing, all of the following SFRs must be claimed: <h:ul><h:li> FQQ_QQQ.6</h:li></h:ul>
      </description>
    </feature>
  </implements>
</PP>

